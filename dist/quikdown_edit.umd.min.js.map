{"version":3,"file":"quikdown_edit.umd.min.js","sources":["../src/quikdown.js","../src/quikdown_bd.js","../src/quikdown_edit.js"],"sourcesContent":["/**\n * quikdown - A minimal markdown parser optimized for chat/LLM output\n * Supports tables, code blocks, lists, and common formatting\n * @param {string} markdown - The markdown source text\n * @param {Object} options - Optional configuration object\n * @param {Function} options.fence_plugin - Custom renderer for fenced code blocks\n *                   (content, fence_string) => html string\n * @param {boolean} options.inline_styles - If true, uses inline styles instead of classes\n * @param {boolean} options.bidirectional - If true, adds data-qd attributes for source tracking\n * @param {boolean} options.lazy_linefeeds - If true, single newlines become <br> tags\n * @returns {string} - The rendered HTML\n */\n\n// Version will be injected at build time  \nconst quikdownVersion = '__QUIKDOWN_VERSION__';\n\n// Constants for reuse\nconst CLASS_PREFIX = 'quikdown-';\nconst PLACEHOLDER_CB = '§CB';\nconst PLACEHOLDER_IC = '§IC';\n\n// Escape map at module level\nconst ESC_MAP = {'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'};\n\n// Single source of truth for all style definitions - optimized\nconst QUIKDOWN_STYLES = {\n    h1: 'font-size:2em;font-weight:600;margin:.67em 0;text-align:left',\n    h2: 'font-size:1.5em;font-weight:600;margin:.83em 0',\n    h3: 'font-size:1.25em;font-weight:600;margin:1em 0',\n    h4: 'font-size:1em;font-weight:600;margin:1.33em 0',\n    h5: 'font-size:.875em;font-weight:600;margin:1.67em 0',\n    h6: 'font-size:.85em;font-weight:600;margin:2em 0',\n    pre: 'background:#f4f4f4;padding:10px;border-radius:4px;overflow-x:auto;margin:1em 0',\n    code: 'background:#f0f0f0;padding:2px 4px;border-radius:3px;font-family:monospace',\n    blockquote: 'border-left:4px solid #ddd;margin-left:0;padding-left:1em',\n    table: 'border-collapse:collapse;width:100%;margin:1em 0',\n    th: 'border:1px solid #ddd;padding:8px;background-color:#f2f2f2;font-weight:bold;text-align:left',\n    td: 'border:1px solid #ddd;padding:8px;text-align:left',\n    hr: 'border:none;border-top:1px solid #ddd;margin:1em 0',\n    img: 'max-width:100%;height:auto',\n    a: 'color:#06c;text-decoration:underline',\n    strong: 'font-weight:bold',\n    em: 'font-style:italic',\n    del: 'text-decoration:line-through',\n    ul: 'margin:.5em 0;padding-left:2em',\n    ol: 'margin:.5em 0;padding-left:2em',\n    li: 'margin:.25em 0',\n    // Task list specific styles\n    'task-item': 'list-style:none',\n    'task-checkbox': 'margin-right:.5em'\n};\n\n// Factory function to create getAttr for a given context\nfunction createGetAttr(inline_styles, styles) {\n    return function(tag, additionalStyle = '') {\n        if (inline_styles) {\n            let style = styles[tag];\n            if (!style && !additionalStyle) return '';\n            \n            // Remove default text-align if we're adding a different alignment\n            if (additionalStyle && additionalStyle.includes('text-align') && style && style.includes('text-align')) {\n                style = style.replace(/text-align:[^;]+;?/, '').trim();\n                if (style && !style.endsWith(';')) style += ';';\n            }\n            \n            /* istanbul ignore next - defensive: additionalStyle without style doesn't occur with current tags */\n            const fullStyle = additionalStyle ? (style ? `${style}${additionalStyle}` : additionalStyle) : style;\n            return ` style=\"${fullStyle}\"`;\n        } else {\n            const classAttr = ` class=\"${CLASS_PREFIX}${tag}\"`;\n            // Apply inline styles for alignment even when using CSS classes\n            if (additionalStyle) {\n                return `${classAttr} style=\"${additionalStyle}\"`;\n            }\n            return classAttr;\n        }\n    };\n}\n\nfunction quikdown(markdown, options = {}) {\n    if (!markdown || typeof markdown !== 'string') {\n        return '';\n    }\n    \n    const { fence_plugin, inline_styles = false, bidirectional = false, lazy_linefeeds = false } = options;\n    const styles = QUIKDOWN_STYLES; // Use module-level styles\n    const getAttr = createGetAttr(inline_styles, styles); // Create getAttr once\n\n    // Escape HTML entities to prevent XSS\n    function escapeHtml(text) {\n        return text.replace(/[&<>\"']/g, m => ESC_MAP[m]);\n    }\n    \n    // Helper to add data-qd attributes for bidirectional support\n    const dataQd = bidirectional ? (marker) => ` data-qd=\"${escapeHtml(marker)}\"` : () => '';\n    \n    // Sanitize URLs to prevent XSS attacks\n    function sanitizeUrl(url, allowUnsafe = false) {\n        /* istanbul ignore next - defensive programming, regex ensures url is never empty */\n        if (!url) return '';\n        \n        // If unsafe URLs are explicitly allowed, return as-is\n        if (allowUnsafe) return url;\n        \n        const trimmedUrl = url.trim();\n        const lowerUrl = trimmedUrl.toLowerCase();\n        \n        // Block dangerous protocols\n        const dangerousProtocols = ['javascript:', 'vbscript:', 'data:'];\n        \n        for (const protocol of dangerousProtocols) {\n            if (lowerUrl.startsWith(protocol)) {\n                // Exception: Allow data:image/* for images\n                if (protocol === 'data:' && lowerUrl.startsWith('data:image/')) {\n                    return trimmedUrl;\n                }\n                // Return safe empty link for dangerous protocols\n                return '#';\n            }\n        }\n        \n        return trimmedUrl;\n    }\n\n    // Process the markdown in phases\n    let html = markdown;\n    \n    // Phase 1: Extract and protect code blocks and inline code\n    const codeBlocks = [];\n    const inlineCodes = [];\n    \n    // Extract fenced code blocks first (supports both ``` and ~~~)\n    // Match paired fences - ``` with ``` and ~~~ with ~~~\n    // Fence must be at start of line\n    html = html.replace(/^(```|~~~)([^\\n]*)\\n([\\s\\S]*?)^\\1$/gm, (match, fence, lang, code) => {\n        const placeholder = `${PLACEHOLDER_CB}${codeBlocks.length}§`;\n        \n        // Trim the language specification\n        const langTrimmed = lang ? lang.trim() : '';\n        \n        // If custom fence plugin is provided, use it\n        if (fence_plugin && typeof fence_plugin === 'function') {\n            codeBlocks.push({\n                lang: langTrimmed,\n                code: code.trimEnd(),\n                custom: true,\n                fence: fence\n            });\n        } else {\n            codeBlocks.push({\n                lang: langTrimmed,\n                code: escapeHtml(code.trimEnd()),\n                custom: false,\n                fence: fence\n            });\n        }\n        return placeholder;\n    });\n    \n    // Extract inline code\n    html = html.replace(/`([^`]+)`/g, (match, code) => {\n        const placeholder = `${PLACEHOLDER_IC}${inlineCodes.length}§`;\n        inlineCodes.push(escapeHtml(code));\n        return placeholder;\n    });\n    \n    // Now escape HTML in the rest of the content\n    html = escapeHtml(html);\n    \n    // Phase 2: Process block elements\n    \n    // Process tables\n    html = processTable(html, getAttr);\n    \n    // Process headings (supports optional trailing #'s)\n    html = html.replace(/^(#{1,6})\\s+(.+?)\\s*#*$/gm, (match, hashes, content) => {\n        const level = hashes.length;\n        return `<h${level}${getAttr('h' + level)}${dataQd(hashes)}>${content}</h${level}>`;\n    });\n    \n    // Process blockquotes (must handle escaped > since we already escaped HTML)\n    html = html.replace(/^&gt;\\s+(.+)$/gm, `<blockquote${getAttr('blockquote')}>$1</blockquote>`);\n    // Merge consecutive blockquotes\n    html = html.replace(/<\\/blockquote>\\n<blockquote>/g, '\\n');\n    \n    // Process horizontal rules (allow trailing spaces)\n    html = html.replace(/^---+\\s*$/gm, `<hr${getAttr('hr')}>`);\n    \n    // Process lists\n    html = processLists(html, getAttr, inline_styles, bidirectional);\n    \n    // Phase 3: Process inline elements\n    \n    // Images (must come before links, with URL sanitization)\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, (match, alt, src) => {\n        const sanitizedSrc = sanitizeUrl(src, options.allow_unsafe_urls);\n        const altAttr = bidirectional && alt ? ` data-qd-alt=\"${escapeHtml(alt)}\"` : '';\n        const srcAttr = bidirectional ? ` data-qd-src=\"${escapeHtml(src)}\"` : '';\n        return `<img${getAttr('img')} src=\"${sanitizedSrc}\" alt=\"${alt}\"${altAttr}${srcAttr}${dataQd('!')}>`;\n    });\n    \n    // Links (with URL sanitization)\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, (match, text, href) => {\n        // Sanitize URL to prevent XSS\n        const sanitizedHref = sanitizeUrl(href, options.allow_unsafe_urls);\n        const isExternal = /^https?:\\/\\//i.test(sanitizedHref);\n        const rel = isExternal ? ' rel=\"noopener noreferrer\"' : '';\n        const textAttr = bidirectional ? ` data-qd-text=\"${escapeHtml(text)}\"` : '';\n        return `<a${getAttr('a')} href=\"${sanitizedHref}\"${rel}${textAttr}${dataQd('[')}>${text}</a>`;\n    });\n    \n    // Autolinks - convert bare URLs to clickable links\n    html = html.replace(/(^|\\s)(https?:\\/\\/[^\\s<]+)/g, (match, prefix, url) => {\n        const sanitizedUrl = sanitizeUrl(url, options.allow_unsafe_urls);\n        return `${prefix}<a${getAttr('a')} href=\"${sanitizedUrl}\" rel=\"noopener noreferrer\">${url}</a>`;\n    });\n    \n    // Process inline formatting (bold, italic, strikethrough)\n    const inlinePatterns = [\n        [/\\*\\*(.+?)\\*\\*/g, 'strong', '**'],\n        [/__(.+?)__/g, 'strong', '__'],\n        [/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, 'em', '*'],\n        [/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, 'em', '_'],\n        [/~~(.+?)~~/g, 'del', '~~']\n    ];\n    \n    inlinePatterns.forEach(([pattern, tag, marker]) => {\n        html = html.replace(pattern, `<${tag}${getAttr(tag)}${dataQd(marker)}>$1</${tag}>`);\n    });\n    \n    // Line breaks\n    if (lazy_linefeeds) {\n        // Lazy linefeeds: single newline becomes <br> (except between paragraphs and after/before block elements)\n        const blocks = [];\n        let bi = 0;\n        \n        // Protect tables and lists  \n        html = html.replace(/<(table|[uo]l)[^>]*>[\\s\\S]*?<\\/\\1>/g, m => {\n            blocks[bi] = m;\n            return `§B${bi++}§`;\n        });\n        \n        // Handle paragraphs and block elements\n        html = html.replace(/\\n\\n+/g, '§P§')\n            // After block elements\n            .replace(/(<\\/(?:h[1-6]|blockquote|pre)>)\\n/g, '$1§N§')\n            .replace(/(<(?:h[1-6]|blockquote|pre|hr)[^>]*>)\\n/g, '$1§N§')\n            // Before block elements  \n            .replace(/\\n(<(?:h[1-6]|blockquote|pre|hr)[^>]*>)/g, '§N§$1')\n            .replace(/\\n(§B\\d+§)/g, '§N§$1')\n            .replace(/(§B\\d+§)\\n/g, '$1§N§')\n            // Convert remaining newlines\n            .replace(/\\n/g, `<br${getAttr('br')}>`)\n            // Restore\n            .replace(/§N§/g, '\\n')\n            .replace(/§P§/g, '</p><p>');\n        \n        // Restore protected blocks\n        blocks.forEach((b, i) => html = html.replace(`§B${i}§`, b));\n        \n        html = '<p>' + html + '</p>';\n    } else {\n        // Standard: two spaces at end of line for line breaks\n        html = html.replace(/  $/gm, `<br${getAttr('br')}>`);\n        \n        // Paragraphs (double newlines)\n        // Don't add </p> after block elements (they're not in paragraphs)\n        html = html.replace(/\\n\\n+/g, (match, offset) => {\n            // Check if we're after a block element closing tag\n            const before = html.substring(0, offset);\n            if (before.match(/<\\/(h[1-6]|blockquote|ul|ol|table|pre|hr)>$/)) {\n                return '<p>';  // Just open a new paragraph\n            }\n            return '</p><p>';  // Normal paragraph break\n        });\n        html = '<p>' + html + '</p>';\n    }\n    \n    // Clean up empty paragraphs and unwrap block elements\n    const cleanupPatterns = [\n        [/<p><\\/p>/g, ''],\n        [/<p>(<h[1-6][^>]*>)/g, '$1'],\n        [/(<\\/h[1-6]>)<\\/p>/g, '$1'],\n        [/<p>(<blockquote[^>]*>)/g, '$1'],\n        [/(<\\/blockquote>)<\\/p>/g, '$1'],\n        [/<p>(<ul[^>]*>|<ol[^>]*>)/g, '$1'],\n        [/(<\\/ul>|<\\/ol>)<\\/p>/g, '$1'],\n        [/<p>(<hr[^>]*>)<\\/p>/g, '$1'],\n        [/<p>(<table[^>]*>)/g, '$1'],\n        [/(<\\/table>)<\\/p>/g, '$1'],\n        [/<p>(<pre[^>]*>)/g, '$1'],\n        [/(<\\/pre>)<\\/p>/g, '$1'],\n        [new RegExp(`<p>(${PLACEHOLDER_CB}\\\\d+§)<\\/p>`, 'g'), '$1']\n    ];\n    \n    cleanupPatterns.forEach(([pattern, replacement]) => {\n        html = html.replace(pattern, replacement);\n    });\n    \n    // Fix orphaned closing </p> tags after block elements\n    // When a paragraph follows a block element, ensure it has opening <p>\n    html = html.replace(/(<\\/(?:h[1-6]|blockquote|ul|ol|table|pre|hr)>)\\n([^<])/g, '$1\\n<p>$2');\n    \n    // Phase 4: Restore code blocks and inline code\n    \n    // Restore code blocks\n    codeBlocks.forEach((block, i) => {\n        let replacement;\n        \n        if (block.custom && fence_plugin) {\n            // Use custom fence plugin\n            replacement = fence_plugin(block.code, block.lang);\n            // If plugin returns undefined, fall back to default rendering\n            if (replacement === undefined) {\n                const langClass = !inline_styles && block.lang ? ` class=\"language-${block.lang}\"` : '';\n                const codeAttr = inline_styles ? getAttr('code') : langClass;\n                const langAttr = bidirectional && block.lang ? ` data-qd-lang=\"${escapeHtml(block.lang)}\"` : '';\n                const fenceAttr = bidirectional ? ` data-qd-fence=\"${escapeHtml(block.fence)}\"` : '';\n                replacement = `<pre${getAttr('pre')}${fenceAttr}${langAttr}><code${codeAttr}>${escapeHtml(block.code)}</code></pre>`;\n            }\n        } else {\n            // Default rendering\n            const langClass = !inline_styles && block.lang ? ` class=\"language-${block.lang}\"` : '';\n            const codeAttr = inline_styles ? getAttr('code') : langClass;\n            const langAttr = bidirectional && block.lang ? ` data-qd-lang=\"${escapeHtml(block.lang)}\"` : '';\n            const fenceAttr = bidirectional ? ` data-qd-fence=\"${escapeHtml(block.fence)}\"` : '';\n            replacement = `<pre${getAttr('pre')}${fenceAttr}${langAttr}><code${codeAttr}>${block.code}</code></pre>`;\n        }\n        \n        const placeholder = `${PLACEHOLDER_CB}${i}§`;\n        html = html.replace(placeholder, replacement);\n    });\n    \n    // Restore inline code\n    inlineCodes.forEach((code, i) => {\n        const placeholder = `${PLACEHOLDER_IC}${i}§`;\n        html = html.replace(placeholder, `<code${getAttr('code')}${dataQd('`')}>${code}</code>`);\n    });\n    \n    return html.trim();\n}\n\n/**\n * Process inline markdown formatting\n */\nfunction processInlineMarkdown(text, getAttr) {\n    \n    // Process inline formatting patterns\n    const patterns = [\n        [/\\*\\*(.+?)\\*\\*/g, 'strong'],\n        [/__(.+?)__/g, 'strong'],\n        [/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, 'em'],\n        [/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, 'em'],\n        [/~~(.+?)~~/g, 'del'],\n        [/`([^`]+)`/g, 'code']\n    ];\n    \n    patterns.forEach(([pattern, tag]) => {\n        text = text.replace(pattern, `<${tag}${getAttr(tag)}>$1</${tag}>`);\n    });\n    \n    return text;\n}\n\n/**\n * Process markdown tables\n */\nfunction processTable(text, getAttr) {\n    const lines = text.split('\\n');\n    const result = [];\n    let inTable = false;\n    let tableLines = [];\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        \n        // Check if this line looks like a table row (with or without trailing |)\n        if (line.includes('|') && (line.startsWith('|') || /[^\\\\|]/.test(line))) {\n            if (!inTable) {\n                inTable = true;\n                tableLines = [];\n            }\n            tableLines.push(line);\n        } else {\n            // Not a table line\n            if (inTable) {\n                // Process the accumulated table\n                const tableHtml = buildTable(tableLines, getAttr);\n                if (tableHtml) {\n                    result.push(tableHtml);\n                } else {\n                    // Not a valid table, restore original lines\n                    result.push(...tableLines);\n                }\n                inTable = false;\n                tableLines = [];\n            }\n            result.push(lines[i]);\n        }\n    }\n    \n    // Handle table at end of text\n    if (inTable && tableLines.length > 0) {\n        const tableHtml = buildTable(tableLines, getAttr);\n        if (tableHtml) {\n            result.push(tableHtml);\n        } else {\n            result.push(...tableLines);\n        }\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Build an HTML table from markdown table lines\n */\nfunction buildTable(lines, getAttr) {\n    \n    if (lines.length < 2) return null;\n    \n    // Check for separator line (second line should be the separator)\n    let separatorIndex = -1;\n    for (let i = 1; i < lines.length; i++) {\n        // Support separator with or without leading/trailing pipes\n        if (/^\\|?[\\s\\-:|]+\\|?$/.test(lines[i]) && lines[i].includes('-')) {\n            separatorIndex = i;\n            break;\n        }\n    }\n    \n    if (separatorIndex === -1) return null;\n    \n    const headerLines = lines.slice(0, separatorIndex);\n    const bodyLines = lines.slice(separatorIndex + 1);\n    \n    // Parse alignment from separator\n    const separator = lines[separatorIndex];\n    // Handle pipes at start/end or not\n    const separatorCells = separator.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n    const alignments = separatorCells.map(cell => {\n        const trimmed = cell.trim();\n        if (trimmed.startsWith(':') && trimmed.endsWith(':')) return 'center';\n        if (trimmed.endsWith(':')) return 'right';\n        return 'left';\n    });\n    \n    let html = `<table${getAttr('table')}>\\n`;\n    \n    // Build header\n    // Note: headerLines will always have length > 0 since separatorIndex starts from 1\n    html += `<thead${getAttr('thead')}>\\n`;\n    headerLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            // Handle pipes at start/end or not\n            const cells = line.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align:${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), getAttr);\n                html += `<th${getAttr('th', alignStyle)}>${processedCell}</th>\\n`;\n            });\n            html += '</tr>\\n';\n    });\n    html += '</thead>\\n';\n    \n    // Build body\n    if (bodyLines.length > 0) {\n        html += `<tbody${getAttr('tbody')}>\\n`;\n        bodyLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            // Handle pipes at start/end or not\n            const cells = line.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align:${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), getAttr);\n                html += `<td${getAttr('td', alignStyle)}>${processedCell}</td>\\n`;\n            });\n            html += '</tr>\\n';\n        });\n        html += '</tbody>\\n';\n    }\n    \n    html += '</table>';\n    return html;\n}\n\n/**\n * Process markdown lists (ordered and unordered)\n */\nfunction processLists(text, getAttr, inline_styles, bidirectional) {\n    \n    const lines = text.split('\\n');\n    const result = [];\n    let listStack = []; // Track nested lists\n    \n    // Helper to escape HTML for data-qd attributes\n    const escapeHtml = (text) => text.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'})[m]);\n    const dataQd = bidirectional ? (marker) => ` data-qd=\"${escapeHtml(marker)}\"` : () => '';\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        const match = line.match(/^(\\s*)([*\\-+]|\\d+\\.)\\s+(.+)$/);\n        \n        if (match) {\n            const [, indent, marker, content] = match;\n            const level = Math.floor(indent.length / 2);\n            const isOrdered = /^\\d+\\./.test(marker);\n            const listType = isOrdered ? 'ol' : 'ul';\n            \n            // Check for task list items\n            let listItemContent = content;\n            let taskListClass = '';\n            const taskMatch = content.match(/^\\[([x ])\\]\\s+(.*)$/i);\n            if (taskMatch && !isOrdered) {\n                const [, checked, taskContent] = taskMatch;\n                const isChecked = checked.toLowerCase() === 'x';\n                const checkboxAttr = inline_styles \n                    ? ' style=\"margin-right:.5em\"' \n                    : ` class=\"${CLASS_PREFIX}task-checkbox\"`;\n                listItemContent = `<input type=\"checkbox\"${checkboxAttr}${isChecked ? ' checked' : ''} disabled> ${taskContent}`;\n                taskListClass = inline_styles ? ' style=\"list-style:none\"' : ` class=\"${CLASS_PREFIX}task-item\"`;\n            }\n            \n            // Close deeper levels\n            while (listStack.length > level + 1) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            \n            // Open new level if needed\n            if (listStack.length === level) {\n                // Need to open a new list\n                listStack.push({ type: listType, level });\n                result.push(`<${listType}${getAttr(listType)}>`);\n            } else if (listStack.length === level + 1) {\n                // Check if we need to switch list type\n                const currentList = listStack[listStack.length - 1];\n                if (currentList.type !== listType) {\n                    result.push(`</${currentList.type}>`);\n                    listStack.pop();\n                    listStack.push({ type: listType, level });\n                    result.push(`<${listType}${getAttr(listType)}>`);\n                }\n            }\n            \n            const liAttr = taskListClass || getAttr('li');\n            result.push(`<li${liAttr}${dataQd(marker)}>${listItemContent}</li>`);\n        } else {\n            // Not a list item, close all lists\n            while (listStack.length > 0) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            result.push(line);\n        }\n    }\n    \n    // Close any remaining lists\n    while (listStack.length > 0) {\n        const list = listStack.pop();\n        result.push(`</${list.type}>`);\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Emit CSS styles for quikdown elements\n * @param {string} prefix - Optional class prefix (default: 'quikdown-')\n * @param {string} theme - Optional theme: 'light' (default) or 'dark'\n * @returns {string} CSS string with quikdown styles\n */\nquikdown.emitStyles = function(prefix = 'quikdown-', theme = 'light') {\n    const styles = QUIKDOWN_STYLES;\n    \n    // Define theme color overrides\n    const themeOverrides = {\n        dark: {\n            '#f4f4f4': '#2a2a2a', // pre background\n            '#f0f0f0': '#2a2a2a', // code background\n            '#f2f2f2': '#2a2a2a', // th background\n            '#ddd': '#3a3a3a',    // borders\n            '#06c': '#6db3f2',    // links\n            _textColor: '#e0e0e0'\n        },\n        light: {\n            _textColor: '#333'    // Explicit text color for light theme\n        }\n    };\n    \n    let css = '';\n    for (const [tag, style] of Object.entries(styles)) {\n        let themedStyle = style;\n            \n            // Apply theme overrides if dark theme\n            if (theme === 'dark' && themeOverrides.dark) {\n                // Replace colors\n                for (const [oldColor, newColor] of Object.entries(themeOverrides.dark)) {\n                    if (!oldColor.startsWith('_')) {\n                        themedStyle = themedStyle.replace(new RegExp(oldColor, 'g'), newColor);\n                    }\n                }\n                \n                // Add text color for certain elements in dark theme\n                const needsTextColor = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'td', 'li', 'blockquote'];\n                if (needsTextColor.includes(tag)) {\n                    themedStyle += `;color:${themeOverrides.dark._textColor}`;\n                }\n            } else if (theme === 'light' && themeOverrides.light) {\n                // Add explicit text color for light theme elements too\n                const needsTextColor = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'td', 'li', 'blockquote'];\n                if (needsTextColor.includes(tag)) {\n                    themedStyle += `;color:${themeOverrides.light._textColor}`;\n                }\n            }\n        \n        css += `.${prefix}${tag} { ${themedStyle} }\\n`;\n    }\n    \n    return css;\n};\n\n/**\n * Configure quikdown with options and return a function\n * @param {Object} options - Configuration options\n * @returns {Function} Configured quikdown function\n */\nquikdown.configure = function(options) {\n    return function(markdown) {\n        return quikdown(markdown, options);\n    };\n};\n\n/**\n * Version information\n */\nquikdown.version = quikdownVersion;\n\n// Export for both CommonJS and ES6\n/* istanbul ignore next */\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = quikdown;\n}\n\n// For browser global\n/* istanbul ignore next */\nif (typeof window !== 'undefined') {\n    window.quikdown = quikdown;\n}\n\nexport default quikdown;","/**\n * quikdown_bd - Bidirectional markdown/HTML converter\n * Extends core quikdown with HTML→Markdown conversion\n * \n * Uses data-qd attributes to preserve original markdown syntax\n * Enables HTML→Markdown conversion for quikdown-generated HTML\n */\n\nimport quikdown from './quikdown.js';\n\n/**\n * Create bidirectional version by extending quikdown\n * This wraps quikdown and adds the toMarkdown method\n */\nfunction quikdown_bd(markdown, options = {}) {\n    // Use core quikdown with bidirectional flag to add data-qd attributes\n    return quikdown(markdown, { ...options, bidirectional: true });\n}\n\n// Copy all properties and methods from quikdown (including version)\nObject.keys(quikdown).forEach(key => {\n    quikdown_bd[key] = quikdown[key];\n});\n\n// Add the toMarkdown method for HTML→Markdown conversion\nquikdown_bd.toMarkdown = function(htmlOrElement) {\n    // Accept either HTML string or DOM element\n    let container;\n    if (typeof htmlOrElement === 'string') {\n        container = document.createElement('div');\n        container.innerHTML = htmlOrElement;\n    } else if (htmlOrElement instanceof Element) {\n        /* istanbul ignore next - browser-only code path, not testable in jsdom */\n        container = htmlOrElement;\n    } else {\n        return '';\n    }\n    \n    // Walk the DOM tree and reconstruct markdown\n    function walkNode(node, parentContext = {}) {\n        if (node.nodeType === Node.TEXT_NODE) {\n            // Return text content, preserving whitespace where needed\n            return node.textContent;\n        }\n        \n        if (node.nodeType !== Node.ELEMENT_NODE) {\n            return '';\n        }\n        \n        const tag = node.tagName.toLowerCase();\n        const dataQd = node.getAttribute('data-qd');\n        \n        // Process children with context\n        let childContent = '';\n        for (let child of node.childNodes) {\n            childContent += walkNode(child, { parentTag: tag, ...parentContext });\n        }\n        \n        // Determine markdown based on element and attributes\n        switch (tag) {\n            case 'h1':\n            case 'h2':\n            case 'h3':\n            case 'h4':\n            case 'h5':\n            case 'h6':\n                const level = parseInt(tag[1]);\n                const prefix = dataQd || '#'.repeat(level);\n                return `${prefix} ${childContent.trim()}\\n\\n`;\n                \n            case 'strong':\n            case 'b':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const boldMarker = dataQd || '**';\n                return `${boldMarker}${childContent}${boldMarker}`;\n                \n            case 'em':\n            case 'i':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const emMarker = dataQd || '*';\n                return `${emMarker}${childContent}${emMarker}`;\n                \n            case 'del':\n            case 's':\n            case 'strike':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const delMarker = dataQd || '~~';\n                return `${delMarker}${childContent}${delMarker}`;\n                \n            case 'code':\n                // Note: code inside pre is handled directly by the pre case using querySelector\n                if (!childContent) return ''; // Don't add markers for empty content\n                const codeMarker = dataQd || '`';\n                return `${codeMarker}${childContent}${codeMarker}`;\n                \n            case 'pre':\n                const fence = node.getAttribute('data-qd-fence') || dataQd || '```';\n                const lang = node.getAttribute('data-qd-lang') || '';\n                // Look for code element child\n                const codeEl = node.querySelector('code');\n                const codeContent = codeEl ? codeEl.textContent : childContent;\n                return `${fence}${lang}\\n${codeContent.trimEnd()}\\n${fence}\\n\\n`;\n                \n            case 'blockquote':\n                const quoteMarker = dataQd || '>';\n                const lines = childContent.trim().split('\\n');\n                return lines.map(line => `${quoteMarker} ${line}`).join('\\n') + '\\n\\n';\n                \n            case 'hr':\n                const hrMarker = dataQd || '---';\n                return `${hrMarker}\\n\\n`;\n                \n            case 'br':\n                const brMarker = dataQd || '  ';\n                return `${brMarker}\\n`;\n                \n            case 'a':\n                const linkText = node.getAttribute('data-qd-text') || childContent.trim();\n                const href = node.getAttribute('href') || '';\n                // Check for autolinks\n                if (linkText === href && !dataQd) {\n                    return `<${href}>`;\n                }\n                return `[${linkText}](${href})`;\n                \n            case 'img':\n                const alt = node.getAttribute('data-qd-alt') || node.getAttribute('alt') || '';\n                const src = node.getAttribute('data-qd-src') || node.getAttribute('src') || '';\n                const imgMarker = dataQd || '!';\n                return `${imgMarker}[${alt}](${src})`;\n                \n            case 'ul':\n            case 'ol':\n                return walkList(node, tag === 'ol') + '\\n';\n                \n            case 'li':\n                // Handled by list processor\n                return childContent;\n                \n            case 'table':\n                return walkTable(node) + '\\n\\n';\n                \n            case 'p':\n                // Check if it's actually a paragraph or just a wrapper\n                if (childContent.trim()) {\n                    // Check if paragraph ends with a line that's just whitespace\n                    // This indicates an intentional blank line before the next element\n                    const lines = childContent.split('\\n');\n                    let content = childContent.trim();\n                    \n                    // If the last line(s) are just whitespace, preserve one blank line\n                    if (lines.length > 1) {\n                        let trailingBlankLines = 0;\n                        for (let i = lines.length - 1; i >= 0; i--) {\n                            if (lines[i].trim() === '') {\n                                trailingBlankLines++;\n                            } else {\n                                break;\n                            }\n                        }\n                        if (trailingBlankLines > 0) {\n                            // Add a line with just a space, followed by single newline\n                            // The \\n\\n will be added below for paragraph separation\n                            content = content + '\\n ';\n                            // Only add one newline since we're preserving the space line\n                            return content + '\\n';\n                        }\n                    }\n                    \n                    return content + '\\n\\n';\n                }\n                return '';\n                \n            case 'div':\n                // Check if it's a mermaid container\n                if (node.classList && node.classList.contains('mermaid-container')) {\n                    const fence = node.getAttribute('data-qd-fence') || '```';\n                    const lang = node.getAttribute('data-qd-lang') || 'mermaid';\n                    \n                    // First check for data-qd-source attribute on the container\n                    const source = node.getAttribute('data-qd-source');\n                    if (source) {\n                        // Decode HTML entities from the attribute (mainly &quot;)\n                        const temp = document.createElement('textarea');\n                        temp.innerHTML = source;\n                        const code = temp.value;\n                        return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                    }\n                    \n                    // Check for source on the pre.mermaid element\n                    const mermaidPre = node.querySelector('pre.mermaid');\n                    if (mermaidPre) {\n                        const preSource = mermaidPre.getAttribute('data-qd-source');\n                        if (preSource) {\n                            const temp = document.createElement('textarea');\n                            temp.innerHTML = preSource;\n                            const code = temp.value;\n                            return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                        }\n                    }\n                    \n                    // Fallback: Look for the legacy .mermaid-source element\n                    const sourceElement = node.querySelector('.mermaid-source');\n                    if (sourceElement) {\n                        // Decode HTML entities\n                        const temp = document.createElement('div');\n                        temp.innerHTML = sourceElement.innerHTML;\n                        const code = temp.textContent;\n                        return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                    }\n                    \n                    // Final fallback: try to extract from the mermaid element (unreliable after rendering)\n                    const mermaidElement = node.querySelector('.mermaid');\n                    if (mermaidElement && mermaidElement.textContent.includes('graph')) {\n                        return `${fence}${lang}\\n${mermaidElement.textContent.trim()}\\n${fence}\\n\\n`;\n                    }\n                }\n                // Check if it's a standalone mermaid diagram (legacy)\n                if (node.classList && node.classList.contains('mermaid')) {\n                    const fence = node.getAttribute('data-qd-fence') || '```';\n                    const lang = node.getAttribute('data-qd-lang') || 'mermaid';\n                    const code = node.textContent.trim();\n                    return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                }\n                // Pass through other divs\n                return childContent;\n            \n            case 'span':\n                // Pass through container elements\n                return childContent;\n                \n            default:\n                return childContent;\n        }\n    }\n    \n    // Walk list elements\n    function walkList(listNode, isOrdered, depth = 0) {\n        let result = '';\n        let index = 1;\n        const indent = '  '.repeat(depth);\n        \n        for (let child of listNode.children) {\n            if (child.tagName !== 'LI') continue;\n            \n            const dataQd = child.getAttribute('data-qd');\n            let marker = dataQd || (isOrdered ? `${index}.` : '-');\n            \n            // Check for task list checkbox\n            const checkbox = child.querySelector('input[type=\"checkbox\"]');\n            if (checkbox) {\n                const checked = checkbox.checked ? 'x' : ' ';\n                marker = '-';\n                // Get text without the checkbox\n                let text = '';\n                for (let node of child.childNodes) {\n                    if (node.nodeType === Node.TEXT_NODE) {\n                        text += node.textContent;\n                    } else if (node.tagName && node.tagName !== 'INPUT') {\n                        text += walkNode(node);\n                    }\n                }\n                result += `${indent}${marker} [${checked}] ${text.trim()}\\n`;\n            } else {\n                let itemContent = '';\n                \n                for (let node of child.childNodes) {\n                    if (node.tagName === 'UL' || node.tagName === 'OL') {\n                        itemContent += walkList(node, node.tagName === 'OL', depth + 1);\n                    } else {\n                        itemContent += walkNode(node);\n                    }\n                }\n                \n                result += `${indent}${marker} ${itemContent.trim()}\\n`;\n            }\n            \n            index++;\n        }\n        \n        return result;\n    }\n    \n    // Walk table elements\n    function walkTable(table) {\n        let result = '';\n        const alignData = table.getAttribute('data-qd-align');\n        const alignments = alignData ? alignData.split(',') : [];\n        \n        // Process header\n        const thead = table.querySelector('thead');\n        if (thead) {\n            const headerRow = thead.querySelector('tr');\n            if (headerRow) {\n                const headers = [];\n                for (let th of headerRow.querySelectorAll('th')) {\n                    headers.push(th.textContent.trim());\n                }\n                result += '| ' + headers.join(' | ') + ' |\\n';\n                \n                // Add separator with alignment\n                const separators = headers.map((_, i) => {\n                    const align = alignments[i] || 'left';\n                    if (align === 'center') return ':---:';\n                    if (align === 'right') return '---:';\n                    return '---';\n                });\n                result += '| ' + separators.join(' | ') + ' |\\n';\n            }\n        }\n        \n        // Process body\n        const tbody = table.querySelector('tbody');\n        if (tbody) {\n            for (let row of tbody.querySelectorAll('tr')) {\n                const cells = [];\n                for (let td of row.querySelectorAll('td')) {\n                    cells.push(td.textContent.trim());\n                }\n                if (cells.length > 0) {\n                    result += '| ' + cells.join(' | ') + ' |\\n';\n                }\n            }\n        }\n        \n        return result.trim();\n    }\n    \n    // Process the DOM tree\n    let markdown = walkNode(container);\n    \n    // Clean up\n    markdown = markdown.replace(/\\n{3,}/g, '\\n\\n'); // Remove excessive newlines\n    markdown = markdown.trim();\n    \n    return markdown;\n};\n\n// Override the configure method to return a bidirectional version\nquikdown_bd.configure = function(options) {\n    return function(markdown) {\n        return quikdown_bd(markdown, options);\n    };\n};\n\n// Set version\n// Version is already copied from quikdown via Object.keys loop\n\n// Export for both module and browser\n/* istanbul ignore next */\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = quikdown_bd;\n}\n\n/* istanbul ignore next */\nif (typeof window !== 'undefined') {\n    window.quikdown_bd = quikdown_bd;\n}\n\nexport default quikdown_bd;","/**\n * Quikdown Editor - A drop-in markdown editor control\n * @version 1.0.5\n * @license BSD-2-Clause\n */\n\nimport quikdown_bd from './quikdown_bd.js';\n\n// Default options\nconst DEFAULT_OPTIONS = {\n    mode: 'split',          // 'source' | 'preview' | 'split'\n    showToolbar: true,\n    showRemoveHR: false,    // Show button to remove horizontal rules (---) \n    theme: 'auto',          // 'light' | 'dark' | 'auto'\n    lazy_linefeeds: false,\n    inline_styles: false,   // Use CSS classes (false) or inline styles (true)\n    debounceDelay: 20,      // Reduced from 100ms for better responsiveness\n    placeholder: 'Start typing markdown...',\n    plugins: {\n        highlightjs: false,\n        mermaid: false\n    },\n    customFences: {}, // { 'language': (code, lang) => html }\n    enableComplexFences: true // Enable CSV tables, math rendering, SVG, etc.\n};\n\n/**\n * Quikdown Editor - A complete markdown editing solution\n */\nclass QuikdownEditor {\n    constructor(container, options = {}) {\n        // Resolve container\n        this.container = typeof container === 'string' \n            ? document.querySelector(container) \n            : container;\n            \n        if (!this.container) {\n            throw new Error('QuikdownEditor: Invalid container');\n        }\n        \n        // Merge options\n        this.options = { ...DEFAULT_OPTIONS, ...options };\n        \n        // State\n        this._markdown = '';\n        this._html = '';\n        this.currentMode = this.options.mode;\n        this.updateTimer = null;\n        \n        // Initialize\n        this.initPromise = this.init();\n    }\n    \n    /**\n     * Initialize the editor\n     */\n    async init() {\n        // Load plugins if requested\n        await this.loadPlugins();\n        \n        // Build UI\n        this.buildUI();\n        \n        // Attach event listeners\n        this.attachEvents();\n        \n        // Apply initial theme\n        this.applyTheme();\n        \n        // Set initial mode\n        this.setMode(this.currentMode);\n        \n        // Set initial content if provided\n        if (this.options.initialContent) {\n            this.setMarkdown(this.options.initialContent);\n        }\n    }\n    \n    /**\n     * Build the editor UI\n     */\n    buildUI() {\n        // Clear container\n        this.container.innerHTML = '';\n        \n        // Add editor class\n        this.container.classList.add('qde-container');\n        \n        // Create toolbar if enabled\n        if (this.options.showToolbar) {\n            this.toolbar = this.createToolbar();\n            this.container.appendChild(this.toolbar);\n        }\n        \n        // Create editor area\n        this.editorArea = document.createElement('div');\n        this.editorArea.className = 'qde-editor';\n        \n        // Create source panel\n        this.sourcePanel = document.createElement('div');\n        this.sourcePanel.className = 'qde-source';\n        \n        this.sourceTextarea = document.createElement('textarea');\n        this.sourceTextarea.className = 'qde-textarea';\n        this.sourceTextarea.placeholder = this.options.placeholder;\n        this.sourcePanel.appendChild(this.sourceTextarea);\n        \n        // Create preview panel\n        this.previewPanel = document.createElement('div');\n        this.previewPanel.className = 'qde-preview';\n        this.previewPanel.contentEditable = true;\n        \n        // Add panels to editor\n        this.editorArea.appendChild(this.sourcePanel);\n        this.editorArea.appendChild(this.previewPanel);\n        this.container.appendChild(this.editorArea);\n        \n        // Add built-in styles if not already present\n        this.injectStyles();\n    }\n    \n    /**\n     * Create toolbar\n     */\n    createToolbar() {\n        const toolbar = document.createElement('div');\n        toolbar.className = 'qde-toolbar';\n        \n        // Mode buttons\n        const modes = ['source', 'split', 'preview'];\n        const modeLabels = { source: 'Source', split: 'Split', preview: 'Rendered' };\n        modes.forEach(mode => {\n            const btn = document.createElement('button');\n            btn.className = 'qde-btn';\n            btn.dataset.mode = mode;\n            btn.textContent = modeLabels[mode];\n            btn.title = `Switch to ${modeLabels[mode]} view`;\n            toolbar.appendChild(btn);\n        });\n        \n        // Spacer\n        const spacer = document.createElement('span');\n        spacer.className = 'qde-spacer';\n        toolbar.appendChild(spacer);\n        \n        // Copy buttons\n        const copyButtons = [\n            { action: 'copy-markdown', text: 'Copy MD', title: 'Copy markdown to clipboard' },\n            { action: 'copy-html', text: 'Copy HTML', title: 'Copy HTML to clipboard' }\n        ];\n        \n        copyButtons.forEach(({ action, text, title }) => {\n            const btn = document.createElement('button');\n            btn.className = 'qde-btn';\n            btn.dataset.action = action;\n            btn.textContent = text;\n            btn.title = title;\n            toolbar.appendChild(btn);\n        });\n        \n        // Remove HR button (if enabled)\n        if (this.options.showRemoveHR) {\n            const removeHRBtn = document.createElement('button');\n            removeHRBtn.className = 'qde-btn';\n            removeHRBtn.dataset.action = 'remove-hr';\n            removeHRBtn.textContent = 'Remove HR';\n            removeHRBtn.title = 'Remove all horizontal rules (---) from markdown';\n            toolbar.appendChild(removeHRBtn);\n        }\n        \n        return toolbar;\n    }\n    \n    /**\n     * Inject built-in styles\n     */\n    injectStyles() {\n        if (document.getElementById('qde-styles')) return;\n        \n        const style = document.createElement('style');\n        style.id = 'qde-styles';\n        style.textContent = `\n            .qde-container {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                border: 1px solid #ddd;\n                border-radius: 4px;\n                overflow: hidden;\n                background: white;\n            }\n            \n            .qde-toolbar {\n                display: flex;\n                align-items: center;\n                padding: 8px;\n                background: #f5f5f5;\n                border-bottom: 1px solid #ddd;\n                gap: 4px;\n            }\n            \n            .qde-btn {\n                padding: 6px 12px;\n                border: 1px solid #ccc;\n                background: white;\n                border-radius: 3px;\n                cursor: pointer;\n                font-size: 14px;\n                transition: all 0.2s;\n            }\n            \n            .qde-btn:hover {\n                background: #e9e9e9;\n                border-color: #999;\n            }\n            \n            .qde-btn.active {\n                background: #007bff;\n                color: white;\n                border-color: #0056b3;\n            }\n            \n            .qde-spacer {\n                flex: 1;\n            }\n            \n            .qde-editor {\n                display: flex;\n                flex: 1;\n                overflow: hidden;\n            }\n            \n            .qde-source, .qde-preview {\n                flex: 1;\n                overflow: auto;\n                padding: 16px;\n            }\n            \n            .qde-source {\n                border-right: 1px solid #ddd;\n            }\n            \n            .qde-textarea {\n                width: 100%;\n                height: 100%;\n                border: none;\n                outline: none;\n                resize: none;\n                font-family: 'Monaco', 'Courier New', monospace;\n                font-size: 14px;\n                line-height: 1.5;\n            }\n            \n            .qde-preview {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                font-size: 16px;\n                line-height: 1.6;\n                outline: none;\n                cursor: text;  /* Standard text cursor */\n            }\n            \n            /* Fence-specific styles */\n            .qde-svg-container {\n                max-width: 100%;\n                overflow: auto;\n            }\n            \n            .qde-svg-container svg {\n                max-width: 100%;\n                height: auto;\n            }\n            \n            .qde-html-container {\n                /* HTML containers inherit background */\n                margin: 12px 0;\n            }\n            \n            .qde-math-container {\n                text-align: center;\n                margin: 16px 0;\n                overflow-x: auto;\n            }\n            \n            /* All tables in preview (both regular markdown and CSV) */\n            .qde-preview table {\n                width: 100%;\n                border-collapse: collapse;\n                margin: 12px 0;\n                font-size: 14px;\n            }\n            \n            .qde-preview table th,\n            .qde-preview table td {\n                border: 1px solid #ddd;\n                padding: 8px;\n            }\n            \n            /* Support for alignment classes from quikdown */\n            .qde-preview .quikdown-left { text-align: left; }\n            .qde-preview .quikdown-center { text-align: center; }\n            .qde-preview .quikdown-right { text-align: right; }\n            \n            .qde-preview table th {\n                background: #f5f5f5;\n                font-weight: bold;\n            }\n            \n            .qde-preview table tr:nth-child(even) {\n                background: #f9f9f9;\n            }\n            \n            /* Specific to CSV-generated tables */\n            .qde-data-table {\n                /* Can add specific CSV table styles here if needed */\n            }\n            \n            .qde-json {\n                /* Let highlight.js handle styling */\n                overflow-x: auto;\n            }\n            \n            .qde-error {\n                background: #fee;\n                border: 1px solid #fcc;\n                color: #c00;\n                padding: 8px;\n                border-radius: 4px;\n                font-family: monospace;\n                font-size: 12px;\n            }\n            \n            /* Read-only complex fence blocks in preview */\n            .qde-preview [contenteditable=\"false\"] {\n                cursor: auto;  /* Use automatic cursor (arrow for non-text) */\n                user-select: text;\n                position: relative;\n            }\n            \n            /* Ensure proper cursor for editable text elements */\n            .qde-preview p,\n            .qde-preview h1,\n            .qde-preview h2,\n            .qde-preview h3,\n            .qde-preview h4,\n            .qde-preview h5,\n            .qde-preview h6,\n            .qde-preview li,\n            .qde-preview td,\n            .qde-preview th,\n            .qde-preview blockquote,\n            .qde-preview pre[contenteditable=\"true\"],\n            .qde-preview code[contenteditable=\"true\"] {\n                cursor: text;\n            }\n            \n            \n            /* Non-editable complex renderers */\n            .qde-preview .qde-svg-container[contenteditable=\"false\"],\n            .qde-preview .qde-html-container[contenteditable=\"false\"],\n            .qde-preview .qde-math-container[contenteditable=\"false\"],\n            .qde-preview .mermaid[contenteditable=\"false\"] {\n                opacity: 0.98;\n            }\n            \n            /* Subtle hover effect for read-only blocks */\n            .qde-preview [contenteditable=\"false\"]:hover::after {\n                content: \"Read-only\";\n                position: absolute;\n                top: 2px;\n                right: 2px;\n                font-size: 10px;\n                color: #999;\n                background: rgba(255, 255, 255, 0.9);\n                padding: 2px 4px;\n                border-radius: 2px;\n                pointer-events: none;\n            }\n            \n            /* Fix list padding in preview */\n            .qde-preview ul,\n            .qde-preview ol {\n                padding-left: 2em;\n                margin: 0.5em 0;\n            }\n            \n            .qde-preview li {\n                margin: 0.25em 0;\n            }\n            \n            /* Mode-specific visibility */\n            .qde-mode-source .qde-preview { display: none; }\n            .qde-mode-source .qde-source { border-right: none; }\n            .qde-mode-preview .qde-source { display: none; }\n            .qde-mode-split .qde-source,\n            .qde-mode-split .qde-preview { display: block; }\n            \n            /* Dark theme */\n            .qde-dark {\n                background: #1e1e1e;\n                color: #e0e0e0;\n            }\n            \n            .qde-dark .qde-toolbar {\n                background: #2d2d2d;\n                border-color: #444;\n            }\n            \n            .qde-dark .qde-btn {\n                background: #3a3a3a;\n                color: #e0e0e0;\n                border-color: #555;\n            }\n            \n            .qde-dark .qde-btn:hover {\n                background: #4a4a4a;\n            }\n            \n            .qde-dark .qde-source {\n                border-color: #444;\n            }\n            \n            .qde-dark .qde-textarea {\n                background: #1e1e1e;\n                color: #e0e0e0;\n            }\n            \n            .qde-dark .qde-preview {\n                background: #1e1e1e;\n                color: #e0e0e0;\n            }\n            \n            /* Dark mode table styles */\n            .qde-dark .qde-preview table th,\n            .qde-dark .qde-preview table td {\n                border-color: #3a3a3a;\n            }\n            \n            .qde-dark .qde-preview table th {\n                background: #2d2d2d;\n            }\n            \n            .qde-dark .qde-preview table tr:nth-child(even) {\n                background: #252525;\n            }\n            \n            /* Mobile responsive */\n            @media (max-width: 768px) {\n                .qde-mode-split .qde-editor {\n                    flex-direction: column;\n                }\n                \n                .qde-mode-split .qde-source {\n                    border-right: none;\n                    border-bottom: 1px solid #ddd;\n                }\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Attach event listeners\n     */\n    attachEvents() {\n        // Source textarea input\n        this.sourceTextarea.addEventListener('input', () => {\n            this.handleSourceInput();\n        });\n        \n        // Preview contenteditable input\n        this.previewPanel.addEventListener('input', () => {\n            this.handlePreviewInput();\n        });\n        \n        // Toolbar buttons\n        if (this.toolbar) {\n            this.toolbar.addEventListener('click', (e) => {\n                const btn = e.target.closest('.qde-btn');\n                if (!btn) return;\n                \n                if (btn.dataset.mode) {\n                    this.setMode(btn.dataset.mode);\n                } else if (btn.dataset.action) {\n                    this.handleAction(btn.dataset.action);\n                }\n            });\n        }\n        \n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (e.ctrlKey || e.metaKey) {\n                switch(e.key) {\n                    case '1':\n                        e.preventDefault();\n                        this.setMode('source');\n                        break;\n                    case '2':\n                        e.preventDefault();\n                        this.setMode('split');\n                        break;\n                    case '3':\n                        e.preventDefault();\n                        this.setMode('preview');\n                        break;\n                }\n            }\n        });\n    }\n    \n    /**\n     * Handle source textarea input\n     */\n    handleSourceInput() {\n        clearTimeout(this.updateTimer);\n        this.updateTimer = setTimeout(() => {\n            this.updateFromMarkdown(this.sourceTextarea.value);\n        }, this.options.debounceDelay);\n    }\n    \n    /**\n     * Handle preview panel input\n     */\n    handlePreviewInput() {\n        clearTimeout(this.updateTimer);\n        this.updateTimer = setTimeout(() => {\n            this.updateFromHTML();\n        }, this.options.debounceDelay);\n    }\n    \n    /**\n     * Update from markdown source\n     */\n    updateFromMarkdown(markdown) {\n        this._markdown = markdown || '';\n        \n        // Show placeholder if empty\n        if (!this._markdown.trim()) {\n            this._html = '';\n            if (this.currentMode !== 'source') {\n                this.previewPanel.innerHTML = '<div style=\"color: #999; font-style: italic; padding: 16px;\">Start typing markdown in the source panel...</div>';\n            }\n        } else {\n            this._html = quikdown_bd(markdown, {\n                fence_plugin: this.createFencePlugin(),\n                lazy_linefeeds: this.options.lazy_linefeeds,\n                inline_styles: this.options.inline_styles\n            });\n            \n            // Update preview if visible\n            if (this.currentMode !== 'source') {\n                this.previewPanel.innerHTML = this._html;\n                // Make all fence blocks non-editable\n                this.makeFencesNonEditable();\n            }\n        }\n        \n        // Trigger change event\n        if (this.options.onChange) {\n            this.options.onChange(this._markdown, this._html);\n        }\n    }\n    \n    /**\n     * Update from HTML preview\n     */\n    updateFromHTML() {\n        // Clone the preview panel to avoid modifying the actual DOM\n        const clonedPanel = this.previewPanel.cloneNode(true);\n        \n        // Pre-process special elements on the clone\n        this.preprocessSpecialElements(clonedPanel);\n        \n        this._html = this.previewPanel.innerHTML;\n        this._markdown = quikdown_bd.toMarkdown(clonedPanel);\n        \n        // Update source if visible\n        if (this.currentMode !== 'preview') {\n            this.sourceTextarea.value = this._markdown;\n        }\n        \n        // Trigger change event\n        if (this.options.onChange) {\n            this.options.onChange(this._markdown, this._html);\n        }\n    }\n    \n    /**\n     * Pre-process special elements before markdown conversion\n     */\n    preprocessSpecialElements(panel) {\n        if (!panel) return;\n        \n        \n        // Restore non-editable complex fences from their data attributes\n        const complexFences = panel.querySelectorAll('[contenteditable=\"false\"][data-qd-source]');\n        complexFences.forEach(element => {\n            const source = element.getAttribute('data-qd-source');\n            const fence = element.getAttribute('data-qd-fence') || '```';\n            const lang = element.getAttribute('data-qd-lang') || '';\n            \n            // Create a pre element with the original source\n            const pre = document.createElement('pre');\n            pre.setAttribute('data-qd-fence', fence);\n            if (lang) pre.setAttribute('data-qd-lang', lang);\n            const code = document.createElement('code');\n            // The source is already the original unescaped content when using setAttribute\n            // No need to unescape since browser handles it automatically\n            code.textContent = source;\n            pre.appendChild(code);\n            \n            // Replace the complex element with pre\n            element.parentNode.replaceChild(pre, element);\n        });\n        \n        // Convert CSV tables back to CSV fence blocks (these ARE editable)\n        const csvTables = panel.querySelectorAll('table.qde-csv-table[data-qd-lang]');\n        csvTables.forEach(table => {\n            const lang = table.getAttribute('data-qd-lang');\n            if (!lang || !['csv', 'psv', 'tsv'].includes(lang)) return;\n            \n            const delimiter = lang === 'csv' ? ',' : lang === 'psv' ? '|' : '\\t';\n            \n            // Extract data from table\n            let csv = '';\n            \n            // Get headers\n            const headers = [];\n            const headerCells = table.querySelectorAll('thead th');\n            headerCells.forEach(th => {\n                const text = th.textContent.trim();\n                // Quote if contains delimiter or quotes\n                const needsQuoting = text.includes(delimiter) || text.includes('\"') || text.includes('\\n');\n                headers.push(needsQuoting ? `\"${text.replace(/\"/g, '\"\"')}\"` : text);\n            });\n            csv += headers.join(delimiter) + '\\n';\n            \n            // Get rows\n            const rows = table.querySelectorAll('tbody tr');\n            rows.forEach(tr => {\n                const cells = [];\n                tr.querySelectorAll('td').forEach(td => {\n                    const text = td.textContent.trim();\n                    const needsQuoting = text.includes(delimiter) || text.includes('\"') || text.includes('\\n');\n                    cells.push(needsQuoting ? `\"${text.replace(/\"/g, '\"\"')}\"` : text);\n                });\n                csv += cells.join(delimiter) + '\\n';\n            });\n            \n            // Create a pre element with the CSV data\n            const pre = document.createElement('pre');\n            pre.setAttribute('data-qd-fence', '```');\n            pre.setAttribute('data-qd-lang', lang);\n            const code = document.createElement('code');\n            code.textContent = csv.trim();\n            pre.appendChild(code);\n            \n            // Replace table with pre\n            table.parentNode.replaceChild(pre, table);\n        });\n    }\n    \n    /**\n     * Create fence plugin for syntax highlighting\n     */\n    createFencePlugin() {\n        return (code, lang) => {\n            // Check custom fences first (they take precedence)\n            if (this.options.customFences && this.options.customFences[lang]) {\n                try {\n                    return this.options.customFences[lang](code, lang);\n                } catch (err) {\n                    console.error(`Custom fence plugin error for ${lang}:`, err);\n                    return `<pre><code class=\"language-${lang}\">${this.escapeHtml(code)}</code></pre>`;\n                }\n            }\n            \n            // For bidirectional editing, only apply syntax highlighting\n            // Skip complex transformations that break round-trip conversion\n            const skipComplexRendering = !this.options.enableComplexFences;\n            \n            if (!skipComplexRendering) {\n                // Built-in lazy loading fence handlers (disabled for now)\n                switch(lang) {\n                    case 'svg':\n                        return this.renderSVG(code);\n                        \n                    case 'html':\n                        return this.renderHTML(code);\n                        \n                    case 'math':\n                    case 'katex':\n                    case 'tex':\n                    case 'latex':\n                        return this.renderMath(code, lang);\n                        \n                    case 'csv':\n                    case 'psv':\n                    case 'tsv':\n                        return this.renderTable(code, lang);\n                        \n                    case 'json':\n                    case 'json5':\n                        return this.renderJSON(code, lang);\n                        \n                    case 'mermaid':\n                        if (window.mermaid) {\n                            return this.renderMermaid(code);\n                        }\n                        break;\n                }\n            }\n            \n            // Syntax highlighting support - keep editable for bidirectional\n            if (window.hljs && lang && hljs.getLanguage(lang)) {\n                const highlighted = hljs.highlight(code, { language: lang }).value;\n                // Don't add contenteditable=\"false\" - the bidirectional system can extract text from the highlighted code\n                return `<pre data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\"><code class=\"hljs language-${lang}\">${highlighted}</code></pre>`;\n            }\n            \n            // Default: let quikdown handle it\n            return undefined;\n        };\n    }\n    \n    /**\n     * Render SVG content\n     */\n    renderSVG(code) {\n        try {\n            // Basic SVG validation\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(code, 'image/svg+xml');\n            const parseError = doc.querySelector('parsererror');\n            \n            if (parseError) {\n                throw new Error('Invalid SVG');\n            }\n            \n            // Sanitize SVG by removing script tags and event handlers\n            const svg = doc.documentElement;\n            svg.querySelectorAll('script').forEach(el => el.remove());\n            \n            // Remove event handlers\n            const walker = document.createTreeWalker(svg, NodeFilter.SHOW_ELEMENT);\n            let node;\n            while (node = walker.nextNode()) {\n                for (let i = node.attributes.length - 1; i >= 0; i--) {\n                    const attr = node.attributes[i];\n                    if (attr.name.startsWith('on') || attr.value.includes('javascript:')) {\n                        node.removeAttribute(attr.name);\n                    }\n                }\n            }\n            \n            // Create container element programmatically to avoid attribute escaping issues\n            const container = document.createElement('div');\n            container.className = 'qde-svg-container';\n            container.contentEditable = 'false';\n            container.setAttribute('data-qd-fence', '```');\n            container.setAttribute('data-qd-lang', 'svg');\n            container.setAttribute('data-qd-source', code);  // No escaping needed when using setAttribute!\n            container.innerHTML = new XMLSerializer().serializeToString(svg);\n            \n            // Return the HTML string\n            return container.outerHTML;\n        } catch (err) {\n            const errorContainer = document.createElement('pre');\n            errorContainer.className = 'qde-error';\n            errorContainer.contentEditable = 'false';\n            errorContainer.setAttribute('data-qd-fence', '```');\n            errorContainer.setAttribute('data-qd-lang', 'svg');\n            errorContainer.textContent = `Invalid SVG: ${err.message}`;\n            return errorContainer.outerHTML;\n        }\n    }\n    \n    /**\n     * Render HTML content with DOMPurify if available\n     */\n    renderHTML(code) {\n        const id = `html-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        \n        // If DOMPurify is loaded, use it\n        if (window.DOMPurify) {\n            const clean = DOMPurify.sanitize(code);\n            \n            // Create container programmatically\n            const container = document.createElement('div');\n            container.className = 'qde-html-container';\n            container.contentEditable = 'false';\n            container.setAttribute('data-qd-fence', '```');\n            container.setAttribute('data-qd-lang', 'html');\n            container.setAttribute('data-qd-source', code);\n            container.innerHTML = clean;\n            \n            return container.outerHTML;\n        }\n        \n        // Try to lazy load DOMPurify\n        this.lazyLoadLibrary(\n            'DOMPurify',\n            () => window.DOMPurify,\n            'https://unpkg.com/dompurify/dist/purify.min.js'\n        ).then(loaded => {\n            if (loaded) {\n                const element = document.getElementById(id);\n                if (element) {\n                    const clean = DOMPurify.sanitize(code);\n                    element.innerHTML = clean;\n                    // Update attributes after loading\n                    element.setAttribute('data-qd-source', code);\n                    element.setAttribute('data-qd-fence', '```');\n                    element.setAttribute('data-qd-lang', 'html');\n                }\n            }\n        });\n        \n        // Return placeholder with bidirectional attributes - non-editable\n        const placeholder = document.createElement('div');\n        placeholder.id = id;\n        placeholder.className = 'qde-html-container';\n        placeholder.contentEditable = 'false';\n        placeholder.setAttribute('data-qd-fence', '```');\n        placeholder.setAttribute('data-qd-lang', 'html');\n        placeholder.setAttribute('data-qd-source', code);\n        const pre = document.createElement('pre');\n        pre.textContent = code;\n        placeholder.appendChild(pre);\n        \n        return placeholder.outerHTML;\n    }\n    \n    /**\n     * Render math with KaTeX if available\n     */\n    renderMath(code, lang) {\n        const id = `math-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        \n        // If KaTeX is loaded, use it\n        if (window.katex) {\n            try {\n                const rendered = katex.renderToString(code, {\n                    displayMode: true,\n                    throwOnError: false\n                });\n                \n                // Create container programmatically\n                const container = document.createElement('div');\n                container.className = 'qde-math-container';\n                container.contentEditable = 'false';\n                container.setAttribute('data-qd-fence', '```');\n                container.setAttribute('data-qd-lang', lang);\n                container.setAttribute('data-qd-source', code);\n                container.innerHTML = rendered;\n                \n                return container.outerHTML;\n            } catch (err) {\n                const errorContainer = document.createElement('pre');\n                errorContainer.className = 'qde-error';\n                errorContainer.contentEditable = 'false';\n                errorContainer.setAttribute('data-qd-fence', '```');\n                errorContainer.setAttribute('data-qd-lang', lang);\n                errorContainer.setAttribute('data-qd-source', code);\n                errorContainer.textContent = `Math error: ${err.message}`;\n                return errorContainer.outerHTML;\n            }\n        }\n        \n        // Try to lazy load KaTeX\n        this.lazyLoadLibrary(\n            'KaTeX',\n            () => window.katex,\n            'https://unpkg.com/katex/dist/katex.min.js',\n            'https://unpkg.com/katex/dist/katex.min.css'\n        ).then(loaded => {\n            if (loaded) {\n                const element = document.getElementById(id);\n                if (element) {\n                    try {\n                        katex.render(code, element, {\n                            displayMode: true,\n                            throwOnError: false\n                        });\n                        // Update attributes after rendering\n                        element.setAttribute('data-qd-source', code);\n                        element.setAttribute('data-qd-fence', '```');\n                        element.setAttribute('data-qd-lang', lang);\n                    } catch (err) {\n                        element.innerHTML = `<pre class=\"qde-error\">Math error: ${this.escapeHtml(err.message)}</pre>`;\n                    }\n                }\n            }\n        });\n        \n        // Return placeholder with bidirectional attributes - non-editable\n        const placeholder = document.createElement('div');\n        placeholder.id = id;\n        placeholder.className = 'qde-math-container';\n        placeholder.contentEditable = 'false';\n        placeholder.setAttribute('data-qd-fence', '```');\n        placeholder.setAttribute('data-qd-lang', lang);\n        placeholder.setAttribute('data-qd-source', code);\n        const pre = document.createElement('pre');\n        pre.textContent = code;\n        placeholder.appendChild(pre);\n        \n        return placeholder.outerHTML;\n    }\n    \n    /**\n     * Render CSV/PSV/TSV as HTML table\n     */\n    renderTable(code, lang) {\n        const escapedCode = this.escapeHtml(code);\n        try {\n            const delimiter = lang === 'csv' ? ',' : lang === 'psv' ? '|' : '\\t';\n            const lines = code.trim().split('\\n');\n            \n            if (lines.length === 0) {\n                return `<pre data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\" data-qd-source=\"${escapedCode}\">${escapedCode}</pre>`;\n            }\n            \n            // CSV tables CAN be editable - we'll convert HTML table back to CSV\n            // Don't need data-qd-source since we convert the table structure back to CSV\n            let html = `<table class=\"qde-data-table qde-csv-table\" data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\">`;\n            \n            // Parse header\n            const header = this.parseCSVLine(lines[0], delimiter);\n            html += '<thead><tr>';\n            header.forEach(cell => {\n                html += `<th>${this.escapeHtml(cell.trim())}</th>`;\n            });\n            html += '</tr></thead>';\n            \n            // Parse body\n            if (lines.length > 1) {\n                html += '<tbody>';\n                for (let i = 1; i < lines.length; i++) {\n                    const row = this.parseCSVLine(lines[i], delimiter);\n                    html += '<tr>';\n                    row.forEach(cell => {\n                        html += `<td>${this.escapeHtml(cell.trim())}</td>`;\n                    });\n                    html += '</tr>';\n                }\n                html += '</tbody>';\n            }\n            \n            html += '</table>';\n            return html;\n        } catch (err) {\n            return `<pre data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\" data-qd-source=\"${escapedCode}\">${escapedCode}</pre>`;\n        }\n    }\n    \n    /**\n     * Parse CSV line handling quoted values\n     */\n    parseCSVLine(line, delimiter) {\n        const result = [];\n        let current = '';\n        let inQuotes = false;\n        \n        for (let i = 0; i < line.length; i++) {\n            const char = line[i];\n            const nextChar = line[i + 1];\n            \n            if (char === '\"') {\n                if (inQuotes && nextChar === '\"') {\n                    current += '\"';\n                    i++; // Skip next quote\n                } else {\n                    inQuotes = !inQuotes;\n                }\n            } else if (char === delimiter && !inQuotes) {\n                result.push(current);\n                current = '';\n            } else {\n                current += char;\n            }\n        }\n        \n        result.push(current);\n        return result;\n    }\n    \n    /**\n     * Render JSON with syntax highlighting\n     */\n    renderJSON(code, lang) {\n        // If highlight.js is available, use it for all JSON\n        if (window.hljs && hljs.getLanguage('json')) {\n            try {\n                // Try to format if valid JSON\n                let toHighlight = code;\n                try {\n                    const data = JSON.parse(code);\n                    toHighlight = JSON.stringify(data, null, 2);\n                } catch (e) {\n                    // Use original if not valid JSON\n                }\n                \n                const highlighted = hljs.highlight(toHighlight, { language: 'json' }).value;\n                return `<pre class=\"qde-json\" data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\"><code class=\"hljs language-json\">${highlighted}</code></pre>`;\n            } catch (e) {\n                // Fall through if highlighting fails\n            }\n        }\n        \n        // No highlighting available - return plain\n        return `<pre class=\"qde-json\" data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\">${this.escapeHtml(code)}</pre>`;\n    }\n    \n    /**\n     * Render Mermaid diagram\n     */\n    renderMermaid(code) {\n        const id = `mermaid-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        setTimeout(() => {\n            const element = document.getElementById(id);\n            if (element && window.mermaid) {\n                mermaid.render(id + '-svg', code).then(result => {\n                    element.innerHTML = result.svg;\n                }).catch(err => {\n                    element.innerHTML = `<pre>Error rendering diagram: ${err.message}</pre>`;\n                });\n            }\n        }, 0);\n        \n        // Create container programmatically\n        const container = document.createElement('div');\n        container.id = id;\n        container.className = 'mermaid';\n        container.contentEditable = 'false';\n        container.setAttribute('data-qd-source', code);\n        container.setAttribute('data-qd-fence', '```');\n        container.setAttribute('data-qd-lang', 'mermaid');\n        container.textContent = 'Loading diagram...';\n        \n        return container.outerHTML;\n    }\n    \n    /**\n     * Escape HTML for attributes\n     */\n    escapeHtml(text) {\n        return (text ?? \"\").replace(/[&\"'<>]/g, m => \n            ({'&':'&amp;','\"':'&quot;',\"'\":'&#39;','<':'&lt;','>':'&gt;'}[m]));\n    }\n    \n    /**\n     * Make complex fence blocks non-editable\n     */\n    makeFencesNonEditable() {\n        if (!this.previewPanel) return;\n        \n        // Only make specific complex fence types non-editable\n        // SVG, HTML, Math, Mermaid already have contenteditable=\"false\" set\n        // Syntax-highlighted code also has it set\n        \n        // Don't make regular code blocks or tables non-editable\n        // They can be edited and properly round-trip\n    }\n    \n    /**\n     * Load plugins dynamically\n     */\n    async loadPlugins() {\n        const promises = [];\n        \n        // Load highlight.js (check if already loaded)\n        if (this.options.plugins.highlightjs && !window.hljs) {\n            promises.push(\n                this.loadScript('https://unpkg.com/@highlightjs/cdn-assets/highlight.min.js'),\n                this.loadCSS('https://unpkg.com/@highlightjs/cdn-assets/styles/github.min.css')\n            );\n        }\n        \n        // Load mermaid (check if already loaded)\n        if (this.options.plugins.mermaid && !window.mermaid) {\n            promises.push(\n                this.loadScript('https://unpkg.com/mermaid/dist/mermaid.min.js').then(() => {\n                    if (window.mermaid) {\n                        mermaid.initialize({ startOnLoad: false });\n                    }\n                })\n            );\n        }\n        \n        await Promise.all(promises);\n    }\n    \n    /**\n     * Lazy load library if not already loaded\n     */\n    async lazyLoadLibrary(name, check, scriptUrl, cssUrl = null) {\n        // Check if library is already loaded\n        if (check()) {\n            return true;\n        }\n        \n        try {\n            const promises = [];\n            \n            // Load script\n            if (scriptUrl) {\n                promises.push(this.loadScript(scriptUrl));\n            }\n            \n            // Load CSS if provided\n            if (cssUrl) {\n                promises.push(this.loadCSS(cssUrl));\n            }\n            \n            await Promise.all(promises);\n            \n            // Verify library loaded\n            return check();\n        } catch (err) {\n            console.error(`Failed to load ${name}:`, err);\n            return false;\n        }\n    }\n    \n    /**\n     * Load external script\n     */\n    loadScript(src) {\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n            script.src = src;\n            script.onload = resolve;\n            script.onerror = reject;\n            document.head.appendChild(script);\n        });\n    }\n    \n    /**\n     * Load external CSS\n     */\n    loadCSS(href) {\n        return new Promise((resolve) => {\n            const link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.href = href;\n            link.onload = resolve;\n            document.head.appendChild(link);\n            // Resolve anyway after timeout (CSS doesn't always fire onload)\n            setTimeout(resolve, 1000);\n        });\n    }\n    \n    /**\n     * Apply theme\n     */\n    applyTheme() {\n        const theme = this.options.theme;\n        \n        if (theme === 'auto') {\n            // Check system preference\n            const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n            this.container.classList.toggle('qde-dark', isDark);\n            \n            // Listen for changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {\n                this.container.classList.toggle('qde-dark', e.matches);\n            });\n        } else {\n            this.container.classList.toggle('qde-dark', theme === 'dark');\n        }\n    }\n    \n    /**\n     * Set lazy linefeeds option\n     * @param {boolean} enabled - Whether to enable lazy linefeeds\n     */\n    setLazyLinefeeds(enabled) {\n        this.options.lazy_linefeeds = enabled;\n        // Re-render if we have content\n        if (this._markdown) {\n            this.updateFromSource();\n        }\n    }\n    \n    /**\n     * Get lazy linefeeds option\n     * @returns {boolean}\n     */\n    getLazyLinefeeds() {\n        return this.options.lazy_linefeeds;\n    }\n    \n    /**\n     * Set debounce delay for input updates\n     * @param {number} delay - Delay in milliseconds (0 for instant)\n     */\n    setDebounceDelay(delay) {\n        this.options.debounceDelay = Math.max(0, delay);\n    }\n    \n    /**\n     * Get current debounce delay\n     * @returns {number} Delay in milliseconds\n     */\n    getDebounceDelay() {\n        return this.options.debounceDelay;\n    }\n    \n    /**\n     * Set editor mode\n     */\n    setMode(mode) {\n        if (!['source', 'preview', 'split'].includes(mode)) return;\n        \n        this.currentMode = mode;\n        this.container.className = `qde-container qde-mode-${mode}`;\n        \n        // Update toolbar buttons\n        if (this.toolbar) {\n            this.toolbar.querySelectorAll('.qde-btn[data-mode]').forEach(btn => {\n                btn.classList.toggle('active', btn.dataset.mode === mode);\n            });\n        }\n        \n        // Apply theme class\n        if (this.container.classList.contains('qde-dark')) {\n            this.container.classList.add('qde-dark');\n        }\n        \n        // Make fence blocks non-editable when showing preview\n        if (mode !== 'source') {\n            setTimeout(() => this.makeFencesNonEditable(), 0);\n        }\n        \n        // Trigger mode change event\n        if (this.options.onModeChange) {\n            this.options.onModeChange(mode);\n        }\n    }\n    \n    /**\n     * Handle toolbar actions\n     */\n    handleAction(action) {\n        switch(action) {\n            case 'copy-markdown':\n                this.copy('markdown');\n                break;\n            case 'copy-html':\n                this.copy('html');\n                break;\n            case 'remove-hr':\n                this.removeHR();\n                break;\n        }\n    }\n    \n    /**\n     * Copy content to clipboard\n     */\n    async copy(type) {\n        const content = type === 'markdown' ? this._markdown : this._html;\n        \n        try {\n            await navigator.clipboard.writeText(content);\n            \n            // Visual feedback\n            const btn = this.toolbar.querySelector(`[data-action=\"copy-${type}\"]`);\n            if (btn) {\n                const originalText = btn.textContent;\n                btn.textContent = 'Copied!';\n                setTimeout(() => {\n                    btn.textContent = originalText;\n                }, 1500);\n            }\n        } catch (err) {\n            console.error('Failed to copy:', err);\n        }\n    }\n    \n    // Public API\n    \n    /**\n     * Get current markdown\n     */\n    get markdown() {\n        return this._markdown;\n    }\n    \n    /**\n     * Set markdown content\n     */\n    set markdown(value) {\n        this.setMarkdown(value);\n    }\n    \n    /**\n     * Get current HTML\n     */\n    get html() {\n        return this._html;\n    }\n    \n    /**\n     * Get current mode\n     */\n    get mode() {\n        return this.currentMode;\n    }\n    \n    /**\n     * Set markdown content\n     */\n    async setMarkdown(markdown) {\n        // Wait for initialization if needed\n        if (this.initPromise) {\n            await this.initPromise;\n        }\n        \n        this._markdown = markdown;\n        if (this.sourceTextarea) {\n            this.sourceTextarea.value = markdown;\n        }\n        this.updateFromMarkdown(markdown);\n    }\n    \n    /**\n     * Get markdown content\n     */\n    getMarkdown() {\n        return this._markdown;\n    }\n    \n    /**\n     * Get HTML content\n     */\n    getHTML() {\n        return this._html;\n    }\n    \n    /**\n     * Remove all horizontal rules (---) from markdown\n     */\n    async removeHR() {\n        // Remove standalone HR lines (3 or more dashes/underscores/asterisks)\n        // Matches: ---, ___, ***, ----, etc. with optional spaces\n        const cleaned = this._markdown\n            .split('\\n')\n            .filter(line => {\n                // Keep lines that aren't just HR patterns\n                const trimmed = line.trim();\n                // Match HR patterns: 3+ of -, _, or * with optional spaces between\n                return !(/^[-_*](\\s*[-_*]){2,}\\s*$/.test(trimmed));\n            })\n            .join('\\n');\n        \n        // Update the markdown\n        await this.setMarkdown(cleaned);\n        \n        // Visual feedback if toolbar button exists\n        const btn = this.toolbar?.querySelector('[data-action=\"remove-hr\"]');\n        if (btn) {\n            const originalText = btn.textContent;\n            btn.textContent = 'Removed!';\n            setTimeout(() => {\n                btn.textContent = originalText;\n            }, 1500);\n        }\n    }\n    \n    /**\n     * Destroy the editor\n     */\n    destroy() {\n        // Clear timers\n        clearTimeout(this.updateTimer);\n        \n        // Clear container\n        this.container.innerHTML = '';\n        this.container.classList.remove('qde-container', 'qde-dark');\n        \n        // Remove injected styles (only if no other editors exist)\n        const otherEditors = document.querySelectorAll('.qde-container');\n        if (otherEditors.length === 0) {\n            const style = document.getElementById('qde-styles');\n            if (style) style.remove();\n        }\n    }\n}\n\n// Export\nexport default QuikdownEditor;\n\n// Export for CommonJS (needed for bundled ESM to work with Jest)\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = QuikdownEditor;\n}\n\n// Also export for UMD builds\nif (typeof window !== 'undefined') {\n    window.QuikdownEditor = QuikdownEditor;\n}"],"names":["CLASS_PREFIX","PLACEHOLDER_CB","ESC_MAP","QUIKDOWN_STYLES","h1","h2","h3","h4","h5","h6","pre","code","blockquote","table","th","td","hr","img","a","strong","em","del","ul","ol","li","quikdown","markdown","options","fence_plugin","inline_styles","bidirectional","lazy_linefeeds","getAttr","styles","tag","additionalStyle","style","includes","replace","trim","endsWith","classAttr","createGetAttr","escapeHtml","text","m","dataQd","marker","sanitizeUrl","url","allowUnsafe","trimmedUrl","lowerUrl","toLowerCase","dangerousProtocols","protocol","startsWith","html","codeBlocks","inlineCodes","match","fence","lang","placeholder","length","langTrimmed","push","trimEnd","custom","lines","split","result","inTable","tableLines","i","line","test","tableHtml","buildTable","join","processTable","hashes","content","level","listStack","indent","Math","floor","isOrdered","listType","listItemContent","taskListClass","taskMatch","checked","taskContent","isChecked","list","pop","type","currentList","liAttr","processLists","alt","src","sanitizedSrc","allow_unsafe_urls","altAttr","srcAttr","href","sanitizedHref","rel","textAttr","prefix","sanitizedUrl","forEach","pattern","blocks","bi","b","offset","substring","RegExp","replacement","block","undefined","langClass","codeAttr","langAttr","fenceAttr","processInlineMarkdown","separatorIndex","headerLines","slice","bodyLines","alignments","map","cell","trimmed","alignStyle","processedCell","quikdown_bd","emitStyles","theme","themeOverrides","_textColor","css","Object","entries","themedStyle","oldColor","newColor","configure","version","module","exports","window","keys","key","toMarkdown","htmlOrElement","container","document","createElement","innerHTML","Element","walkNode","node","parentContext","nodeType","Node","TEXT_NODE","textContent","ELEMENT_NODE","tagName","getAttribute","childContent","child","childNodes","parentTag","parseInt","repeat","boldMarker","emMarker","delMarker","codeMarker","codeEl","querySelector","quoteMarker","linkText","walkList","alignData","thead","headerRow","headers","querySelectorAll","_","align","tbody","row","cells","walkTable","trailingBlankLines","classList","contains","source","temp","value","mermaidPre","preSource","sourceElement","mermaidElement","listNode","depth","index","children","checkbox","itemContent","DEFAULT_OPTIONS","mode","showToolbar","showRemoveHR","debounceDelay","plugins","highlightjs","mermaid","customFences","enableComplexFences","QuikdownEditor","constructor","this","Error","_markdown","_html","currentMode","updateTimer","initPromise","init","loadPlugins","buildUI","attachEvents","applyTheme","setMode","initialContent","setMarkdown","add","toolbar","createToolbar","appendChild","editorArea","className","sourcePanel","sourceTextarea","previewPanel","contentEditable","injectStyles","modeLabels","preview","btn","dataset","title","spacer","action","removeHRBtn","getElementById","id","head","addEventListener","handleSourceInput","handlePreviewInput","e","target","closest","handleAction","ctrlKey","metaKey","preventDefault","clearTimeout","setTimeout","updateFromMarkdown","updateFromHTML","createFencePlugin","makeFencesNonEditable","onChange","clonedPanel","cloneNode","preprocessSpecialElements","panel","element","setAttribute","parentNode","replaceChild","delimiter","csv","needsQuoting","tr","err","console","error","renderSVG","renderHTML","renderMath","renderTable","renderJSON","renderMermaid","hljs","getLanguage","highlight","language","doc","DOMParser","parseFromString","svg","documentElement","el","remove","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","nextNode","attributes","attr","name","removeAttribute","XMLSerializer","serializeToString","outerHTML","errorContainer","message","Date","now","random","toString","substr","DOMPurify","clean","sanitize","lazyLoadLibrary","then","loaded","katex","rendered","renderToString","displayMode","throwOnError","render","escapedCode","header","parseCSVLine","current","inQuotes","char","nextChar","toHighlight","data","JSON","parse","stringify","catch","promises","loadScript","loadCSS","initialize","startOnLoad","Promise","all","check","scriptUrl","cssUrl","resolve","reject","script","onload","onerror","link","isDark","matchMedia","matches","toggle","setLazyLinefeeds","enabled","updateFromSource","getLazyLinefeeds","setDebounceDelay","delay","max","getDebounceDelay","onModeChange","copy","removeHR","navigator","clipboard","writeText","originalText","getMarkdown","getHTML","cleaned","filter","destroy"],"mappings":"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"}