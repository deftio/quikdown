{"version":3,"file":"quikdown_edit.umd.min.js","sources":["../src/quikdown.js","../src/quikdown_bd.js","../src/quikdown_edit.js"],"sourcesContent":["/**\n * quikdown - A minimal markdown parser optimized for chat/LLM output\n * Supports tables, code blocks, lists, and common formatting\n * @param {string} markdown - The markdown source text\n * @param {Object} options - Optional configuration object\n * @param {Function} options.fence_plugin - Custom renderer for fenced code blocks\n *                   (content, fence_string) => html string\n * @param {boolean} options.inline_styles - If true, uses inline styles instead of classes\n * @param {boolean} options.bidirectional - If true, adds data-qd attributes for source tracking\n * @param {boolean} options.lazy_linefeeds - If true, single newlines become <br> tags\n * @returns {string} - The rendered HTML\n */\n\n// Version will be injected at build time  \nconst quikdownVersion = '__QUIKDOWN_VERSION__';\n\n// Constants for reuse\nconst CLASS_PREFIX = 'quikdown-';\nconst PLACEHOLDER_CB = '§CB';\nconst PLACEHOLDER_IC = '§IC';\n\n// Escape map at module level\nconst ESC_MAP = {'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'};\n\n// Single source of truth for all style definitions - optimized\nconst QUIKDOWN_STYLES = {\n    h1: 'font-size:2em;font-weight:600;margin:.67em 0;text-align:left',\n    h2: 'font-size:1.5em;font-weight:600;margin:.83em 0',\n    h3: 'font-size:1.25em;font-weight:600;margin:1em 0',\n    h4: 'font-size:1em;font-weight:600;margin:1.33em 0',\n    h5: 'font-size:.875em;font-weight:600;margin:1.67em 0',\n    h6: 'font-size:.85em;font-weight:600;margin:2em 0',\n    pre: 'background:#f4f4f4;padding:10px;border-radius:4px;overflow-x:auto;margin:1em 0',\n    code: 'background:#f0f0f0;padding:2px 4px;border-radius:3px;font-family:monospace',\n    blockquote: 'border-left:4px solid #ddd;margin-left:0;padding-left:1em',\n    table: 'border-collapse:collapse;width:100%;margin:1em 0',\n    th: 'border:1px solid #ddd;padding:8px;background-color:#f2f2f2;font-weight:bold;text-align:left',\n    td: 'border:1px solid #ddd;padding:8px;text-align:left',\n    hr: 'border:none;border-top:1px solid #ddd;margin:1em 0',\n    img: 'max-width:100%;height:auto',\n    a: 'color:#06c;text-decoration:underline',\n    strong: 'font-weight:bold',\n    em: 'font-style:italic',\n    del: 'text-decoration:line-through',\n    ul: 'margin:.5em 0;padding-left:2em',\n    ol: 'margin:.5em 0;padding-left:2em',\n    li: 'margin:.25em 0',\n    // Task list specific styles\n    'task-item': 'list-style:none',\n    'task-checkbox': 'margin-right:.5em'\n};\n\n// Factory function to create getAttr for a given context\nfunction createGetAttr(inline_styles, styles) {\n    return function(tag, additionalStyle = '') {\n        if (inline_styles) {\n            let style = styles[tag];\n            if (!style && !additionalStyle) return '';\n            \n            // Remove default text-align if we're adding a different alignment\n            if (additionalStyle && additionalStyle.includes('text-align') && style && style.includes('text-align')) {\n                style = style.replace(/text-align:[^;]+;?/, '').trim();\n                if (style && !style.endsWith(';')) style += ';';\n            }\n            \n            /* istanbul ignore next - defensive: additionalStyle without style doesn't occur with current tags */\n            const fullStyle = additionalStyle ? (style ? `${style}${additionalStyle}` : additionalStyle) : style;\n            return ` style=\"${fullStyle}\"`;\n        } else {\n            const classAttr = ` class=\"${CLASS_PREFIX}${tag}\"`;\n            // Apply inline styles for alignment even when using CSS classes\n            if (additionalStyle) {\n                return `${classAttr} style=\"${additionalStyle}\"`;\n            }\n            return classAttr;\n        }\n    };\n}\n\nfunction quikdown(markdown, options = {}) {\n    if (!markdown || typeof markdown !== 'string') {\n        return '';\n    }\n    \n    const { fence_plugin, inline_styles = false, bidirectional = false, lazy_linefeeds = false } = options;\n    const styles = QUIKDOWN_STYLES; // Use module-level styles\n    const getAttr = createGetAttr(inline_styles, styles); // Create getAttr once\n\n    // Escape HTML entities to prevent XSS\n    function escapeHtml(text) {\n        return text.replace(/[&<>\"']/g, m => ESC_MAP[m]);\n    }\n    \n    // Helper to add data-qd attributes for bidirectional support\n    const dataQd = bidirectional ? (marker) => ` data-qd=\"${escapeHtml(marker)}\"` : () => '';\n    \n    // Sanitize URLs to prevent XSS attacks\n    function sanitizeUrl(url, allowUnsafe = false) {\n        /* istanbul ignore next - defensive programming, regex ensures url is never empty */\n        if (!url) return '';\n        \n        // If unsafe URLs are explicitly allowed, return as-is\n        if (allowUnsafe) return url;\n        \n        const trimmedUrl = url.trim();\n        const lowerUrl = trimmedUrl.toLowerCase();\n        \n        // Block dangerous protocols\n        const dangerousProtocols = ['javascript:', 'vbscript:', 'data:'];\n        \n        for (const protocol of dangerousProtocols) {\n            if (lowerUrl.startsWith(protocol)) {\n                // Exception: Allow data:image/* for images\n                if (protocol === 'data:' && lowerUrl.startsWith('data:image/')) {\n                    return trimmedUrl;\n                }\n                // Return safe empty link for dangerous protocols\n                return '#';\n            }\n        }\n        \n        return trimmedUrl;\n    }\n\n    // Process the markdown in phases\n    let html = markdown;\n    \n    // Phase 1: Extract and protect code blocks and inline code\n    const codeBlocks = [];\n    const inlineCodes = [];\n    \n    // Extract fenced code blocks first (supports both ``` and ~~~)\n    // Match paired fences - ``` with ``` and ~~~ with ~~~\n    // Fence must be at start of line\n    html = html.replace(/^(```|~~~)([^\\n]*)\\n([\\s\\S]*?)^\\1$/gm, (match, fence, lang, code) => {\n        const placeholder = `${PLACEHOLDER_CB}${codeBlocks.length}§`;\n        \n        // Trim the language specification\n        const langTrimmed = lang ? lang.trim() : '';\n        \n        // If custom fence plugin is provided, use it (v1.1.0: object format required)\n        if (fence_plugin && fence_plugin.render && typeof fence_plugin.render === 'function') {\n            codeBlocks.push({\n                lang: langTrimmed,\n                code: code.trimEnd(),\n                custom: true,\n                fence: fence,\n                hasReverse: !!fence_plugin.reverse\n            });\n        } else {\n            codeBlocks.push({\n                lang: langTrimmed,\n                code: escapeHtml(code.trimEnd()),\n                custom: false,\n                fence: fence\n            });\n        }\n        return placeholder;\n    });\n    \n    // Extract inline code\n    html = html.replace(/`([^`]+)`/g, (match, code) => {\n        const placeholder = `${PLACEHOLDER_IC}${inlineCodes.length}§`;\n        inlineCodes.push(escapeHtml(code));\n        return placeholder;\n    });\n    \n    // Now escape HTML in the rest of the content\n    html = escapeHtml(html);\n    \n    // Phase 2: Process block elements\n    \n    // Process tables\n    html = processTable(html, getAttr);\n    \n    // Process headings (supports optional trailing #'s)\n    html = html.replace(/^(#{1,6})\\s+(.+?)\\s*#*$/gm, (match, hashes, content) => {\n        const level = hashes.length;\n        return `<h${level}${getAttr('h' + level)}${dataQd(hashes)}>${content}</h${level}>`;\n    });\n    \n    // Process blockquotes (must handle escaped > since we already escaped HTML)\n    html = html.replace(/^&gt;\\s+(.+)$/gm, `<blockquote${getAttr('blockquote')}>$1</blockquote>`);\n    // Merge consecutive blockquotes\n    html = html.replace(/<\\/blockquote>\\n<blockquote>/g, '\\n');\n    \n    // Process horizontal rules (allow trailing spaces)\n    html = html.replace(/^---+\\s*$/gm, `<hr${getAttr('hr')}>`);\n    \n    // Process lists\n    html = processLists(html, getAttr, inline_styles, bidirectional);\n    \n    // Phase 3: Process inline elements\n    \n    // Images (must come before links, with URL sanitization)\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, (match, alt, src) => {\n        const sanitizedSrc = sanitizeUrl(src, options.allow_unsafe_urls);\n        const altAttr = bidirectional && alt ? ` data-qd-alt=\"${escapeHtml(alt)}\"` : '';\n        const srcAttr = bidirectional ? ` data-qd-src=\"${escapeHtml(src)}\"` : '';\n        return `<img${getAttr('img')} src=\"${sanitizedSrc}\" alt=\"${alt}\"${altAttr}${srcAttr}${dataQd('!')}>`;\n    });\n    \n    // Links (with URL sanitization)\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, (match, text, href) => {\n        // Sanitize URL to prevent XSS\n        const sanitizedHref = sanitizeUrl(href, options.allow_unsafe_urls);\n        const isExternal = /^https?:\\/\\//i.test(sanitizedHref);\n        const rel = isExternal ? ' rel=\"noopener noreferrer\"' : '';\n        const textAttr = bidirectional ? ` data-qd-text=\"${escapeHtml(text)}\"` : '';\n        return `<a${getAttr('a')} href=\"${sanitizedHref}\"${rel}${textAttr}${dataQd('[')}>${text}</a>`;\n    });\n    \n    // Autolinks - convert bare URLs to clickable links\n    html = html.replace(/(^|\\s)(https?:\\/\\/[^\\s<]+)/g, (match, prefix, url) => {\n        const sanitizedUrl = sanitizeUrl(url, options.allow_unsafe_urls);\n        return `${prefix}<a${getAttr('a')} href=\"${sanitizedUrl}\" rel=\"noopener noreferrer\">${url}</a>`;\n    });\n    \n    // Process inline formatting (bold, italic, strikethrough)\n    const inlinePatterns = [\n        [/\\*\\*(.+?)\\*\\*/g, 'strong', '**'],\n        [/__(.+?)__/g, 'strong', '__'],\n        [/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, 'em', '*'],\n        [/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, 'em', '_'],\n        [/~~(.+?)~~/g, 'del', '~~']\n    ];\n    \n    inlinePatterns.forEach(([pattern, tag, marker]) => {\n        html = html.replace(pattern, `<${tag}${getAttr(tag)}${dataQd(marker)}>$1</${tag}>`);\n    });\n    \n    // Line breaks\n    if (lazy_linefeeds) {\n        // Lazy linefeeds: single newline becomes <br> (except between paragraphs and after/before block elements)\n        const blocks = [];\n        let bi = 0;\n        \n        // Protect tables and lists  \n        html = html.replace(/<(table|[uo]l)[^>]*>[\\s\\S]*?<\\/\\1>/g, m => {\n            blocks[bi] = m;\n            return `§B${bi++}§`;\n        });\n        \n        // Handle paragraphs and block elements\n        html = html.replace(/\\n\\n+/g, '§P§')\n            // After block elements\n            .replace(/(<\\/(?:h[1-6]|blockquote|pre)>)\\n/g, '$1§N§')\n            .replace(/(<(?:h[1-6]|blockquote|pre|hr)[^>]*>)\\n/g, '$1§N§')\n            // Before block elements  \n            .replace(/\\n(<(?:h[1-6]|blockquote|pre|hr)[^>]*>)/g, '§N§$1')\n            .replace(/\\n(§B\\d+§)/g, '§N§$1')\n            .replace(/(§B\\d+§)\\n/g, '$1§N§')\n            // Convert remaining newlines\n            .replace(/\\n/g, `<br${getAttr('br')}>`)\n            // Restore\n            .replace(/§N§/g, '\\n')\n            .replace(/§P§/g, '</p><p>');\n        \n        // Restore protected blocks\n        blocks.forEach((b, i) => html = html.replace(`§B${i}§`, b));\n        \n        html = '<p>' + html + '</p>';\n    } else {\n        // Standard: two spaces at end of line for line breaks\n        html = html.replace(/  $/gm, `<br${getAttr('br')}>`);\n        \n        // Paragraphs (double newlines)\n        // Don't add </p> after block elements (they're not in paragraphs)\n        html = html.replace(/\\n\\n+/g, (match, offset) => {\n            // Check if we're after a block element closing tag\n            const before = html.substring(0, offset);\n            if (before.match(/<\\/(h[1-6]|blockquote|ul|ol|table|pre|hr)>$/)) {\n                return '<p>';  // Just open a new paragraph\n            }\n            return '</p><p>';  // Normal paragraph break\n        });\n        html = '<p>' + html + '</p>';\n    }\n    \n    // Clean up empty paragraphs and unwrap block elements\n    const cleanupPatterns = [\n        [/<p><\\/p>/g, ''],\n        [/<p>(<h[1-6][^>]*>)/g, '$1'],\n        [/(<\\/h[1-6]>)<\\/p>/g, '$1'],\n        [/<p>(<blockquote[^>]*>)/g, '$1'],\n        [/(<\\/blockquote>)<\\/p>/g, '$1'],\n        [/<p>(<ul[^>]*>|<ol[^>]*>)/g, '$1'],\n        [/(<\\/ul>|<\\/ol>)<\\/p>/g, '$1'],\n        [/<p>(<hr[^>]*>)<\\/p>/g, '$1'],\n        [/<p>(<table[^>]*>)/g, '$1'],\n        [/(<\\/table>)<\\/p>/g, '$1'],\n        [/<p>(<pre[^>]*>)/g, '$1'],\n        [/(<\\/pre>)<\\/p>/g, '$1'],\n        [new RegExp(`<p>(${PLACEHOLDER_CB}\\\\d+§)<\\/p>`, 'g'), '$1']\n    ];\n    \n    cleanupPatterns.forEach(([pattern, replacement]) => {\n        html = html.replace(pattern, replacement);\n    });\n    \n    // Fix orphaned closing </p> tags after block elements\n    // When a paragraph follows a block element, ensure it has opening <p>\n    html = html.replace(/(<\\/(?:h[1-6]|blockquote|ul|ol|table|pre|hr)>)\\n([^<])/g, '$1\\n<p>$2');\n    \n    // Phase 4: Restore code blocks and inline code\n    \n    // Restore code blocks\n    codeBlocks.forEach((block, i) => {\n        let replacement;\n        \n        if (block.custom && fence_plugin && fence_plugin.render) {\n            // Use custom fence plugin (v1.1.0: object format with render function)\n            replacement = fence_plugin.render(block.code, block.lang);\n            \n            // If plugin returns undefined, fall back to default rendering\n            if (replacement === undefined) {\n                const langClass = !inline_styles && block.lang ? ` class=\"language-${block.lang}\"` : '';\n                const codeAttr = inline_styles ? getAttr('code') : langClass;\n                const langAttr = bidirectional && block.lang ? ` data-qd-lang=\"${escapeHtml(block.lang)}\"` : '';\n                const fenceAttr = bidirectional ? ` data-qd-fence=\"${escapeHtml(block.fence)}\"` : '';\n                replacement = `<pre${getAttr('pre')}${fenceAttr}${langAttr}><code${codeAttr}>${escapeHtml(block.code)}</code></pre>`;\n            } else if (bidirectional) {\n                // If bidirectional and plugin provided HTML, add data attributes for roundtrip\n                replacement = replacement.replace(/^<(\\w+)/, \n                    `<$1 data-qd-fence=\"${escapeHtml(block.fence)}\" data-qd-lang=\"${escapeHtml(block.lang)}\" data-qd-source=\"${escapeHtml(block.code)}\"`);\n            }\n        } else {\n            // Default rendering\n            const langClass = !inline_styles && block.lang ? ` class=\"language-${block.lang}\"` : '';\n            const codeAttr = inline_styles ? getAttr('code') : langClass;\n            const langAttr = bidirectional && block.lang ? ` data-qd-lang=\"${escapeHtml(block.lang)}\"` : '';\n            const fenceAttr = bidirectional ? ` data-qd-fence=\"${escapeHtml(block.fence)}\"` : '';\n            replacement = `<pre${getAttr('pre')}${fenceAttr}${langAttr}><code${codeAttr}>${block.code}</code></pre>`;\n        }\n        \n        const placeholder = `${PLACEHOLDER_CB}${i}§`;\n        html = html.replace(placeholder, replacement);\n    });\n    \n    // Restore inline code\n    inlineCodes.forEach((code, i) => {\n        const placeholder = `${PLACEHOLDER_IC}${i}§`;\n        html = html.replace(placeholder, `<code${getAttr('code')}${dataQd('`')}>${code}</code>`);\n    });\n    \n    return html.trim();\n}\n\n/**\n * Process inline markdown formatting\n */\nfunction processInlineMarkdown(text, getAttr) {\n    \n    // Process inline formatting patterns\n    const patterns = [\n        [/\\*\\*(.+?)\\*\\*/g, 'strong'],\n        [/__(.+?)__/g, 'strong'],\n        [/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, 'em'],\n        [/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, 'em'],\n        [/~~(.+?)~~/g, 'del'],\n        [/`([^`]+)`/g, 'code']\n    ];\n    \n    patterns.forEach(([pattern, tag]) => {\n        text = text.replace(pattern, `<${tag}${getAttr(tag)}>$1</${tag}>`);\n    });\n    \n    return text;\n}\n\n/**\n * Process markdown tables\n */\nfunction processTable(text, getAttr) {\n    const lines = text.split('\\n');\n    const result = [];\n    let inTable = false;\n    let tableLines = [];\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        \n        // Check if this line looks like a table row (with or without trailing |)\n        if (line.includes('|') && (line.startsWith('|') || /[^\\\\|]/.test(line))) {\n            if (!inTable) {\n                inTable = true;\n                tableLines = [];\n            }\n            tableLines.push(line);\n        } else {\n            // Not a table line\n            if (inTable) {\n                // Process the accumulated table\n                const tableHtml = buildTable(tableLines, getAttr);\n                if (tableHtml) {\n                    result.push(tableHtml);\n                } else {\n                    // Not a valid table, restore original lines\n                    result.push(...tableLines);\n                }\n                inTable = false;\n                tableLines = [];\n            }\n            result.push(lines[i]);\n        }\n    }\n    \n    // Handle table at end of text\n    if (inTable && tableLines.length > 0) {\n        const tableHtml = buildTable(tableLines, getAttr);\n        if (tableHtml) {\n            result.push(tableHtml);\n        } else {\n            result.push(...tableLines);\n        }\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Build an HTML table from markdown table lines\n */\nfunction buildTable(lines, getAttr) {\n    \n    if (lines.length < 2) return null;\n    \n    // Check for separator line (second line should be the separator)\n    let separatorIndex = -1;\n    for (let i = 1; i < lines.length; i++) {\n        // Support separator with or without leading/trailing pipes\n        if (/^\\|?[\\s\\-:|]+\\|?$/.test(lines[i]) && lines[i].includes('-')) {\n            separatorIndex = i;\n            break;\n        }\n    }\n    \n    if (separatorIndex === -1) return null;\n    \n    const headerLines = lines.slice(0, separatorIndex);\n    const bodyLines = lines.slice(separatorIndex + 1);\n    \n    // Parse alignment from separator\n    const separator = lines[separatorIndex];\n    // Handle pipes at start/end or not\n    const separatorCells = separator.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n    const alignments = separatorCells.map(cell => {\n        const trimmed = cell.trim();\n        if (trimmed.startsWith(':') && trimmed.endsWith(':')) return 'center';\n        if (trimmed.endsWith(':')) return 'right';\n        return 'left';\n    });\n    \n    let html = `<table${getAttr('table')}>\\n`;\n    \n    // Build header\n    // Note: headerLines will always have length > 0 since separatorIndex starts from 1\n    html += `<thead${getAttr('thead')}>\\n`;\n    headerLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            // Handle pipes at start/end or not\n            const cells = line.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align:${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), getAttr);\n                html += `<th${getAttr('th', alignStyle)}>${processedCell}</th>\\n`;\n            });\n            html += '</tr>\\n';\n    });\n    html += '</thead>\\n';\n    \n    // Build body\n    if (bodyLines.length > 0) {\n        html += `<tbody${getAttr('tbody')}>\\n`;\n        bodyLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            // Handle pipes at start/end or not\n            const cells = line.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align:${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), getAttr);\n                html += `<td${getAttr('td', alignStyle)}>${processedCell}</td>\\n`;\n            });\n            html += '</tr>\\n';\n        });\n        html += '</tbody>\\n';\n    }\n    \n    html += '</table>';\n    return html;\n}\n\n/**\n * Process markdown lists (ordered and unordered)\n */\nfunction processLists(text, getAttr, inline_styles, bidirectional) {\n    \n    const lines = text.split('\\n');\n    const result = [];\n    let listStack = []; // Track nested lists\n    \n    // Helper to escape HTML for data-qd attributes\n    const escapeHtml = (text) => text.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'})[m]);\n    const dataQd = bidirectional ? (marker) => ` data-qd=\"${escapeHtml(marker)}\"` : () => '';\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        const match = line.match(/^(\\s*)([*\\-+]|\\d+\\.)\\s+(.+)$/);\n        \n        if (match) {\n            const [, indent, marker, content] = match;\n            const level = Math.floor(indent.length / 2);\n            const isOrdered = /^\\d+\\./.test(marker);\n            const listType = isOrdered ? 'ol' : 'ul';\n            \n            // Check for task list items\n            let listItemContent = content;\n            let taskListClass = '';\n            const taskMatch = content.match(/^\\[([x ])\\]\\s+(.*)$/i);\n            if (taskMatch && !isOrdered) {\n                const [, checked, taskContent] = taskMatch;\n                const isChecked = checked.toLowerCase() === 'x';\n                const checkboxAttr = inline_styles \n                    ? ' style=\"margin-right:.5em\"' \n                    : ` class=\"${CLASS_PREFIX}task-checkbox\"`;\n                listItemContent = `<input type=\"checkbox\"${checkboxAttr}${isChecked ? ' checked' : ''} disabled> ${taskContent}`;\n                taskListClass = inline_styles ? ' style=\"list-style:none\"' : ` class=\"${CLASS_PREFIX}task-item\"`;\n            }\n            \n            // Close deeper levels\n            while (listStack.length > level + 1) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            \n            // Open new level if needed\n            if (listStack.length === level) {\n                // Need to open a new list\n                listStack.push({ type: listType, level });\n                result.push(`<${listType}${getAttr(listType)}>`);\n            } else if (listStack.length === level + 1) {\n                // Check if we need to switch list type\n                const currentList = listStack[listStack.length - 1];\n                if (currentList.type !== listType) {\n                    result.push(`</${currentList.type}>`);\n                    listStack.pop();\n                    listStack.push({ type: listType, level });\n                    result.push(`<${listType}${getAttr(listType)}>`);\n                }\n            }\n            \n            const liAttr = taskListClass || getAttr('li');\n            result.push(`<li${liAttr}${dataQd(marker)}>${listItemContent}</li>`);\n        } else {\n            // Not a list item, close all lists\n            while (listStack.length > 0) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            result.push(line);\n        }\n    }\n    \n    // Close any remaining lists\n    while (listStack.length > 0) {\n        const list = listStack.pop();\n        result.push(`</${list.type}>`);\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Emit CSS styles for quikdown elements\n * @param {string} prefix - Optional class prefix (default: 'quikdown-')\n * @param {string} theme - Optional theme: 'light' (default) or 'dark'\n * @returns {string} CSS string with quikdown styles\n */\nquikdown.emitStyles = function(prefix = 'quikdown-', theme = 'light') {\n    const styles = QUIKDOWN_STYLES;\n    \n    // Define theme color overrides\n    const themeOverrides = {\n        dark: {\n            '#f4f4f4': '#2a2a2a', // pre background\n            '#f0f0f0': '#2a2a2a', // code background\n            '#f2f2f2': '#2a2a2a', // th background\n            '#ddd': '#3a3a3a',    // borders\n            '#06c': '#6db3f2',    // links\n            _textColor: '#e0e0e0'\n        },\n        light: {\n            _textColor: '#333'    // Explicit text color for light theme\n        }\n    };\n    \n    let css = '';\n    for (const [tag, style] of Object.entries(styles)) {\n        let themedStyle = style;\n            \n            // Apply theme overrides if dark theme\n            if (theme === 'dark' && themeOverrides.dark) {\n                // Replace colors\n                for (const [oldColor, newColor] of Object.entries(themeOverrides.dark)) {\n                    if (!oldColor.startsWith('_')) {\n                        themedStyle = themedStyle.replace(new RegExp(oldColor, 'g'), newColor);\n                    }\n                }\n                \n                // Add text color for certain elements in dark theme\n                const needsTextColor = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'td', 'li', 'blockquote'];\n                if (needsTextColor.includes(tag)) {\n                    themedStyle += `;color:${themeOverrides.dark._textColor}`;\n                }\n            } else if (theme === 'light' && themeOverrides.light) {\n                // Add explicit text color for light theme elements too\n                const needsTextColor = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'td', 'li', 'blockquote'];\n                if (needsTextColor.includes(tag)) {\n                    themedStyle += `;color:${themeOverrides.light._textColor}`;\n                }\n            }\n        \n        css += `.${prefix}${tag} { ${themedStyle} }\\n`;\n    }\n    \n    return css;\n};\n\n/**\n * Configure quikdown with options and return a function\n * @param {Object} options - Configuration options\n * @returns {Function} Configured quikdown function\n */\nquikdown.configure = function(options) {\n    return function(markdown) {\n        return quikdown(markdown, options);\n    };\n};\n\n/**\n * Version information\n */\nquikdown.version = quikdownVersion;\n\n// Export for both CommonJS and ES6\n/* istanbul ignore next */\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = quikdown;\n}\n\n// For browser global\n/* istanbul ignore next */\nif (typeof window !== 'undefined') {\n    window.quikdown = quikdown;\n}\n\nexport default quikdown;","/**\n * quikdown_bd - Bidirectional markdown/HTML converter\n * Extends core quikdown with HTML→Markdown conversion\n * \n * Uses data-qd attributes to preserve original markdown syntax\n * Enables HTML→Markdown conversion for quikdown-generated HTML\n */\n\nimport quikdown from './quikdown.js';\n\n/**\n * Create bidirectional version by extending quikdown\n * This wraps quikdown and adds the toMarkdown method\n */\nfunction quikdown_bd(markdown, options = {}) {\n    // Use core quikdown with bidirectional flag to add data-qd attributes\n    return quikdown(markdown, { ...options, bidirectional: true });\n}\n\n// Copy all properties and methods from quikdown (including version)\nObject.keys(quikdown).forEach(key => {\n    quikdown_bd[key] = quikdown[key];\n});\n\n// Add the toMarkdown method for HTML→Markdown conversion\nquikdown_bd.toMarkdown = function(htmlOrElement, options = {}) {\n    // Accept either HTML string or DOM element\n    let container;\n    if (typeof htmlOrElement === 'string') {\n        container = document.createElement('div');\n        container.innerHTML = htmlOrElement;\n    } else if (htmlOrElement instanceof Element) {\n        /* istanbul ignore next - browser-only code path, not testable in jsdom */\n        container = htmlOrElement;\n    } else {\n        return '';\n    }\n    \n    // Walk the DOM tree and reconstruct markdown\n    function walkNode(node, parentContext = {}) {\n        if (node.nodeType === Node.TEXT_NODE) {\n            // Return text content, preserving whitespace where needed\n            return node.textContent;\n        }\n        \n        if (node.nodeType !== Node.ELEMENT_NODE) {\n            return '';\n        }\n        \n        const tag = node.tagName.toLowerCase();\n        const dataQd = node.getAttribute('data-qd');\n        \n        // Process children with context\n        let childContent = '';\n        for (let child of node.childNodes) {\n            childContent += walkNode(child, { parentTag: tag, ...parentContext });\n        }\n        \n        // Determine markdown based on element and attributes\n        switch (tag) {\n            case 'h1':\n            case 'h2':\n            case 'h3':\n            case 'h4':\n            case 'h5':\n            case 'h6':\n                const level = parseInt(tag[1]);\n                const prefix = dataQd || '#'.repeat(level);\n                return `${prefix} ${childContent.trim()}\\n\\n`;\n                \n            case 'strong':\n            case 'b':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const boldMarker = dataQd || '**';\n                return `${boldMarker}${childContent}${boldMarker}`;\n                \n            case 'em':\n            case 'i':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const emMarker = dataQd || '*';\n                return `${emMarker}${childContent}${emMarker}`;\n                \n            case 'del':\n            case 's':\n            case 'strike':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const delMarker = dataQd || '~~';\n                return `${delMarker}${childContent}${delMarker}`;\n                \n            case 'code':\n                // Note: code inside pre is handled directly by the pre case using querySelector\n                if (!childContent) return ''; // Don't add markers for empty content\n                const codeMarker = dataQd || '`';\n                return `${codeMarker}${childContent}${codeMarker}`;\n                \n            case 'pre':\n                const fence = node.getAttribute('data-qd-fence') || dataQd || '```';\n                const lang = node.getAttribute('data-qd-lang') || '';\n                \n                // Check if this was created by a fence plugin with reverse handler\n                if (options.fence_plugin && options.fence_plugin.reverse && lang) {\n                    try {\n                        const result = options.fence_plugin.reverse(node);\n                        if (result && result.content) {\n                            const fenceMarker = result.fence || fence;\n                            const langStr = result.lang || lang;\n                            return `${fenceMarker}${langStr}\\n${result.content}\\n${fenceMarker}\\n\\n`;\n                        }\n                    } catch (err) {\n                        console.warn('Fence reverse handler error:', err);\n                        // Fall through to default handling\n                    }\n                }\n                \n                // Fallback: use data-qd-source if available\n                const source = node.getAttribute('data-qd-source');\n                if (source) {\n                    return `${fence}${lang}\\n${source}\\n${fence}\\n\\n`;\n                }\n                \n                // Final fallback: extract text content\n                const codeEl = node.querySelector('code');\n                const codeContent = codeEl ? codeEl.textContent : childContent;\n                return `${fence}${lang}\\n${codeContent.trimEnd()}\\n${fence}\\n\\n`;\n                \n            case 'blockquote':\n                const quoteMarker = dataQd || '>';\n                const lines = childContent.trim().split('\\n');\n                return lines.map(line => `${quoteMarker} ${line}`).join('\\n') + '\\n\\n';\n                \n            case 'hr':\n                const hrMarker = dataQd || '---';\n                return `${hrMarker}\\n\\n`;\n                \n            case 'br':\n                const brMarker = dataQd || '  ';\n                return `${brMarker}\\n`;\n                \n            case 'a':\n                const linkText = node.getAttribute('data-qd-text') || childContent.trim();\n                const href = node.getAttribute('href') || '';\n                // Check for autolinks\n                if (linkText === href && !dataQd) {\n                    return `<${href}>`;\n                }\n                return `[${linkText}](${href})`;\n                \n            case 'img':\n                const alt = node.getAttribute('data-qd-alt') || node.getAttribute('alt') || '';\n                const src = node.getAttribute('data-qd-src') || node.getAttribute('src') || '';\n                const imgMarker = dataQd || '!';\n                return `${imgMarker}[${alt}](${src})`;\n                \n            case 'ul':\n            case 'ol':\n                return walkList(node, tag === 'ol') + '\\n';\n                \n            case 'li':\n                // Handled by list processor\n                return childContent;\n                \n            case 'table':\n                return walkTable(node) + '\\n\\n';\n                \n            case 'p':\n                // Check if it's actually a paragraph or just a wrapper\n                if (childContent.trim()) {\n                    // Check if paragraph ends with a line that's just whitespace\n                    // This indicates an intentional blank line before the next element\n                    const lines = childContent.split('\\n');\n                    let content = childContent.trim();\n                    \n                    // If the last line(s) are just whitespace, preserve one blank line\n                    if (lines.length > 1) {\n                        let trailingBlankLines = 0;\n                        for (let i = lines.length - 1; i >= 0; i--) {\n                            if (lines[i].trim() === '') {\n                                trailingBlankLines++;\n                            } else {\n                                break;\n                            }\n                        }\n                        if (trailingBlankLines > 0) {\n                            // Add a line with just a space, followed by single newline\n                            // The \\n\\n will be added below for paragraph separation\n                            content = content + '\\n ';\n                            // Only add one newline since we're preserving the space line\n                            return content + '\\n';\n                        }\n                    }\n                    \n                    return content + '\\n\\n';\n                }\n                return '';\n                \n            case 'div':\n                // Check if this was created by a fence plugin with reverse handler\n                const divLang = node.getAttribute('data-qd-lang');\n                const divFence = node.getAttribute('data-qd-fence');\n                \n                if (divLang && options.fence_plugin && options.fence_plugin.reverse) {\n                    try {\n                        const result = options.fence_plugin.reverse(node);\n                        if (result && result.content) {\n                            const fenceMarker = result.fence || divFence || '```';\n                            const langStr = result.lang || divLang;\n                            return `${fenceMarker}${langStr}\\n${result.content}\\n${fenceMarker}\\n\\n`;\n                        }\n                    } catch (err) {\n                        console.warn('Fence reverse handler error:', err);\n                        // Fall through to default handling\n                    }\n                }\n                \n                // Fallback: use data-qd-source if available\n                const divSource = node.getAttribute('data-qd-source');\n                if (divSource && divFence) {\n                    return `${divFence}${divLang || ''}\\n${divSource}\\n${divFence}\\n\\n`;\n                }\n                \n                // Check if it's a mermaid container\n                if (node.classList && node.classList.contains('mermaid-container')) {\n                    const fence = node.getAttribute('data-qd-fence') || '```';\n                    const lang = node.getAttribute('data-qd-lang') || 'mermaid';\n                    \n                    // First check for data-qd-source attribute on the container\n                    const source = node.getAttribute('data-qd-source');\n                    if (source) {\n                        // Decode HTML entities from the attribute (mainly &quot;)\n                        const temp = document.createElement('textarea');\n                        temp.innerHTML = source;\n                        const code = temp.value;\n                        return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                    }\n                    \n                    // Check for source on the pre.mermaid element\n                    const mermaidPre = node.querySelector('pre.mermaid');\n                    if (mermaidPre) {\n                        const preSource = mermaidPre.getAttribute('data-qd-source');\n                        if (preSource) {\n                            const temp = document.createElement('textarea');\n                            temp.innerHTML = preSource;\n                            const code = temp.value;\n                            return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                        }\n                    }\n                    \n                    // Fallback: Look for the legacy .mermaid-source element\n                    const sourceElement = node.querySelector('.mermaid-source');\n                    if (sourceElement) {\n                        // Decode HTML entities\n                        const temp = document.createElement('div');\n                        temp.innerHTML = sourceElement.innerHTML;\n                        const code = temp.textContent;\n                        return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                    }\n                    \n                    // Final fallback: try to extract from the mermaid element (unreliable after rendering)\n                    const mermaidElement = node.querySelector('.mermaid');\n                    if (mermaidElement && mermaidElement.textContent.includes('graph')) {\n                        return `${fence}${lang}\\n${mermaidElement.textContent.trim()}\\n${fence}\\n\\n`;\n                    }\n                }\n                // Check if it's a standalone mermaid diagram (legacy)\n                if (node.classList && node.classList.contains('mermaid')) {\n                    const fence = node.getAttribute('data-qd-fence') || '```';\n                    const lang = node.getAttribute('data-qd-lang') || 'mermaid';\n                    const code = node.textContent.trim();\n                    return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                }\n                // Pass through other divs\n                return childContent;\n            \n            case 'span':\n                // Pass through container elements\n                return childContent;\n                \n            default:\n                return childContent;\n        }\n    }\n    \n    // Walk list elements\n    function walkList(listNode, isOrdered, depth = 0) {\n        let result = '';\n        let index = 1;\n        const indent = '  '.repeat(depth);\n        \n        for (let child of listNode.children) {\n            if (child.tagName !== 'LI') continue;\n            \n            const dataQd = child.getAttribute('data-qd');\n            let marker = dataQd || (isOrdered ? `${index}.` : '-');\n            \n            // Check for task list checkbox\n            const checkbox = child.querySelector('input[type=\"checkbox\"]');\n            if (checkbox) {\n                const checked = checkbox.checked ? 'x' : ' ';\n                marker = '-';\n                // Get text without the checkbox\n                let text = '';\n                for (let node of child.childNodes) {\n                    if (node.nodeType === Node.TEXT_NODE) {\n                        text += node.textContent;\n                    } else if (node.tagName && node.tagName !== 'INPUT') {\n                        text += walkNode(node);\n                    }\n                }\n                result += `${indent}${marker} [${checked}] ${text.trim()}\\n`;\n            } else {\n                let itemContent = '';\n                \n                for (let node of child.childNodes) {\n                    if (node.tagName === 'UL' || node.tagName === 'OL') {\n                        itemContent += walkList(node, node.tagName === 'OL', depth + 1);\n                    } else {\n                        itemContent += walkNode(node);\n                    }\n                }\n                \n                result += `${indent}${marker} ${itemContent.trim()}\\n`;\n            }\n            \n            index++;\n        }\n        \n        return result;\n    }\n    \n    // Walk table elements\n    function walkTable(table) {\n        let result = '';\n        const alignData = table.getAttribute('data-qd-align');\n        const alignments = alignData ? alignData.split(',') : [];\n        \n        // Process header\n        const thead = table.querySelector('thead');\n        if (thead) {\n            const headerRow = thead.querySelector('tr');\n            if (headerRow) {\n                const headers = [];\n                for (let th of headerRow.querySelectorAll('th')) {\n                    headers.push(th.textContent.trim());\n                }\n                result += '| ' + headers.join(' | ') + ' |\\n';\n                \n                // Add separator with alignment\n                const separators = headers.map((_, i) => {\n                    const align = alignments[i] || 'left';\n                    if (align === 'center') return ':---:';\n                    if (align === 'right') return '---:';\n                    return '---';\n                });\n                result += '| ' + separators.join(' | ') + ' |\\n';\n            }\n        }\n        \n        // Process body\n        const tbody = table.querySelector('tbody');\n        if (tbody) {\n            for (let row of tbody.querySelectorAll('tr')) {\n                const cells = [];\n                for (let td of row.querySelectorAll('td')) {\n                    cells.push(td.textContent.trim());\n                }\n                if (cells.length > 0) {\n                    result += '| ' + cells.join(' | ') + ' |\\n';\n                }\n            }\n        }\n        \n        return result.trim();\n    }\n    \n    // Process the DOM tree\n    let markdown = walkNode(container);\n    \n    // Clean up\n    markdown = markdown.replace(/\\n{3,}/g, '\\n\\n'); // Remove excessive newlines\n    markdown = markdown.trim();\n    \n    return markdown;\n};\n\n// Override the configure method to return a bidirectional version\nquikdown_bd.configure = function(options) {\n    return function(markdown) {\n        return quikdown_bd(markdown, options);\n    };\n};\n\n// Set version\n// Version is already copied from quikdown via Object.keys loop\n\n// Export for both module and browser\n/* istanbul ignore next */\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = quikdown_bd;\n}\n\n/* istanbul ignore next */\nif (typeof window !== 'undefined') {\n    window.quikdown_bd = quikdown_bd;\n}\n\nexport default quikdown_bd;","/**\n * Quikdown Editor - A drop-in markdown editor control\n * @version 1.0.5\n * @license BSD-2-Clause\n */\n\nimport quikdown_bd from './quikdown_bd.js';\n\n// Default options\nconst DEFAULT_OPTIONS = {\n    mode: 'split',          // 'source' | 'preview' | 'split'\n    showToolbar: true,\n    showRemoveHR: false,    // Show button to remove horizontal rules (---) \n    theme: 'auto',          // 'light' | 'dark' | 'auto'\n    lazy_linefeeds: false,\n    inline_styles: false,   // Use CSS classes (false) or inline styles (true)\n    debounceDelay: 20,      // Reduced from 100ms for better responsiveness\n    placeholder: 'Start typing markdown...',\n    plugins: {\n        highlightjs: false,\n        mermaid: false\n    },\n    customFences: {}, // { 'language': (code, lang) => html }\n    enableComplexFences: true // Enable CSV tables, math rendering, SVG, etc.\n};\n\n/**\n * Quikdown Editor - A complete markdown editing solution\n */\nclass QuikdownEditor {\n    constructor(container, options = {}) {\n        // Resolve container\n        this.container = typeof container === 'string' \n            ? document.querySelector(container) \n            : container;\n            \n        if (!this.container) {\n            throw new Error('QuikdownEditor: Invalid container');\n        }\n        \n        // Merge options\n        this.options = { ...DEFAULT_OPTIONS, ...options };\n        \n        // State\n        this._markdown = '';\n        this._html = '';\n        this.currentMode = this.options.mode;\n        this.updateTimer = null;\n        \n        // Initialize\n        this.initPromise = this.init();\n    }\n    \n    /**\n     * Initialize the editor\n     */\n    async init() {\n        // Load plugins if requested\n        await this.loadPlugins();\n        \n        // Build UI\n        this.buildUI();\n        \n        // Attach event listeners\n        this.attachEvents();\n        \n        // Apply initial theme\n        this.applyTheme();\n        \n        // Set initial mode\n        this.setMode(this.currentMode);\n        \n        // Set initial content if provided\n        if (this.options.initialContent) {\n            this.setMarkdown(this.options.initialContent);\n        }\n    }\n    \n    /**\n     * Build the editor UI\n     */\n    buildUI() {\n        // Clear container\n        this.container.innerHTML = '';\n        \n        // Add editor class\n        this.container.classList.add('qde-container');\n        \n        // Create toolbar if enabled\n        if (this.options.showToolbar) {\n            this.toolbar = this.createToolbar();\n            this.container.appendChild(this.toolbar);\n        }\n        \n        // Create editor area\n        this.editorArea = document.createElement('div');\n        this.editorArea.className = 'qde-editor';\n        \n        // Create source panel\n        this.sourcePanel = document.createElement('div');\n        this.sourcePanel.className = 'qde-source';\n        \n        this.sourceTextarea = document.createElement('textarea');\n        this.sourceTextarea.className = 'qde-textarea';\n        this.sourceTextarea.placeholder = this.options.placeholder;\n        this.sourcePanel.appendChild(this.sourceTextarea);\n        \n        // Create preview panel\n        this.previewPanel = document.createElement('div');\n        this.previewPanel.className = 'qde-preview';\n        this.previewPanel.contentEditable = true;\n        \n        // Add panels to editor\n        this.editorArea.appendChild(this.sourcePanel);\n        this.editorArea.appendChild(this.previewPanel);\n        this.container.appendChild(this.editorArea);\n        \n        // Add built-in styles if not already present\n        this.injectStyles();\n    }\n    \n    /**\n     * Create toolbar\n     */\n    createToolbar() {\n        const toolbar = document.createElement('div');\n        toolbar.className = 'qde-toolbar';\n        \n        // Mode buttons\n        const modes = ['source', 'split', 'preview'];\n        const modeLabels = { source: 'Source', split: 'Split', preview: 'Rendered' };\n        modes.forEach(mode => {\n            const btn = document.createElement('button');\n            btn.className = 'qde-btn';\n            btn.dataset.mode = mode;\n            btn.textContent = modeLabels[mode];\n            btn.title = `Switch to ${modeLabels[mode]} view`;\n            toolbar.appendChild(btn);\n        });\n        \n        // Spacer\n        const spacer = document.createElement('span');\n        spacer.className = 'qde-spacer';\n        toolbar.appendChild(spacer);\n        \n        // Copy buttons\n        const copyButtons = [\n            { action: 'copy-markdown', text: 'Copy MD', title: 'Copy markdown to clipboard' },\n            { action: 'copy-html', text: 'Copy HTML', title: 'Copy HTML to clipboard' }\n        ];\n        \n        copyButtons.forEach(({ action, text, title }) => {\n            const btn = document.createElement('button');\n            btn.className = 'qde-btn';\n            btn.dataset.action = action;\n            btn.textContent = text;\n            btn.title = title;\n            toolbar.appendChild(btn);\n        });\n        \n        // Remove HR button (if enabled)\n        if (this.options.showRemoveHR) {\n            const removeHRBtn = document.createElement('button');\n            removeHRBtn.className = 'qde-btn';\n            removeHRBtn.dataset.action = 'remove-hr';\n            removeHRBtn.textContent = 'Remove HR';\n            removeHRBtn.title = 'Remove all horizontal rules (---) from markdown';\n            toolbar.appendChild(removeHRBtn);\n        }\n        \n        return toolbar;\n    }\n    \n    /**\n     * Inject built-in styles\n     */\n    injectStyles() {\n        if (document.getElementById('qde-styles')) return;\n        \n        const style = document.createElement('style');\n        style.id = 'qde-styles';\n        style.textContent = `\n            .qde-container {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                border: 1px solid #ddd;\n                border-radius: 4px;\n                overflow: hidden;\n                background: white;\n            }\n            \n            .qde-toolbar {\n                display: flex;\n                align-items: center;\n                padding: 8px;\n                background: #f5f5f5;\n                border-bottom: 1px solid #ddd;\n                gap: 4px;\n            }\n            \n            .qde-btn {\n                padding: 6px 12px;\n                border: 1px solid #ccc;\n                background: white;\n                border-radius: 3px;\n                cursor: pointer;\n                font-size: 14px;\n                transition: all 0.2s;\n            }\n            \n            .qde-btn:hover {\n                background: #e9e9e9;\n                border-color: #999;\n            }\n            \n            .qde-btn.active {\n                background: #007bff;\n                color: white;\n                border-color: #0056b3;\n            }\n            \n            .qde-spacer {\n                flex: 1;\n            }\n            \n            .qde-editor {\n                display: flex;\n                flex: 1;\n                overflow: hidden;\n            }\n            \n            .qde-source, .qde-preview {\n                flex: 1;\n                overflow: auto;\n                padding: 16px;\n            }\n            \n            .qde-source {\n                border-right: 1px solid #ddd;\n            }\n            \n            .qde-textarea {\n                width: 100%;\n                height: 100%;\n                border: none;\n                outline: none;\n                resize: none;\n                font-family: 'Monaco', 'Courier New', monospace;\n                font-size: 14px;\n                line-height: 1.5;\n            }\n            \n            .qde-preview {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                font-size: 16px;\n                line-height: 1.6;\n                outline: none;\n                cursor: text;  /* Standard text cursor */\n            }\n            \n            /* Fence-specific styles */\n            .qde-svg-container {\n                max-width: 100%;\n                overflow: auto;\n            }\n            \n            .qde-svg-container svg {\n                max-width: 100%;\n                height: auto;\n            }\n            \n            .qde-html-container {\n                /* HTML containers inherit background */\n                margin: 12px 0;\n            }\n            \n            .qde-math-container {\n                text-align: center;\n                margin: 16px 0;\n                overflow-x: auto;\n            }\n            \n            /* All tables in preview (both regular markdown and CSV) */\n            .qde-preview table {\n                width: 100%;\n                border-collapse: collapse;\n                margin: 12px 0;\n                font-size: 14px;\n            }\n            \n            .qde-preview table th,\n            .qde-preview table td {\n                border: 1px solid #ddd;\n                padding: 8px;\n            }\n            \n            /* Support for alignment classes from quikdown */\n            .qde-preview .quikdown-left { text-align: left; }\n            .qde-preview .quikdown-center { text-align: center; }\n            .qde-preview .quikdown-right { text-align: right; }\n            \n            .qde-preview table th {\n                background: #f5f5f5;\n                font-weight: bold;\n            }\n            \n            .qde-preview table tr:nth-child(even) {\n                background: #f9f9f9;\n            }\n            \n            /* Specific to CSV-generated tables */\n            .qde-data-table {\n                /* Can add specific CSV table styles here if needed */\n            }\n            \n            .qde-json {\n                /* Let highlight.js handle styling */\n                overflow-x: auto;\n            }\n            \n            .qde-error {\n                background: #fee;\n                border: 1px solid #fcc;\n                color: #c00;\n                padding: 8px;\n                border-radius: 4px;\n                font-family: monospace;\n                font-size: 12px;\n            }\n            \n            /* Read-only complex fence blocks in preview */\n            .qde-preview [contenteditable=\"false\"] {\n                cursor: auto;  /* Use automatic cursor (arrow for non-text) */\n                user-select: text;\n                position: relative;\n            }\n            \n            /* Ensure proper cursor for editable text elements */\n            .qde-preview p,\n            .qde-preview h1,\n            .qde-preview h2,\n            .qde-preview h3,\n            .qde-preview h4,\n            .qde-preview h5,\n            .qde-preview h6,\n            .qde-preview li,\n            .qde-preview td,\n            .qde-preview th,\n            .qde-preview blockquote,\n            .qde-preview pre[contenteditable=\"true\"],\n            .qde-preview code[contenteditable=\"true\"] {\n                cursor: text;\n            }\n            \n            \n            /* Non-editable complex renderers */\n            .qde-preview .qde-svg-container[contenteditable=\"false\"],\n            .qde-preview .qde-html-container[contenteditable=\"false\"],\n            .qde-preview .qde-math-container[contenteditable=\"false\"],\n            .qde-preview .mermaid[contenteditable=\"false\"] {\n                opacity: 0.98;\n            }\n            \n            /* Subtle hover effect for read-only blocks */\n            .qde-preview [contenteditable=\"false\"]:hover::after {\n                content: \"Read-only\";\n                position: absolute;\n                top: 2px;\n                right: 2px;\n                font-size: 10px;\n                color: #999;\n                background: rgba(255, 255, 255, 0.9);\n                padding: 2px 4px;\n                border-radius: 2px;\n                pointer-events: none;\n            }\n            \n            /* Fix list padding in preview */\n            .qde-preview ul,\n            .qde-preview ol {\n                padding-left: 2em;\n                margin: 0.5em 0;\n            }\n            \n            .qde-preview li {\n                margin: 0.25em 0;\n            }\n            \n            /* Mode-specific visibility */\n            .qde-mode-source .qde-preview { display: none; }\n            .qde-mode-source .qde-source { border-right: none; }\n            .qde-mode-preview .qde-source { display: none; }\n            .qde-mode-split .qde-source,\n            .qde-mode-split .qde-preview { display: block; }\n            \n            /* Dark theme */\n            .qde-dark {\n                background: #1e1e1e;\n                color: #e0e0e0;\n            }\n            \n            .qde-dark .qde-toolbar {\n                background: #2d2d2d;\n                border-color: #444;\n            }\n            \n            .qde-dark .qde-btn {\n                background: #3a3a3a;\n                color: #e0e0e0;\n                border-color: #555;\n            }\n            \n            .qde-dark .qde-btn:hover {\n                background: #4a4a4a;\n            }\n            \n            .qde-dark .qde-source {\n                border-color: #444;\n            }\n            \n            .qde-dark .qde-textarea {\n                background: #1e1e1e;\n                color: #e0e0e0;\n            }\n            \n            .qde-dark .qde-preview {\n                background: #1e1e1e;\n                color: #e0e0e0;\n            }\n            \n            /* Dark mode table styles */\n            .qde-dark .qde-preview table th,\n            .qde-dark .qde-preview table td {\n                border-color: #3a3a3a;\n            }\n            \n            .qde-dark .qde-preview table th {\n                background: #2d2d2d;\n            }\n            \n            .qde-dark .qde-preview table tr:nth-child(even) {\n                background: #252525;\n            }\n            \n            /* Mobile responsive */\n            @media (max-width: 768px) {\n                .qde-mode-split .qde-editor {\n                    flex-direction: column;\n                }\n                \n                .qde-mode-split .qde-source {\n                    border-right: none;\n                    border-bottom: 1px solid #ddd;\n                }\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Attach event listeners\n     */\n    attachEvents() {\n        // Source textarea input\n        this.sourceTextarea.addEventListener('input', () => {\n            this.handleSourceInput();\n        });\n        \n        // Preview contenteditable input\n        this.previewPanel.addEventListener('input', () => {\n            this.handlePreviewInput();\n        });\n        \n        // Toolbar buttons\n        if (this.toolbar) {\n            this.toolbar.addEventListener('click', (e) => {\n                const btn = e.target.closest('.qde-btn');\n                if (!btn) return;\n                \n                if (btn.dataset.mode) {\n                    this.setMode(btn.dataset.mode);\n                } else if (btn.dataset.action) {\n                    this.handleAction(btn.dataset.action);\n                }\n            });\n        }\n        \n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (e.ctrlKey || e.metaKey) {\n                switch(e.key) {\n                    case '1':\n                        e.preventDefault();\n                        this.setMode('source');\n                        break;\n                    case '2':\n                        e.preventDefault();\n                        this.setMode('split');\n                        break;\n                    case '3':\n                        e.preventDefault();\n                        this.setMode('preview');\n                        break;\n                }\n            }\n        });\n    }\n    \n    /**\n     * Handle source textarea input\n     */\n    handleSourceInput() {\n        clearTimeout(this.updateTimer);\n        this.updateTimer = setTimeout(() => {\n            this.updateFromMarkdown(this.sourceTextarea.value);\n        }, this.options.debounceDelay);\n    }\n    \n    /**\n     * Handle preview panel input\n     */\n    handlePreviewInput() {\n        clearTimeout(this.updateTimer);\n        this.updateTimer = setTimeout(() => {\n            this.updateFromHTML();\n        }, this.options.debounceDelay);\n    }\n    \n    /**\n     * Update from markdown source\n     */\n    updateFromMarkdown(markdown) {\n        this._markdown = markdown || '';\n        \n        // Show placeholder if empty\n        if (!this._markdown.trim()) {\n            this._html = '';\n            if (this.currentMode !== 'source') {\n                this.previewPanel.innerHTML = '<div style=\"color: #999; font-style: italic; padding: 16px;\">Start typing markdown in the source panel...</div>';\n            }\n        } else {\n            this._html = quikdown_bd(markdown, {\n                fence_plugin: this.createFencePlugin(),\n                lazy_linefeeds: this.options.lazy_linefeeds,\n                inline_styles: this.options.inline_styles\n            });\n            \n            // Update preview if visible\n            if (this.currentMode !== 'source') {\n                this.previewPanel.innerHTML = this._html;\n                // Make all fence blocks non-editable\n                this.makeFencesNonEditable();\n            }\n        }\n        \n        // Trigger change event\n        if (this.options.onChange) {\n            this.options.onChange(this._markdown, this._html);\n        }\n    }\n    \n    /**\n     * Update from HTML preview\n     */\n    updateFromHTML() {\n        // Clone the preview panel to avoid modifying the actual DOM\n        const clonedPanel = this.previewPanel.cloneNode(true);\n        \n        // Pre-process special elements on the clone\n        this.preprocessSpecialElements(clonedPanel);\n        \n        this._html = this.previewPanel.innerHTML;\n        this._markdown = quikdown_bd.toMarkdown(clonedPanel, {\n            fence_plugin: this.options.fence_plugin\n        });\n        \n        // Update source if visible\n        if (this.currentMode !== 'preview') {\n            this.sourceTextarea.value = this._markdown;\n        }\n        \n        // Trigger change event\n        if (this.options.onChange) {\n            this.options.onChange(this._markdown, this._html);\n        }\n    }\n    \n    /**\n     * Pre-process special elements before markdown conversion\n     */\n    preprocessSpecialElements(panel) {\n        if (!panel) return;\n        \n        \n        // Restore non-editable complex fences from their data attributes\n        const complexFences = panel.querySelectorAll('[contenteditable=\"false\"][data-qd-source]');\n        complexFences.forEach(element => {\n            const source = element.getAttribute('data-qd-source');\n            const fence = element.getAttribute('data-qd-fence') || '```';\n            const lang = element.getAttribute('data-qd-lang') || '';\n            \n            // Create a pre element with the original source\n            const pre = document.createElement('pre');\n            pre.setAttribute('data-qd-fence', fence);\n            if (lang) pre.setAttribute('data-qd-lang', lang);\n            const code = document.createElement('code');\n            // The source is already the original unescaped content when using setAttribute\n            // No need to unescape since browser handles it automatically\n            code.textContent = source;\n            pre.appendChild(code);\n            \n            // Replace the complex element with pre\n            element.parentNode.replaceChild(pre, element);\n        });\n        \n        // Convert CSV tables back to CSV fence blocks (these ARE editable)\n        const csvTables = panel.querySelectorAll('table.qde-csv-table[data-qd-lang]');\n        csvTables.forEach(table => {\n            const lang = table.getAttribute('data-qd-lang');\n            if (!lang || !['csv', 'psv', 'tsv'].includes(lang)) return;\n            \n            const delimiter = lang === 'csv' ? ',' : lang === 'psv' ? '|' : '\\t';\n            \n            // Extract data from table\n            let csv = '';\n            \n            // Get headers\n            const headers = [];\n            const headerCells = table.querySelectorAll('thead th');\n            headerCells.forEach(th => {\n                const text = th.textContent.trim();\n                // Quote if contains delimiter or quotes\n                const needsQuoting = text.includes(delimiter) || text.includes('\"') || text.includes('\\n');\n                headers.push(needsQuoting ? `\"${text.replace(/\"/g, '\"\"')}\"` : text);\n            });\n            csv += headers.join(delimiter) + '\\n';\n            \n            // Get rows\n            const rows = table.querySelectorAll('tbody tr');\n            rows.forEach(tr => {\n                const cells = [];\n                tr.querySelectorAll('td').forEach(td => {\n                    const text = td.textContent.trim();\n                    const needsQuoting = text.includes(delimiter) || text.includes('\"') || text.includes('\\n');\n                    cells.push(needsQuoting ? `\"${text.replace(/\"/g, '\"\"')}\"` : text);\n                });\n                csv += cells.join(delimiter) + '\\n';\n            });\n            \n            // Create a pre element with the CSV data\n            const pre = document.createElement('pre');\n            pre.setAttribute('data-qd-fence', '```');\n            pre.setAttribute('data-qd-lang', lang);\n            const code = document.createElement('code');\n            code.textContent = csv.trim();\n            pre.appendChild(code);\n            \n            // Replace table with pre\n            table.parentNode.replaceChild(pre, table);\n        });\n    }\n    \n    /**\n     * Create fence plugin for syntax highlighting\n     */\n    createFencePlugin() {\n        const render = (code, lang) => {\n            // Check custom fences first (they take precedence)\n            if (this.options.customFences && this.options.customFences[lang]) {\n                try {\n                    return this.options.customFences[lang](code, lang);\n                } catch (err) {\n                    console.error(`Custom fence plugin error for ${lang}:`, err);\n                    return `<pre><code class=\"language-${lang}\">${this.escapeHtml(code)}</code></pre>`;\n                }\n            }\n            \n            // For bidirectional editing, only apply syntax highlighting\n            // Skip complex transformations that break round-trip conversion\n            const skipComplexRendering = !this.options.enableComplexFences;\n            \n            if (!skipComplexRendering) {\n                // Built-in lazy loading fence handlers (disabled for now)\n                switch(lang) {\n                    case 'svg':\n                        return this.renderSVG(code);\n                        \n                    case 'html':\n                        return this.renderHTML(code);\n                        \n                    case 'math':\n                    case 'katex':\n                    case 'tex':\n                    case 'latex':\n                        return this.renderMath(code, lang);\n                        \n                    case 'csv':\n                    case 'psv':\n                    case 'tsv':\n                        return this.renderTable(code, lang);\n                        \n                    case 'json':\n                    case 'json5':\n                        return this.renderJSON(code, lang);\n                        \n                    case 'mermaid':\n                        if (window.mermaid) {\n                            return this.renderMermaid(code);\n                        }\n                        break;\n                }\n            }\n            \n            // Syntax highlighting support - keep editable for bidirectional\n            if (window.hljs && lang && hljs.getLanguage(lang)) {\n                const highlighted = hljs.highlight(code, { language: lang }).value;\n                // Don't add contenteditable=\"false\" - the bidirectional system can extract text from the highlighted code\n                return `<pre data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\"><code class=\"hljs language-${lang}\">${highlighted}</code></pre>`;\n            }\n            \n            // Default: let quikdown handle it\n            return undefined;\n        };\n        \n        // Return object format for v1.1.0 API\n        return { render };\n    }\n    \n    /**\n     * Render SVG content\n     */\n    renderSVG(code) {\n        try {\n            // Basic SVG validation\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(code, 'image/svg+xml');\n            const parseError = doc.querySelector('parsererror');\n            \n            if (parseError) {\n                throw new Error('Invalid SVG');\n            }\n            \n            // Sanitize SVG by removing script tags and event handlers\n            const svg = doc.documentElement;\n            svg.querySelectorAll('script').forEach(el => el.remove());\n            \n            // Remove event handlers\n            const walker = document.createTreeWalker(svg, NodeFilter.SHOW_ELEMENT);\n            let node;\n            while (node = walker.nextNode()) {\n                for (let i = node.attributes.length - 1; i >= 0; i--) {\n                    const attr = node.attributes[i];\n                    if (attr.name.startsWith('on') || attr.value.includes('javascript:')) {\n                        node.removeAttribute(attr.name);\n                    }\n                }\n            }\n            \n            // Create container element programmatically to avoid attribute escaping issues\n            const container = document.createElement('div');\n            container.className = 'qde-svg-container';\n            container.contentEditable = 'false';\n            container.setAttribute('data-qd-fence', '```');\n            container.setAttribute('data-qd-lang', 'svg');\n            container.setAttribute('data-qd-source', code);  // No escaping needed when using setAttribute!\n            container.innerHTML = new XMLSerializer().serializeToString(svg);\n            \n            // Return the HTML string\n            return container.outerHTML;\n        } catch (err) {\n            const errorContainer = document.createElement('pre');\n            errorContainer.className = 'qde-error';\n            errorContainer.contentEditable = 'false';\n            errorContainer.setAttribute('data-qd-fence', '```');\n            errorContainer.setAttribute('data-qd-lang', 'svg');\n            errorContainer.textContent = `Invalid SVG: ${err.message}`;\n            return errorContainer.outerHTML;\n        }\n    }\n    \n    /**\n     * Render HTML content with DOMPurify if available\n     */\n    renderHTML(code) {\n        const id = `html-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        \n        // If DOMPurify is loaded, use it\n        if (window.DOMPurify) {\n            const clean = DOMPurify.sanitize(code);\n            \n            // Create container programmatically\n            const container = document.createElement('div');\n            container.className = 'qde-html-container';\n            container.contentEditable = 'false';\n            container.setAttribute('data-qd-fence', '```');\n            container.setAttribute('data-qd-lang', 'html');\n            container.setAttribute('data-qd-source', code);\n            container.innerHTML = clean;\n            \n            return container.outerHTML;\n        }\n        \n        // Try to lazy load DOMPurify\n        this.lazyLoadLibrary(\n            'DOMPurify',\n            () => window.DOMPurify,\n            'https://unpkg.com/dompurify/dist/purify.min.js'\n        ).then(loaded => {\n            if (loaded) {\n                const element = document.getElementById(id);\n                if (element) {\n                    const clean = DOMPurify.sanitize(code);\n                    element.innerHTML = clean;\n                    // Update attributes after loading\n                    element.setAttribute('data-qd-source', code);\n                    element.setAttribute('data-qd-fence', '```');\n                    element.setAttribute('data-qd-lang', 'html');\n                }\n            }\n        });\n        \n        // Return placeholder with bidirectional attributes - non-editable\n        const placeholder = document.createElement('div');\n        placeholder.id = id;\n        placeholder.className = 'qde-html-container';\n        placeholder.contentEditable = 'false';\n        placeholder.setAttribute('data-qd-fence', '```');\n        placeholder.setAttribute('data-qd-lang', 'html');\n        placeholder.setAttribute('data-qd-source', code);\n        const pre = document.createElement('pre');\n        pre.textContent = code;\n        placeholder.appendChild(pre);\n        \n        return placeholder.outerHTML;\n    }\n    \n    /**\n     * Render math with KaTeX if available\n     */\n    renderMath(code, lang) {\n        const id = `math-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        \n        // If KaTeX is loaded, use it\n        if (window.katex) {\n            try {\n                const rendered = katex.renderToString(code, {\n                    displayMode: true,\n                    throwOnError: false\n                });\n                \n                // Create container programmatically\n                const container = document.createElement('div');\n                container.className = 'qde-math-container';\n                container.contentEditable = 'false';\n                container.setAttribute('data-qd-fence', '```');\n                container.setAttribute('data-qd-lang', lang);\n                container.setAttribute('data-qd-source', code);\n                container.innerHTML = rendered;\n                \n                return container.outerHTML;\n            } catch (err) {\n                const errorContainer = document.createElement('pre');\n                errorContainer.className = 'qde-error';\n                errorContainer.contentEditable = 'false';\n                errorContainer.setAttribute('data-qd-fence', '```');\n                errorContainer.setAttribute('data-qd-lang', lang);\n                errorContainer.setAttribute('data-qd-source', code);\n                errorContainer.textContent = `Math error: ${err.message}`;\n                return errorContainer.outerHTML;\n            }\n        }\n        \n        // Try to lazy load KaTeX\n        this.lazyLoadLibrary(\n            'KaTeX',\n            () => window.katex,\n            'https://unpkg.com/katex/dist/katex.min.js',\n            'https://unpkg.com/katex/dist/katex.min.css'\n        ).then(loaded => {\n            if (loaded) {\n                const element = document.getElementById(id);\n                if (element) {\n                    try {\n                        katex.render(code, element, {\n                            displayMode: true,\n                            throwOnError: false\n                        });\n                        // Update attributes after rendering\n                        element.setAttribute('data-qd-source', code);\n                        element.setAttribute('data-qd-fence', '```');\n                        element.setAttribute('data-qd-lang', lang);\n                    } catch (err) {\n                        element.innerHTML = `<pre class=\"qde-error\">Math error: ${this.escapeHtml(err.message)}</pre>`;\n                    }\n                }\n            }\n        });\n        \n        // Return placeholder with bidirectional attributes - non-editable\n        const placeholder = document.createElement('div');\n        placeholder.id = id;\n        placeholder.className = 'qde-math-container';\n        placeholder.contentEditable = 'false';\n        placeholder.setAttribute('data-qd-fence', '```');\n        placeholder.setAttribute('data-qd-lang', lang);\n        placeholder.setAttribute('data-qd-source', code);\n        const pre = document.createElement('pre');\n        pre.textContent = code;\n        placeholder.appendChild(pre);\n        \n        return placeholder.outerHTML;\n    }\n    \n    /**\n     * Render CSV/PSV/TSV as HTML table\n     */\n    renderTable(code, lang) {\n        const escapedCode = this.escapeHtml(code);\n        try {\n            const delimiter = lang === 'csv' ? ',' : lang === 'psv' ? '|' : '\\t';\n            const lines = code.trim().split('\\n');\n            \n            if (lines.length === 0) {\n                return `<pre data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\" data-qd-source=\"${escapedCode}\">${escapedCode}</pre>`;\n            }\n            \n            // CSV tables CAN be editable - we'll convert HTML table back to CSV\n            // Don't need data-qd-source since we convert the table structure back to CSV\n            let html = `<table class=\"qde-data-table qde-csv-table\" data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\">`;\n            \n            // Parse header\n            const header = this.parseCSVLine(lines[0], delimiter);\n            html += '<thead><tr>';\n            header.forEach(cell => {\n                html += `<th>${this.escapeHtml(cell.trim())}</th>`;\n            });\n            html += '</tr></thead>';\n            \n            // Parse body\n            if (lines.length > 1) {\n                html += '<tbody>';\n                for (let i = 1; i < lines.length; i++) {\n                    const row = this.parseCSVLine(lines[i], delimiter);\n                    html += '<tr>';\n                    row.forEach(cell => {\n                        html += `<td>${this.escapeHtml(cell.trim())}</td>`;\n                    });\n                    html += '</tr>';\n                }\n                html += '</tbody>';\n            }\n            \n            html += '</table>';\n            return html;\n        } catch (err) {\n            return `<pre data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\" data-qd-source=\"${escapedCode}\">${escapedCode}</pre>`;\n        }\n    }\n    \n    /**\n     * Parse CSV line handling quoted values\n     */\n    parseCSVLine(line, delimiter) {\n        const result = [];\n        let current = '';\n        let inQuotes = false;\n        \n        for (let i = 0; i < line.length; i++) {\n            const char = line[i];\n            const nextChar = line[i + 1];\n            \n            if (char === '\"') {\n                if (inQuotes && nextChar === '\"') {\n                    current += '\"';\n                    i++; // Skip next quote\n                } else {\n                    inQuotes = !inQuotes;\n                }\n            } else if (char === delimiter && !inQuotes) {\n                result.push(current);\n                current = '';\n            } else {\n                current += char;\n            }\n        }\n        \n        result.push(current);\n        return result;\n    }\n    \n    /**\n     * Render JSON with syntax highlighting\n     */\n    renderJSON(code, lang) {\n        // If highlight.js is available, use it for all JSON\n        if (window.hljs && hljs.getLanguage('json')) {\n            try {\n                // Try to format if valid JSON\n                let toHighlight = code;\n                try {\n                    const data = JSON.parse(code);\n                    toHighlight = JSON.stringify(data, null, 2);\n                } catch (e) {\n                    // Use original if not valid JSON\n                }\n                \n                const highlighted = hljs.highlight(toHighlight, { language: 'json' }).value;\n                return `<pre class=\"qde-json\" data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\"><code class=\"hljs language-json\">${highlighted}</code></pre>`;\n            } catch (e) {\n                // Fall through if highlighting fails\n            }\n        }\n        \n        // No highlighting available - return plain\n        return `<pre class=\"qde-json\" data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\">${this.escapeHtml(code)}</pre>`;\n    }\n    \n    /**\n     * Render Mermaid diagram\n     */\n    renderMermaid(code) {\n        const id = `mermaid-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        setTimeout(() => {\n            const element = document.getElementById(id);\n            if (element && window.mermaid) {\n                mermaid.render(id + '-svg', code).then(result => {\n                    element.innerHTML = result.svg;\n                }).catch(err => {\n                    element.innerHTML = `<pre>Error rendering diagram: ${err.message}</pre>`;\n                });\n            }\n        }, 0);\n        \n        // Create container programmatically\n        const container = document.createElement('div');\n        container.id = id;\n        container.className = 'mermaid';\n        container.contentEditable = 'false';\n        container.setAttribute('data-qd-source', code);\n        container.setAttribute('data-qd-fence', '```');\n        container.setAttribute('data-qd-lang', 'mermaid');\n        container.textContent = 'Loading diagram...';\n        \n        return container.outerHTML;\n    }\n    \n    /**\n     * Escape HTML for attributes\n     */\n    escapeHtml(text) {\n        return (text ?? \"\").replace(/[&\"'<>]/g, m => \n            ({'&':'&amp;','\"':'&quot;',\"'\":'&#39;','<':'&lt;','>':'&gt;'}[m]));\n    }\n    \n    /**\n     * Make complex fence blocks non-editable\n     */\n    makeFencesNonEditable() {\n        if (!this.previewPanel) return;\n        \n        // Only make specific complex fence types non-editable\n        // SVG, HTML, Math, Mermaid already have contenteditable=\"false\" set\n        // Syntax-highlighted code also has it set\n        \n        // Don't make regular code blocks or tables non-editable\n        // They can be edited and properly round-trip\n    }\n    \n    /**\n     * Load plugins dynamically\n     */\n    async loadPlugins() {\n        const promises = [];\n        \n        // Load highlight.js (check if already loaded)\n        if (this.options.plugins.highlightjs && !window.hljs) {\n            promises.push(\n                this.loadScript('https://unpkg.com/@highlightjs/cdn-assets/highlight.min.js'),\n                this.loadCSS('https://unpkg.com/@highlightjs/cdn-assets/styles/github.min.css')\n            );\n        }\n        \n        // Load mermaid (check if already loaded)\n        if (this.options.plugins.mermaid && !window.mermaid) {\n            promises.push(\n                this.loadScript('https://unpkg.com/mermaid/dist/mermaid.min.js').then(() => {\n                    if (window.mermaid) {\n                        mermaid.initialize({ startOnLoad: false });\n                    }\n                })\n            );\n        }\n        \n        await Promise.all(promises);\n    }\n    \n    /**\n     * Lazy load library if not already loaded\n     */\n    async lazyLoadLibrary(name, check, scriptUrl, cssUrl = null) {\n        // Check if library is already loaded\n        if (check()) {\n            return true;\n        }\n        \n        try {\n            const promises = [];\n            \n            // Load script\n            if (scriptUrl) {\n                promises.push(this.loadScript(scriptUrl));\n            }\n            \n            // Load CSS if provided\n            if (cssUrl) {\n                promises.push(this.loadCSS(cssUrl));\n            }\n            \n            await Promise.all(promises);\n            \n            // Verify library loaded\n            return check();\n        } catch (err) {\n            console.error(`Failed to load ${name}:`, err);\n            return false;\n        }\n    }\n    \n    /**\n     * Load external script\n     */\n    loadScript(src) {\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n            script.src = src;\n            script.onload = resolve;\n            script.onerror = reject;\n            document.head.appendChild(script);\n        });\n    }\n    \n    /**\n     * Load external CSS\n     */\n    loadCSS(href) {\n        return new Promise((resolve) => {\n            const link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.href = href;\n            link.onload = resolve;\n            document.head.appendChild(link);\n            // Resolve anyway after timeout (CSS doesn't always fire onload)\n            setTimeout(resolve, 1000);\n        });\n    }\n    \n    /**\n     * Apply theme\n     */\n    applyTheme() {\n        const theme = this.options.theme;\n        \n        if (theme === 'auto') {\n            // Check system preference\n            const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n            this.container.classList.toggle('qde-dark', isDark);\n            \n            // Listen for changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {\n                this.container.classList.toggle('qde-dark', e.matches);\n            });\n        } else {\n            this.container.classList.toggle('qde-dark', theme === 'dark');\n        }\n    }\n    \n    /**\n     * Set lazy linefeeds option\n     * @param {boolean} enabled - Whether to enable lazy linefeeds\n     */\n    setLazyLinefeeds(enabled) {\n        this.options.lazy_linefeeds = enabled;\n        // Re-render if we have content\n        if (this._markdown) {\n            this.updateFromSource();\n        }\n    }\n    \n    /**\n     * Get lazy linefeeds option\n     * @returns {boolean}\n     */\n    getLazyLinefeeds() {\n        return this.options.lazy_linefeeds;\n    }\n    \n    /**\n     * Set debounce delay for input updates\n     * @param {number} delay - Delay in milliseconds (0 for instant)\n     */\n    setDebounceDelay(delay) {\n        this.options.debounceDelay = Math.max(0, delay);\n    }\n    \n    /**\n     * Get current debounce delay\n     * @returns {number} Delay in milliseconds\n     */\n    getDebounceDelay() {\n        return this.options.debounceDelay;\n    }\n    \n    /**\n     * Set editor mode\n     */\n    setMode(mode) {\n        if (!['source', 'preview', 'split'].includes(mode)) return;\n        \n        this.currentMode = mode;\n        this.container.className = `qde-container qde-mode-${mode}`;\n        \n        // Update toolbar buttons\n        if (this.toolbar) {\n            this.toolbar.querySelectorAll('.qde-btn[data-mode]').forEach(btn => {\n                btn.classList.toggle('active', btn.dataset.mode === mode);\n            });\n        }\n        \n        // Apply theme class\n        if (this.container.classList.contains('qde-dark')) {\n            this.container.classList.add('qde-dark');\n        }\n        \n        // Make fence blocks non-editable when showing preview\n        if (mode !== 'source') {\n            setTimeout(() => this.makeFencesNonEditable(), 0);\n        }\n        \n        // Trigger mode change event\n        if (this.options.onModeChange) {\n            this.options.onModeChange(mode);\n        }\n    }\n    \n    /**\n     * Handle toolbar actions\n     */\n    handleAction(action) {\n        switch(action) {\n            case 'copy-markdown':\n                this.copy('markdown');\n                break;\n            case 'copy-html':\n                this.copy('html');\n                break;\n            case 'remove-hr':\n                this.removeHR();\n                break;\n        }\n    }\n    \n    /**\n     * Copy content to clipboard\n     */\n    async copy(type) {\n        const content = type === 'markdown' ? this._markdown : this._html;\n        \n        try {\n            await navigator.clipboard.writeText(content);\n            \n            // Visual feedback\n            const btn = this.toolbar.querySelector(`[data-action=\"copy-${type}\"]`);\n            if (btn) {\n                const originalText = btn.textContent;\n                btn.textContent = 'Copied!';\n                setTimeout(() => {\n                    btn.textContent = originalText;\n                }, 1500);\n            }\n        } catch (err) {\n            console.error('Failed to copy:', err);\n        }\n    }\n    \n    // Public API\n    \n    /**\n     * Get current markdown\n     */\n    get markdown() {\n        return this._markdown;\n    }\n    \n    /**\n     * Set markdown content\n     */\n    set markdown(value) {\n        this.setMarkdown(value);\n    }\n    \n    /**\n     * Get current HTML\n     */\n    get html() {\n        return this._html;\n    }\n    \n    /**\n     * Get current mode\n     */\n    get mode() {\n        return this.currentMode;\n    }\n    \n    /**\n     * Set markdown content\n     */\n    async setMarkdown(markdown) {\n        // Wait for initialization if needed\n        if (this.initPromise) {\n            await this.initPromise;\n        }\n        \n        this._markdown = markdown;\n        if (this.sourceTextarea) {\n            this.sourceTextarea.value = markdown;\n        }\n        this.updateFromMarkdown(markdown);\n    }\n    \n    /**\n     * Get markdown content\n     */\n    getMarkdown() {\n        return this._markdown;\n    }\n    \n    /**\n     * Get HTML content\n     */\n    getHTML() {\n        return this._html;\n    }\n    \n    /**\n     * Remove all horizontal rules (---) from markdown\n     */\n    async removeHR() {\n        // Remove standalone HR lines (3 or more dashes/underscores/asterisks)\n        // Matches: ---, ___, ***, ----, etc. with optional spaces\n        const cleaned = this._markdown\n            .split('\\n')\n            .filter(line => {\n                // Keep lines that aren't just HR patterns\n                const trimmed = line.trim();\n                // Match HR patterns: 3+ of -, _, or * with optional spaces between\n                return !(/^[-_*](\\s*[-_*]){2,}\\s*$/.test(trimmed));\n            })\n            .join('\\n');\n        \n        // Update the markdown\n        await this.setMarkdown(cleaned);\n        \n        // Visual feedback if toolbar button exists\n        const btn = this.toolbar?.querySelector('[data-action=\"remove-hr\"]');\n        if (btn) {\n            const originalText = btn.textContent;\n            btn.textContent = 'Removed!';\n            setTimeout(() => {\n                btn.textContent = originalText;\n            }, 1500);\n        }\n    }\n    \n    /**\n     * Destroy the editor\n     */\n    destroy() {\n        // Clear timers\n        clearTimeout(this.updateTimer);\n        \n        // Clear container\n        this.container.innerHTML = '';\n        this.container.classList.remove('qde-container', 'qde-dark');\n        \n        // Remove injected styles (only if no other editors exist)\n        const otherEditors = document.querySelectorAll('.qde-container');\n        if (otherEditors.length === 0) {\n            const style = document.getElementById('qde-styles');\n            if (style) style.remove();\n        }\n    }\n}\n\n// Export\nexport default QuikdownEditor;\n\n// Export for CommonJS (needed for bundled ESM to work with Jest)\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = QuikdownEditor;\n}\n\n// Also export for UMD builds\nif (typeof window !== 'undefined') {\n    window.QuikdownEditor = QuikdownEditor;\n}"],"names":["CLASS_PREFIX","PLACEHOLDER_CB","ESC_MAP","QUIKDOWN_STYLES","h1","h2","h3","h4","h5","h6","pre","code","blockquote","table","th","td","hr","img","a","strong","em","del","ul","ol","li","quikdown","markdown","options","fence_plugin","inline_styles","bidirectional","lazy_linefeeds","getAttr","styles","tag","additionalStyle","style","includes","replace","trim","endsWith","classAttr","createGetAttr","escapeHtml","text","m","dataQd","marker","sanitizeUrl","url","allowUnsafe","trimmedUrl","lowerUrl","toLowerCase","dangerousProtocols","protocol","startsWith","html","codeBlocks","inlineCodes","match","fence","lang","placeholder","length","langTrimmed","render","push","trimEnd","custom","hasReverse","reverse","lines","split","result","inTable","tableLines","i","line","test","tableHtml","buildTable","join","processTable","hashes","content","level","listStack","indent","Math","floor","isOrdered","listType","listItemContent","taskListClass","taskMatch","checked","taskContent","isChecked","list","pop","type","currentList","liAttr","processLists","alt","src","sanitizedSrc","allow_unsafe_urls","altAttr","srcAttr","href","sanitizedHref","rel","textAttr","prefix","sanitizedUrl","forEach","pattern","blocks","bi","b","offset","substring","RegExp","replacement","block","undefined","langClass","codeAttr","langAttr","fenceAttr","processInlineMarkdown","separatorIndex","headerLines","slice","bodyLines","alignments","map","cell","trimmed","alignStyle","processedCell","quikdown_bd","emitStyles","theme","themeOverrides","_textColor","css","Object","entries","themedStyle","oldColor","newColor","configure","version","module","exports","window","keys","key","toMarkdown","htmlOrElement","container","document","createElement","innerHTML","Element","walkNode","node","parentContext","nodeType","Node","TEXT_NODE","textContent","ELEMENT_NODE","tagName","getAttribute","childContent","child","childNodes","parentTag","parseInt","repeat","boldMarker","emMarker","delMarker","codeMarker","fenceMarker","err","console","warn","source","codeEl","querySelector","quoteMarker","linkText","walkList","alignData","thead","headerRow","headers","querySelectorAll","_","align","tbody","row","cells","walkTable","trailingBlankLines","divLang","divFence","divSource","classList","contains","temp","value","mermaidPre","preSource","sourceElement","mermaidElement","listNode","depth","index","children","checkbox","itemContent","DEFAULT_OPTIONS","mode","showToolbar","showRemoveHR","debounceDelay","plugins","highlightjs","mermaid","customFences","enableComplexFences","QuikdownEditor","constructor","this","Error","_markdown","_html","currentMode","updateTimer","initPromise","init","loadPlugins","buildUI","attachEvents","applyTheme","setMode","initialContent","setMarkdown","add","toolbar","createToolbar","appendChild","editorArea","className","sourcePanel","sourceTextarea","previewPanel","contentEditable","injectStyles","modeLabels","preview","btn","dataset","title","spacer","action","removeHRBtn","getElementById","id","head","addEventListener","handleSourceInput","handlePreviewInput","e","target","closest","handleAction","ctrlKey","metaKey","preventDefault","clearTimeout","setTimeout","updateFromMarkdown","updateFromHTML","createFencePlugin","makeFencesNonEditable","onChange","clonedPanel","cloneNode","preprocessSpecialElements","panel","element","setAttribute","parentNode","replaceChild","delimiter","csv","needsQuoting","tr","error","renderSVG","renderHTML","renderMath","renderTable","renderJSON","renderMermaid","hljs","getLanguage","highlight","language","doc","DOMParser","parseFromString","svg","documentElement","el","remove","walker","createTreeWalker","NodeFilter","SHOW_ELEMENT","nextNode","attributes","attr","name","removeAttribute","XMLSerializer","serializeToString","outerHTML","errorContainer","message","Date","now","random","toString","substr","DOMPurify","clean","sanitize","lazyLoadLibrary","then","loaded","katex","rendered","renderToString","displayMode","throwOnError","escapedCode","header","parseCSVLine","current","inQuotes","char","nextChar","toHighlight","data","JSON","parse","stringify","catch","promises","loadScript","loadCSS","initialize","startOnLoad","Promise","all","check","scriptUrl","cssUrl","resolve","reject","script","onload","onerror","link","isDark","matchMedia","matches","toggle","setLazyLinefeeds","enabled","updateFromSource","getLazyLinefeeds","setDebounceDelay","delay","max","getDebounceDelay","onModeChange","copy","removeHR","navigator","clipboard","writeText","originalText","getMarkdown","getHTML","cleaned","filter","destroy"],"mappings":"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"}