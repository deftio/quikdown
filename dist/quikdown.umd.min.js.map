{"version":3,"file":"quikdown.umd.min.js","sources":["../src/quikdown.js"],"sourcesContent":["/**\n * quikdown - A minimal markdown parser optimized for chat/LLM output\n * Supports tables, code blocks, lists, and common formatting\n * @param {string} markdown - The markdown source text\n * @param {Object} options - Optional configuration object\n * @param {Function} options.fence_plugin - Custom renderer for fenced code blocks\n *                   (content, fence_string) => html string\n * @param {boolean} options.inline_styles - If true, uses inline styles instead of classes\n * @returns {string} - The rendered HTML\n */\n\nfunction quikdown(markdown, options = {}) {\n    if (!markdown || typeof markdown !== 'string') {\n        return '';\n    }\n    \n    const { fence_plugin, inline_styles = false } = options;\n\n    // Style definitions for elements\n    const styles = {\n        h1: 'margin-top: 0.5em; margin-bottom: 0.3em',\n        h2: 'margin-top: 0.5em; margin-bottom: 0.3em', \n        h3: 'margin-top: 0.5em; margin-bottom: 0.3em',\n        h4: 'margin-top: 0.5em; margin-bottom: 0.3em',\n        h5: 'margin-top: 0.5em; margin-bottom: 0.3em',\n        h6: 'margin-top: 0.5em; margin-bottom: 0.3em',\n        pre: 'background: #f4f4f4; padding: 10px; border-radius: 4px; overflow-x: auto',\n        code: 'background: #f0f0f0; padding: 2px 4px; border-radius: 3px',\n        blockquote: 'border-left: 4px solid #ddd; margin-left: 0; padding-left: 1em; color: #666',\n        table: 'border-collapse: collapse; width: 100%; margin: 1em 0',\n        thead: '',\n        tbody: '',\n        tr: '',\n        th: 'border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2; font-weight: bold',\n        td: 'border: 1px solid #ddd; padding: 8px; text-align: left',\n        hr: 'border: none; border-top: 1px solid #ddd; margin: 1em 0',\n        img: 'max-width: 100%; height: auto',\n        a: 'color: #0066cc; text-decoration: underline',\n        strong: 'font-weight: bold',\n        em: 'font-style: italic',\n        del: 'text-decoration: line-through',\n        ul: 'margin: 0.5em 0; padding-left: 2em',\n        ol: 'margin: 0.5em 0; padding-left: 2em',\n        li: 'margin: 0.25em 0',\n        br: ''\n    };\n\n    // Helper to get class or style attribute\n    function getAttr(tag, additionalStyle = '') {\n        if (inline_styles) {\n            const style = styles[tag] || '';\n            const fullStyle = additionalStyle ? `${style}; ${additionalStyle}` : style;\n            return fullStyle ? ` style=\"${fullStyle}\"` : '';\n        } else {\n            return ` class=\"quikdown-${tag}\"`;\n        }\n    }\n\n    // Escape HTML entities to prevent XSS\n    function escapeHtml(text) {\n        const map = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;'\n        };\n        return text.replace(/[&<>\"']/g, m => map[m]);\n    }\n\n    // Process the markdown in phases\n    let html = markdown;\n    \n    // Phase 1: Extract and protect code blocks and inline code\n    const codeBlocks = [];\n    const inlineCodes = [];\n    \n    // Extract fenced code blocks first\n    html = html.replace(/```(\\w*)\\n([\\s\\S]*?)```/g, (match, lang, code) => {\n        const placeholder = `%%%CODEBLOCK${codeBlocks.length}%%%`;\n        \n        // If custom fence plugin is provided, use it\n        if (fence_plugin && typeof fence_plugin === 'function') {\n            codeBlocks.push({\n                lang: lang || '',\n                code: code.trimEnd(),\n                custom: true\n            });\n        } else {\n            codeBlocks.push({\n                lang: lang || '',\n                code: escapeHtml(code.trimEnd()),\n                custom: false\n            });\n        }\n        return placeholder;\n    });\n    \n    // Extract inline code\n    html = html.replace(/`([^`]+)`/g, (match, code) => {\n        const placeholder = `%%%INLINECODE${inlineCodes.length}%%%`;\n        inlineCodes.push(escapeHtml(code));\n        return placeholder;\n    });\n    \n    // Now escape HTML in the rest of the content\n    html = escapeHtml(html);\n    \n    // Phase 2: Process block elements\n    \n    // Process tables\n    html = processTable(html, inline_styles, styles);\n    \n    // Process headings\n    html = html.replace(/^(#{1,6})\\s+(.+)$/gm, (match, hashes, content) => {\n        const level = hashes.length;\n        return `<h${level}${getAttr('h' + level)}>${content}</h${level}>`;\n    });\n    \n    // Process blockquotes (must handle escaped > since we already escaped HTML)\n    html = html.replace(/^&gt;\\s+(.+)$/gm, `<blockquote${getAttr('blockquote')}>$1</blockquote>`);\n    // Merge consecutive blockquotes\n    html = html.replace(/<\\/blockquote>\\n<blockquote>/g, '\\n');\n    \n    // Process horizontal rules\n    html = html.replace(/^---+$/gm, `<hr${getAttr('hr')}>`);\n    \n    // Process lists\n    html = processLists(html, inline_styles, styles);\n    \n    // Phase 3: Process inline elements\n    \n    // Images (must come before links)\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, (match, alt, src) => {\n        return `<img${getAttr('img')} src=\"${src}\" alt=\"${alt}\">`;\n    });\n    \n    // Links\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, (match, text, href) => {\n        return `<a${getAttr('a')} href=\"${href}\">${text}</a>`;\n    });\n    \n    // Bold (must use non-greedy matching)\n    html = html.replace(/\\*\\*(.+?)\\*\\*/g, `<strong${getAttr('strong')}>$1</strong>`);\n    html = html.replace(/__(.+?)__/g, `<strong${getAttr('strong')}>$1</strong>`);\n    \n    // Italic (must not match bold markers)\n    html = html.replace(/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, `<em${getAttr('em')}>$1</em>`);\n    html = html.replace(/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, `<em${getAttr('em')}>$1</em>`);\n    \n    // Strikethrough\n    html = html.replace(/~~(.+?)~~/g, `<del${getAttr('del')}>$1</del>`);\n    \n    // Line breaks (two spaces at end of line)\n    html = html.replace(/  $/gm, `<br${getAttr('br')}>`);\n    \n    // Paragraphs (double newlines)\n    html = html.replace(/\\n\\n+/g, '</p><p>');\n    html = '<p>' + html + '</p>';\n    \n    // Clean up empty paragraphs and unwrap block elements (account for attributes)\n    html = html.replace(/<p><\\/p>/g, '');\n    html = html.replace(/<p>(<h[1-6][^>]*>)/g, '$1');\n    html = html.replace(/(<\\/h[1-6]>)<\\/p>/g, '$1');\n    html = html.replace(/<p>(<blockquote[^>]*>)/g, '$1');\n    html = html.replace(/(<\\/blockquote>)<\\/p>/g, '$1');\n    html = html.replace(/<p>(<ul[^>]*>|<ol[^>]*>)/g, '$1');\n    html = html.replace(/(<\\/ul>|<\\/ol>)<\\/p>/g, '$1');\n    html = html.replace(/<p>(<hr[^>]*>)<\\/p>/g, '$1');\n    html = html.replace(/<p>(<table[^>]*>)/g, '$1');\n    html = html.replace(/(<\\/table>)<\\/p>/g, '$1');\n    html = html.replace(/<p>(<pre[^>]*>)/g, '$1');\n    html = html.replace(/(<\\/pre>)<\\/p>/g, '$1');\n    // Also unwrap code block placeholders\n    html = html.replace(/<p>(%%%CODEBLOCK\\d+%%%)<\\/p>/g, '$1');\n    \n    // Phase 4: Restore code blocks and inline code\n    \n    // Restore code blocks\n    codeBlocks.forEach((block, i) => {\n        let replacement;\n        \n        if (block.custom && fence_plugin) {\n            // Use custom fence plugin\n            replacement = fence_plugin(block.code, block.lang);\n        } else {\n            // Default rendering\n            const langClass = !inline_styles && block.lang ? ` class=\"language-${block.lang}\"` : '';\n            const codeAttr = inline_styles ? getAttr('code') : langClass;\n            replacement = `<pre${getAttr('pre')}><code${codeAttr}>${block.code}</code></pre>`;\n        }\n        \n        const placeholder = `%%%CODEBLOCK${i}%%%`;\n        html = html.replace(placeholder, replacement);\n    });\n    \n    // Restore inline code\n    inlineCodes.forEach((code, i) => {\n        const placeholder = `%%%INLINECODE${i}%%%`;\n        html = html.replace(placeholder, `<code${getAttr('code')}>${code}</code>`);\n    });\n    \n    return html.trim();\n}\n\n/**\n * Process inline markdown formatting\n */\nfunction processInlineMarkdown(text, inline_styles, styles) {\n    // Helper to get attributes\n    function getAttr(tag, additionalStyle = '') {\n        if (inline_styles) {\n            const style = styles[tag] || '';\n            const fullStyle = additionalStyle ? `${style}; ${additionalStyle}` : style;\n            return fullStyle ? ` style=\"${fullStyle}\"` : '';\n        } else {\n            return ` class=\"quikdown-${tag}\"`;\n        }\n    }\n    \n    // Process bold\n    text = text.replace(/\\*\\*(.+?)\\*\\*/g, `<strong${getAttr('strong')}>$1</strong>`);\n    text = text.replace(/__(.+?)__/g, `<strong${getAttr('strong')}>$1</strong>`);\n    \n    // Process italic (must not match bold markers)\n    text = text.replace(/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, `<em${getAttr('em')}>$1</em>`);\n    text = text.replace(/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, `<em${getAttr('em')}>$1</em>`);\n    \n    // Process strikethrough\n    text = text.replace(/~~(.+?)~~/g, `<del${getAttr('del')}>$1</del>`);\n    \n    // Process inline code\n    text = text.replace(/`([^`]+)`/g, `<code${getAttr('code')}>$1</code>`);\n    \n    return text;\n}\n\n/**\n * Process markdown tables\n */\nfunction processTable(text, inline_styles, styles) {\n    // Helper to get attributes\n    function getAttr(tag, additionalStyle = '') {\n        if (inline_styles) {\n            const style = styles[tag] || '';\n            const fullStyle = additionalStyle ? `${style}; ${additionalStyle}` : style;\n            return fullStyle ? ` style=\"${fullStyle}\"` : '';\n        } else {\n            return ` class=\"quikdown-${tag}\"`;\n        }\n    }\n    \n    const lines = text.split('\\n');\n    const result = [];\n    let inTable = false;\n    let tableLines = [];\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        \n        // Check if this line looks like a table row\n        if (line.startsWith('|') && line.endsWith('|')) {\n            if (!inTable) {\n                inTable = true;\n                tableLines = [];\n            }\n            tableLines.push(line);\n        } else {\n            // Not a table line\n            if (inTable) {\n                // Process the accumulated table\n                const tableHtml = buildTable(tableLines, inline_styles, styles);\n                if (tableHtml) {\n                    result.push(tableHtml);\n                } else {\n                    // Not a valid table, restore original lines\n                    result.push(...tableLines);\n                }\n                inTable = false;\n                tableLines = [];\n            }\n            result.push(lines[i]);\n        }\n    }\n    \n    // Handle table at end of text\n    if (inTable && tableLines.length > 0) {\n        const tableHtml = buildTable(tableLines, inline_styles, styles);\n        if (tableHtml) {\n            result.push(tableHtml);\n        } else {\n            result.push(...tableLines);\n        }\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Build an HTML table from markdown table lines\n */\nfunction buildTable(lines, inline_styles, styles) {\n    // Helper to get attributes\n    function getAttr(tag, additionalStyle = '') {\n        if (inline_styles) {\n            const style = styles[tag] || '';\n            const fullStyle = additionalStyle ? `${style}; ${additionalStyle}` : style;\n            return fullStyle ? ` style=\"${fullStyle}\"` : '';\n        } else {\n            return ` class=\"quikdown-${tag}\"`;\n        }\n    }\n    \n    if (lines.length < 2) return null;\n    \n    // Check for separator line (second line should be the separator)\n    let separatorIndex = -1;\n    for (let i = 1; i < lines.length; i++) {\n        if (/^\\|[\\s\\-:|]+\\|$/.test(lines[i])) {\n            separatorIndex = i;\n            break;\n        }\n    }\n    \n    if (separatorIndex === -1) return null;\n    \n    const headerLines = lines.slice(0, separatorIndex);\n    const bodyLines = lines.slice(separatorIndex + 1);\n    \n    // Parse alignment from separator\n    const separator = lines[separatorIndex];\n    const alignments = separator\n        .split('|')\n        .slice(1, -1)\n        .map(cell => {\n            const trimmed = cell.trim();\n            if (trimmed.startsWith(':') && trimmed.endsWith(':')) return 'center';\n            if (trimmed.endsWith(':')) return 'right';\n            return 'left';\n        });\n    \n    let html = `<table${getAttr('table')}>\\n`;\n    \n    // Build header\n    if (headerLines.length > 0) {\n        html += `<thead${getAttr('thead')}>\\n`;\n        headerLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            const cells = line.split('|').slice(1, -1);\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align: ${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), inline_styles, styles);\n                html += `<th${getAttr('th', alignStyle)}>${processedCell}</th>\\n`;\n            });\n            html += '</tr>\\n';\n        });\n        html += '</thead>\\n';\n    }\n    \n    // Build body\n    if (bodyLines.length > 0) {\n        html += `<tbody${getAttr('tbody')}>\\n`;\n        bodyLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            const cells = line.split('|').slice(1, -1);\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align: ${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), inline_styles, styles);\n                html += `<td${getAttr('td', alignStyle)}>${processedCell}</td>\\n`;\n            });\n            html += '</tr>\\n';\n        });\n        html += '</tbody>\\n';\n    }\n    \n    html += '</table>';\n    return html;\n}\n\n/**\n * Process markdown lists (ordered and unordered)\n */\nfunction processLists(text, inline_styles, styles) {\n    // Helper to get attributes\n    function getAttr(tag, additionalStyle = '') {\n        if (inline_styles) {\n            const style = styles[tag] || '';\n            const fullStyle = additionalStyle ? `${style}; ${additionalStyle}` : style;\n            return fullStyle ? ` style=\"${fullStyle}\"` : '';\n        } else {\n            return ` class=\"quikdown-${tag}\"`;\n        }\n    }\n    \n    const lines = text.split('\\n');\n    const result = [];\n    let listStack = []; // Track nested lists\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        const match = line.match(/^(\\s*)([*\\-+]|\\d+\\.)\\s+(.+)$/);\n        \n        if (match) {\n            const [, indent, marker, content] = match;\n            const level = Math.floor(indent.length / 2);\n            const isOrdered = /^\\d+\\./.test(marker);\n            const listType = isOrdered ? 'ol' : 'ul';\n            \n            // Close deeper levels\n            while (listStack.length > level + 1) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            \n            // Open new level if needed\n            if (listStack.length === level) {\n                // Need to open a new list\n                listStack.push({ type: listType, level });\n                result.push(`<${listType}${getAttr(listType)}>`);\n            } else if (listStack.length === level + 1) {\n                // Check if we need to switch list type\n                const currentList = listStack[listStack.length - 1];\n                if (currentList.type !== listType) {\n                    result.push(`</${currentList.type}>`);\n                    listStack.pop();\n                    listStack.push({ type: listType, level });\n                    result.push(`<${listType}${getAttr(listType)}>`);\n                }\n            }\n            \n            result.push(`<li${getAttr('li')}>${content}</li>`);\n        } else {\n            // Not a list item, close all lists\n            while (listStack.length > 0) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            result.push(line);\n        }\n    }\n    \n    // Close any remaining lists\n    while (listStack.length > 0) {\n        const list = listStack.pop();\n        result.push(`</${list.type}>`);\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Emit CSS styles for quikdown elements\n * @returns {string} CSS string with quikdown styles\n */\nquikdown.emitStyles = function() {\n    const styles = {\n        h1: 'margin-top: 0.5em; margin-bottom: 0.3em',\n        h2: 'margin-top: 0.5em; margin-bottom: 0.3em',\n        h3: 'margin-top: 0.5em; margin-bottom: 0.3em',\n        h4: 'margin-top: 0.5em; margin-bottom: 0.3em',\n        h5: 'margin-top: 0.5em; margin-bottom: 0.3em',\n        h6: 'margin-top: 0.5em; margin-bottom: 0.3em',\n        pre: 'background: #f4f4f4; padding: 10px; border-radius: 4px; overflow-x: auto',\n        code: 'background: #f0f0f0; padding: 2px 4px; border-radius: 3px',\n        blockquote: 'border-left: 4px solid #ddd; margin-left: 0; padding-left: 1em; color: #666',\n        table: 'border-collapse: collapse; width: 100%; margin: 1em 0',\n        th: 'border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2; font-weight: bold',\n        td: 'border: 1px solid #ddd; padding: 8px; text-align: left',\n        hr: 'border: none; border-top: 1px solid #ddd; margin: 1em 0',\n        img: 'max-width: 100%; height: auto',\n        a: 'color: #0066cc; text-decoration: underline',\n        strong: 'font-weight: bold',\n        em: 'font-style: italic',\n        del: 'text-decoration: line-through',\n        ul: 'margin: 0.5em 0; padding-left: 2em',\n        ol: 'margin: 0.5em 0; padding-left: 2em',\n        li: 'margin: 0.25em 0'\n    };\n    \n    let css = '';\n    for (const [tag, style] of Object.entries(styles)) {\n        if (style) {\n            css += `.quikdown-${tag} { ${style} }\\n`;\n        }\n    }\n    \n    return css;\n};\n\n/**\n * Configure quikdown with options and return a function\n * @param {Object} options - Configuration options\n * @returns {Function} Configured quikdown function\n */\nquikdown.configure = function(options) {\n    return function(markdown) {\n        return quikdown(markdown, options);\n    };\n};\n\n// Export for both CommonJS and ES6\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = quikdown;\n}\n\n// For browser global\nif (typeof window !== 'undefined') {\n    window.quikdown = quikdown;\n}\n\nexport default quikdown;"],"names":["quikdown","markdown","options","fence_plugin","inline_styles","styles","h1","h2","h3","h4","h5","h6","pre","code","blockquote","table","thead","tbody","tr","th","td","hr","img","a","strong","em","del","ul","ol","li","br","getAttr","tag","additionalStyle","style","fullStyle","escapeHtml","text","map","replace","m","html","codeBlocks","inlineCodes","match","lang","placeholder","length","push","trimEnd","custom","lines","split","result","inTable","tableLines","i","line","trim","startsWith","endsWith","tableHtml","buildTable","join","processTable","hashes","content","level","listStack","indent","marker","Math","floor","listType","test","list","pop","type","currentList","processLists","alt","src","href","forEach","block","replacement","langClass","codeAttr","processInlineMarkdown","separatorIndex","headerLines","slice","bodyLines","alignments","cell","trimmed","alignStyle","processedCell","emitStyles","css","Object","entries","configure","module","exports","window"],"mappings":"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"}