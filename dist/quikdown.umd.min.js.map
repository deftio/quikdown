{"version":3,"file":"quikdown.umd.min.js","sources":["../src/quikdown_version.js","../src/quikdown.js"],"sourcesContent":["// Auto-generated version file - DO NOT EDIT MANUALLY\n// This file is automatically updated by tools/updateVersion.js\n\nexport const quikdownVersion = \"1.0.3dev2\";\n\nexport default quikdownVersion;","/**\n * quikdown - A minimal markdown parser optimized for chat/LLM output\n * Supports tables, code blocks, lists, and common formatting\n * @param {string} markdown - The markdown source text\n * @param {Object} options - Optional configuration object\n * @param {Function} options.fence_plugin - Custom renderer for fenced code blocks\n *                   (content, fence_string) => html string\n * @param {boolean} options.inline_styles - If true, uses inline styles instead of classes\n * @returns {string} - The rendered HTML\n */\n\nimport quikdownVersion from './quikdown_version.js';\n\n// Single source of truth for all style definitions\nconst QUIKDOWN_STYLES = {\n    h1: 'font-size: 2em; font-weight: 600; margin: 0.67em 0; text-align: left',\n    h2: 'font-size: 1.5em; font-weight: 600; margin: 0.83em 0',\n    h3: 'font-size: 1.25em; font-weight: 600; margin: 1em 0',\n    h4: 'font-size: 1em; font-weight: 600; margin: 1.33em 0',\n    h5: 'font-size: 0.875em; font-weight: 600; margin: 1.67em 0',\n    h6: 'font-size: 0.85em; font-weight: 600; margin: 2em 0',\n    pre: 'background: #f4f4f4; padding: 10px; border-radius: 4px; overflow-x: auto; margin: 1em 0',\n    code: 'background: #f0f0f0; padding: 2px 4px; border-radius: 3px; font-family: monospace',\n    blockquote: 'border-left: 4px solid #ddd; margin-left: 0; padding-left: 1em',\n    table: 'border-collapse: collapse; width: 100%; margin: 1em 0',\n    thead: '',\n    tbody: '',\n    tr: '',\n    th: 'border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2; font-weight: bold; text-align: left',\n    td: 'border: 1px solid #ddd; padding: 8px; text-align: left',\n    hr: 'border: none; border-top: 1px solid #ddd; margin: 1em 0',\n    img: 'max-width: 100%; height: auto',\n    a: 'color: #0066cc; text-decoration: underline',\n    strong: 'font-weight: bold',\n    em: 'font-style: italic',\n    del: 'text-decoration: line-through',\n    ul: 'margin: 0.5em 0; padding-left: 2em',\n    ol: 'margin: 0.5em 0; padding-left: 2em',\n    li: 'margin: 0.25em 0',\n    br: '',\n    // Task list specific styles\n    'task-item': 'list-style: none',\n    'task-checkbox': 'margin-right: 0.5em'\n};\n\n// Factory function to create getAttr for a given context\nfunction createGetAttr(inline_styles, styles) {\n    return function(tag, additionalStyle = '') {\n        if (inline_styles) {\n            const style = styles[tag] || '';\n            const fullStyle = additionalStyle ? `${style}; ${additionalStyle}` : style;\n            return fullStyle ? ` style=\"${fullStyle}\"` : '';\n        } else {\n            return ` class=\"quikdown-${tag}\"`;\n        }\n    };\n}\n\nfunction quikdown(markdown, options = {}) {\n    if (!markdown || typeof markdown !== 'string') {\n        return '';\n    }\n    \n    const { fence_plugin, inline_styles = false } = options;\n    const styles = QUIKDOWN_STYLES; // Use module-level styles\n    const getAttr = createGetAttr(inline_styles, styles); // Create getAttr once\n\n    // Escape HTML entities to prevent XSS\n    function escapeHtml(text) {\n        const map = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;'\n        };\n        return text.replace(/[&<>\"']/g, m => map[m]);\n    }\n    \n    // Sanitize URLs to prevent XSS attacks\n    function sanitizeUrl(url, allowUnsafe = false) {\n        if (!url) return '';\n        \n        // If unsafe URLs are explicitly allowed, return as-is\n        if (allowUnsafe) return url;\n        \n        // Trim and lowercase for checking\n        const trimmedUrl = url.trim();\n        const lowerUrl = trimmedUrl.toLowerCase();\n        \n        // Block dangerous protocols\n        const dangerousProtocols = ['javascript:', 'vbscript:', 'data:'];\n        \n        for (const protocol of dangerousProtocols) {\n            if (lowerUrl.startsWith(protocol)) {\n                // Exception: Allow data:image/* for images\n                if (protocol === 'data:' && lowerUrl.startsWith('data:image/')) {\n                    return trimmedUrl;\n                }\n                // Return safe empty link for dangerous protocols\n                return '#';\n            }\n        }\n        \n        return trimmedUrl;\n    }\n\n    // Process the markdown in phases\n    let html = markdown;\n    \n    // Phase 1: Extract and protect code blocks and inline code\n    const codeBlocks = [];\n    const inlineCodes = [];\n    \n    // Extract fenced code blocks first (supports both ``` and ~~~)\n    // Match paired fences - ``` with ``` and ~~~ with ~~~\n    // Fence must be at start of line\n    html = html.replace(/^(```|~~~)([^\\n]*)\\n([\\s\\S]*?)^\\1$/gm, (match, fence, lang, code) => {\n        const placeholder = `%%%CODEBLOCK${codeBlocks.length}%%%`;\n        \n        // Trim the language specification\n        const langTrimmed = lang ? lang.trim() : '';\n        \n        // If custom fence plugin is provided, use it\n        if (fence_plugin && typeof fence_plugin === 'function') {\n            codeBlocks.push({\n                lang: langTrimmed,\n                code: code.trimEnd(),\n                custom: true\n            });\n        } else {\n            codeBlocks.push({\n                lang: langTrimmed,\n                code: escapeHtml(code.trimEnd()),\n                custom: false\n            });\n        }\n        return placeholder;\n    });\n    \n    // Extract inline code\n    html = html.replace(/`([^`]+)`/g, (match, code) => {\n        const placeholder = `%%%INLINECODE${inlineCodes.length}%%%`;\n        inlineCodes.push(escapeHtml(code));\n        return placeholder;\n    });\n    \n    // Now escape HTML in the rest of the content\n    html = escapeHtml(html);\n    \n    // Phase 2: Process block elements\n    \n    // Process tables\n    html = processTable(html, inline_styles, styles);\n    \n    // Process headings (supports optional trailing #'s)\n    html = html.replace(/^(#{1,6})\\s+(.+?)\\s*#*$/gm, (match, hashes, content) => {\n        const level = hashes.length;\n        return `<h${level}${getAttr('h' + level)}>${content}</h${level}>`;\n    });\n    \n    // Process blockquotes (must handle escaped > since we already escaped HTML)\n    html = html.replace(/^&gt;\\s+(.+)$/gm, `<blockquote${getAttr('blockquote')}>$1</blockquote>`);\n    // Merge consecutive blockquotes\n    html = html.replace(/<\\/blockquote>\\n<blockquote>/g, '\\n');\n    \n    // Process horizontal rules\n    html = html.replace(/^---+$/gm, `<hr${getAttr('hr')}>`);\n    \n    // Process lists\n    html = processLists(html, inline_styles, styles);\n    \n    // Phase 3: Process inline elements\n    \n    // Images (must come before links, with URL sanitization)\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, (match, alt, src) => {\n        const sanitizedSrc = sanitizeUrl(src, options.allow_unsafe_urls);\n        return `<img${getAttr('img')} src=\"${sanitizedSrc}\" alt=\"${alt}\">`;\n    });\n    \n    // Links (with URL sanitization)\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, (match, text, href) => {\n        // Sanitize URL to prevent XSS\n        const sanitizedHref = sanitizeUrl(href, options.allow_unsafe_urls);\n        const isExternal = /^https?:\\/\\//i.test(sanitizedHref);\n        const rel = isExternal ? ' rel=\"noopener noreferrer\"' : '';\n        return `<a${getAttr('a')} href=\"${sanitizedHref}\"${rel}>${text}</a>`;\n    });\n    \n    // Autolinks - convert bare URLs to clickable links\n    html = html.replace(/(^|\\s)(https?:\\/\\/[^\\s<]+)/g, (match, prefix, url) => {\n        const sanitizedUrl = sanitizeUrl(url, options.allow_unsafe_urls);\n        return `${prefix}<a${getAttr('a')} href=\"${sanitizedUrl}\" rel=\"noopener noreferrer\">${url}</a>`;\n    });\n    \n    // Process inline formatting (bold, italic, strikethrough)\n    const inlinePatterns = [\n        [/\\*\\*(.+?)\\*\\*/g, 'strong'],\n        [/__(.+?)__/g, 'strong'],\n        [/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, 'em'],\n        [/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, 'em'],\n        [/~~(.+?)~~/g, 'del']\n    ];\n    \n    inlinePatterns.forEach(([pattern, tag]) => {\n        html = html.replace(pattern, `<${tag}${getAttr(tag)}>$1</${tag}>`);\n    });\n    \n    // Line breaks (two spaces at end of line)\n    html = html.replace(/  $/gm, `<br${getAttr('br')}>`);\n    \n    // Paragraphs (double newlines)\n    html = html.replace(/\\n\\n+/g, '</p><p>');\n    html = '<p>' + html + '</p>';\n    \n    // Clean up empty paragraphs and unwrap block elements\n    const cleanupPatterns = [\n        [/<p><\\/p>/g, ''],\n        [/<p>(<h[1-6][^>]*>)/g, '$1'],\n        [/(<\\/h[1-6]>)<\\/p>/g, '$1'],\n        [/<p>(<blockquote[^>]*>)/g, '$1'],\n        [/(<\\/blockquote>)<\\/p>/g, '$1'],\n        [/<p>(<ul[^>]*>|<ol[^>]*>)/g, '$1'],\n        [/(<\\/ul>|<\\/ol>)<\\/p>/g, '$1'],\n        [/<p>(<hr[^>]*>)<\\/p>/g, '$1'],\n        [/<p>(<table[^>]*>)/g, '$1'],\n        [/(<\\/table>)<\\/p>/g, '$1'],\n        [/<p>(<pre[^>]*>)/g, '$1'],\n        [/(<\\/pre>)<\\/p>/g, '$1'],\n        [/<p>(%%%CODEBLOCK\\d+%%%)<\\/p>/g, '$1']\n    ];\n    \n    cleanupPatterns.forEach(([pattern, replacement]) => {\n        html = html.replace(pattern, replacement);\n    });\n    \n    // Phase 4: Restore code blocks and inline code\n    \n    // Restore code blocks\n    codeBlocks.forEach((block, i) => {\n        let replacement;\n        \n        if (block.custom && fence_plugin) {\n            // Use custom fence plugin\n            replacement = fence_plugin(block.code, block.lang);\n            // If plugin returns undefined, fall back to default rendering\n            if (replacement === undefined) {\n                const langClass = !inline_styles && block.lang ? ` class=\"language-${block.lang}\"` : '';\n                const codeAttr = inline_styles ? getAttr('code') : langClass;\n                replacement = `<pre${getAttr('pre')}><code${codeAttr}>${escapeHtml(block.code)}</code></pre>`;\n            }\n        } else {\n            // Default rendering\n            const langClass = !inline_styles && block.lang ? ` class=\"language-${block.lang}\"` : '';\n            const codeAttr = inline_styles ? getAttr('code') : langClass;\n            replacement = `<pre${getAttr('pre')}><code${codeAttr}>${block.code}</code></pre>`;\n        }\n        \n        const placeholder = `%%%CODEBLOCK${i}%%%`;\n        html = html.replace(placeholder, replacement);\n    });\n    \n    // Restore inline code\n    inlineCodes.forEach((code, i) => {\n        const placeholder = `%%%INLINECODE${i}%%%`;\n        html = html.replace(placeholder, `<code${getAttr('code')}>${code}</code>`);\n    });\n    \n    return html.trim();\n}\n\n/**\n * Process inline markdown formatting\n */\nfunction processInlineMarkdown(text, inline_styles, styles) {\n    const getAttr = createGetAttr(inline_styles, styles);\n    \n    // Process inline formatting patterns\n    const patterns = [\n        [/\\*\\*(.+?)\\*\\*/g, 'strong'],\n        [/__(.+?)__/g, 'strong'],\n        [/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, 'em'],\n        [/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, 'em'],\n        [/~~(.+?)~~/g, 'del'],\n        [/`([^`]+)`/g, 'code']\n    ];\n    \n    patterns.forEach(([pattern, tag]) => {\n        text = text.replace(pattern, `<${tag}${getAttr(tag)}>$1</${tag}>`);\n    });\n    \n    return text;\n}\n\n/**\n * Process markdown tables\n */\nfunction processTable(text, inline_styles, styles) {\n    const lines = text.split('\\n');\n    const result = [];\n    let inTable = false;\n    let tableLines = [];\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        \n        // Check if this line looks like a table row (with or without trailing |)\n        if (line.includes('|') && (line.startsWith('|') || /[^\\\\|]/.test(line))) {\n            if (!inTable) {\n                inTable = true;\n                tableLines = [];\n            }\n            tableLines.push(line);\n        } else {\n            // Not a table line\n            if (inTable) {\n                // Process the accumulated table\n                const tableHtml = buildTable(tableLines, inline_styles, styles);\n                if (tableHtml) {\n                    result.push(tableHtml);\n                } else {\n                    // Not a valid table, restore original lines\n                    result.push(...tableLines);\n                }\n                inTable = false;\n                tableLines = [];\n            }\n            result.push(lines[i]);\n        }\n    }\n    \n    // Handle table at end of text\n    if (inTable && tableLines.length > 0) {\n        const tableHtml = buildTable(tableLines, inline_styles, styles);\n        if (tableHtml) {\n            result.push(tableHtml);\n        } else {\n            result.push(...tableLines);\n        }\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Build an HTML table from markdown table lines\n */\nfunction buildTable(lines, inline_styles, styles) {\n    const getAttr = createGetAttr(inline_styles, styles);\n    \n    if (lines.length < 2) return null;\n    \n    // Check for separator line (second line should be the separator)\n    let separatorIndex = -1;\n    for (let i = 1; i < lines.length; i++) {\n        // Support separator with or without leading/trailing pipes\n        if (/^\\|?[\\s\\-:|]+\\|?$/.test(lines[i]) && lines[i].includes('-')) {\n            separatorIndex = i;\n            break;\n        }\n    }\n    \n    if (separatorIndex === -1) return null;\n    \n    const headerLines = lines.slice(0, separatorIndex);\n    const bodyLines = lines.slice(separatorIndex + 1);\n    \n    // Parse alignment from separator\n    const separator = lines[separatorIndex];\n    // Handle pipes at start/end or not\n    const separatorCells = separator.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n    const alignments = separatorCells.map(cell => {\n        const trimmed = cell.trim();\n        if (trimmed.startsWith(':') && trimmed.endsWith(':')) return 'center';\n        if (trimmed.endsWith(':')) return 'right';\n        return 'left';\n    });\n    \n    let html = `<table${getAttr('table')}>\\n`;\n    \n    // Build header\n    if (headerLines.length > 0) {\n        html += `<thead${getAttr('thead')}>\\n`;\n        headerLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            // Handle pipes at start/end or not\n            const cells = line.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align: ${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), inline_styles, styles);\n                html += `<th${getAttr('th', alignStyle)}>${processedCell}</th>\\n`;\n            });\n            html += '</tr>\\n';\n        });\n        html += '</thead>\\n';\n    }\n    \n    // Build body\n    if (bodyLines.length > 0) {\n        html += `<tbody${getAttr('tbody')}>\\n`;\n        bodyLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            // Handle pipes at start/end or not\n            const cells = line.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align: ${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), inline_styles, styles);\n                html += `<td${getAttr('td', alignStyle)}>${processedCell}</td>\\n`;\n            });\n            html += '</tr>\\n';\n        });\n        html += '</tbody>\\n';\n    }\n    \n    html += '</table>';\n    return html;\n}\n\n/**\n * Process markdown lists (ordered and unordered)\n */\nfunction processLists(text, inline_styles, styles) {\n    const getAttr = createGetAttr(inline_styles, styles);\n    \n    const lines = text.split('\\n');\n    const result = [];\n    let listStack = []; // Track nested lists\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        const match = line.match(/^(\\s*)([*\\-+]|\\d+\\.)\\s+(.+)$/);\n        \n        if (match) {\n            const [, indent, marker, content] = match;\n            const level = Math.floor(indent.length / 2);\n            const isOrdered = /^\\d+\\./.test(marker);\n            const listType = isOrdered ? 'ol' : 'ul';\n            \n            // Check for task list items\n            let listItemContent = content;\n            let taskListClass = '';\n            const taskMatch = content.match(/^\\[([x ])\\]\\s+(.*)$/i);\n            if (taskMatch && !isOrdered) {\n                const [, checked, taskContent] = taskMatch;\n                const isChecked = checked.toLowerCase() === 'x';\n                const checkboxAttr = inline_styles \n                    ? ' style=\"margin-right: 0.5em\"' \n                    : ' class=\"quikdown-task-checkbox\"';\n                listItemContent = `<input type=\"checkbox\"${checkboxAttr}${isChecked ? ' checked' : ''} disabled> ${taskContent}`;\n                taskListClass = inline_styles ? ' style=\"list-style: none\"' : ' class=\"quikdown-task-item\"';\n            }\n            \n            // Close deeper levels\n            while (listStack.length > level + 1) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            \n            // Open new level if needed\n            if (listStack.length === level) {\n                // Need to open a new list\n                listStack.push({ type: listType, level });\n                result.push(`<${listType}${getAttr(listType)}>`);\n            } else if (listStack.length === level + 1) {\n                // Check if we need to switch list type\n                const currentList = listStack[listStack.length - 1];\n                if (currentList.type !== listType) {\n                    result.push(`</${currentList.type}>`);\n                    listStack.pop();\n                    listStack.push({ type: listType, level });\n                    result.push(`<${listType}${getAttr(listType)}>`);\n                }\n            }\n            \n            const liAttr = taskListClass || getAttr('li');\n            result.push(`<li${liAttr}>${listItemContent}</li>`);\n        } else {\n            // Not a list item, close all lists\n            while (listStack.length > 0) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            result.push(line);\n        }\n    }\n    \n    // Close any remaining lists\n    while (listStack.length > 0) {\n        const list = listStack.pop();\n        result.push(`</${list.type}>`);\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Emit CSS styles for quikdown elements\n * @returns {string} CSS string with quikdown styles\n */\nquikdown.emitStyles = function() {\n    const styles = QUIKDOWN_STYLES; // Use the same module-level styles\n    \n    let css = '';\n    for (const [tag, style] of Object.entries(styles)) {\n        if (style) {\n            css += `.quikdown-${tag} { ${style} }\\n`;\n        }\n    }\n    \n    return css;\n};\n\n/**\n * Configure quikdown with options and return a function\n * @param {Object} options - Configuration options\n * @returns {Function} Configured quikdown function\n */\nquikdown.configure = function(options) {\n    return function(markdown) {\n        return quikdown(markdown, options);\n    };\n};\n\n/**\n * Version information\n */\nquikdown.version = quikdownVersion;\n\n// Export for both CommonJS and ES6\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = quikdown;\n}\n\n// For browser global\nif (typeof window !== 'undefined') {\n    window.quikdown = quikdown;\n}\n\nexport default quikdown;"],"names":["QUIKDOWN_STYLES","h1","h2","h3","h4","h5","h6","pre","code","blockquote","table","thead","tbody","tr","th","td","hr","img","a","strong","em","del","ul","ol","li","br","createGetAttr","inline_styles","styles","tag","additionalStyle","style","fullStyle","quikdown","markdown","options","fence_plugin","getAttr","escapeHtml","text","map","replace","m","sanitizeUrl","url","allowUnsafe","trimmedUrl","trim","lowerUrl","toLowerCase","dangerousProtocols","protocol","startsWith","html","codeBlocks","inlineCodes","match","fence","lang","placeholder","length","langTrimmed","push","trimEnd","custom","lines","split","result","inTable","tableLines","i","line","includes","test","tableHtml","buildTable","join","processTable","hashes","content","level","listStack","indent","marker","Math","floor","isOrdered","listType","listItemContent","taskListClass","taskMatch","checked","taskContent","list","pop","type","currentList","liAttr","processLists","alt","src","sanitizedSrc","allow_unsafe_urls","href","sanitizedHref","rel","prefix","sanitizedUrl","forEach","pattern","replacement","block","undefined","langClass","codeAttr","processInlineMarkdown","separatorIndex","headerLines","slice","bodyLines","alignments","cell","trimmed","endsWith","alignStyle","processedCell","emitStyles","css","Object","entries","configure","version","module","exports","window"],"mappings":"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"}