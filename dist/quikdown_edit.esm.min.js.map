{"version":3,"file":"quikdown_edit.esm.min.js","sources":["../src/quikdown.js","../src/quikdown_bd.js","../src/quikdown_edit.js"],"sourcesContent":["/**\n * quikdown - A minimal markdown parser optimized for chat/LLM output\n * Supports tables, code blocks, lists, and common formatting\n * @param {string} markdown - The markdown source text\n * @param {Object} options - Optional configuration object\n * @param {Function} options.fence_plugin - Custom renderer for fenced code blocks\n *                   (content, fence_string) => html string\n * @param {boolean} options.inline_styles - If true, uses inline styles instead of classes\n * @param {boolean} options.bidirectional - If true, adds data-qd attributes for source tracking\n * @param {boolean} options.lazy_linefeeds - If true, single newlines become <br> tags\n * @returns {string} - The rendered HTML\n */\n\n// Version will be injected at build time  \nconst quikdownVersion = '__QUIKDOWN_VERSION__';\n\n// Constants for reuse\nconst CLASS_PREFIX = 'quikdown-';\nconst PLACEHOLDER_CB = '§CB';\nconst PLACEHOLDER_IC = '§IC';\n\n// Escape map at module level\nconst ESC_MAP = {'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'};\n\n// Single source of truth for all style definitions - optimized\nconst QUIKDOWN_STYLES = {\n    h1: 'font-size:2em;font-weight:600;margin:.67em 0;text-align:left',\n    h2: 'font-size:1.5em;font-weight:600;margin:.83em 0',\n    h3: 'font-size:1.25em;font-weight:600;margin:1em 0',\n    h4: 'font-size:1em;font-weight:600;margin:1.33em 0',\n    h5: 'font-size:.875em;font-weight:600;margin:1.67em 0',\n    h6: 'font-size:.85em;font-weight:600;margin:2em 0',\n    pre: 'background:#f4f4f4;padding:10px;border-radius:4px;overflow-x:auto;margin:1em 0',\n    code: 'background:#f0f0f0;padding:2px 4px;border-radius:3px;font-family:monospace',\n    blockquote: 'border-left:4px solid #ddd;margin-left:0;padding-left:1em',\n    table: 'border-collapse:collapse;width:100%;margin:1em 0',\n    th: 'border:1px solid #ddd;padding:8px;background-color:#f2f2f2;font-weight:bold;text-align:left',\n    td: 'border:1px solid #ddd;padding:8px;text-align:left',\n    hr: 'border:none;border-top:1px solid #ddd;margin:1em 0',\n    img: 'max-width:100%;height:auto',\n    a: 'color:#06c;text-decoration:underline',\n    strong: 'font-weight:bold',\n    em: 'font-style:italic',\n    del: 'text-decoration:line-through',\n    ul: 'margin:.5em 0;padding-left:2em',\n    ol: 'margin:.5em 0;padding-left:2em',\n    li: 'margin:.25em 0',\n    // Task list specific styles\n    'task-item': 'list-style:none',\n    'task-checkbox': 'margin-right:.5em'\n};\n\n// Factory function to create getAttr for a given context\nfunction createGetAttr(inline_styles, styles) {\n    return function(tag, additionalStyle = '') {\n        if (inline_styles) {\n            let style = styles[tag];\n            if (!style && !additionalStyle) return '';\n            \n            // Remove default text-align if we're adding a different alignment\n            if (additionalStyle && additionalStyle.includes('text-align') && style && style.includes('text-align')) {\n                style = style.replace(/text-align:[^;]+;?/, '').trim();\n                if (style && !style.endsWith(';')) style += ';';\n            }\n            \n            /* istanbul ignore next - defensive: additionalStyle without style doesn't occur with current tags */\n            const fullStyle = additionalStyle ? (style ? `${style}${additionalStyle}` : additionalStyle) : style;\n            return ` style=\"${fullStyle}\"`;\n        } else {\n            const classAttr = ` class=\"${CLASS_PREFIX}${tag}\"`;\n            // Apply inline styles for alignment even when using CSS classes\n            if (additionalStyle) {\n                return `${classAttr} style=\"${additionalStyle}\"`;\n            }\n            return classAttr;\n        }\n    };\n}\n\nfunction quikdown(markdown, options = {}) {\n    if (!markdown || typeof markdown !== 'string') {\n        return '';\n    }\n    \n    const { fence_plugin, inline_styles = false, bidirectional = false, lazy_linefeeds = false } = options;\n    const styles = QUIKDOWN_STYLES; // Use module-level styles\n    const getAttr = createGetAttr(inline_styles, styles); // Create getAttr once\n\n    // Escape HTML entities to prevent XSS\n    function escapeHtml(text) {\n        return text.replace(/[&<>\"']/g, m => ESC_MAP[m]);\n    }\n    \n    // Helper to add data-qd attributes for bidirectional support\n    const dataQd = bidirectional ? (marker) => ` data-qd=\"${escapeHtml(marker)}\"` : () => '';\n    \n    // Sanitize URLs to prevent XSS attacks\n    function sanitizeUrl(url, allowUnsafe = false) {\n        /* istanbul ignore next - defensive programming, regex ensures url is never empty */\n        if (!url) return '';\n        \n        // If unsafe URLs are explicitly allowed, return as-is\n        if (allowUnsafe) return url;\n        \n        const trimmedUrl = url.trim();\n        const lowerUrl = trimmedUrl.toLowerCase();\n        \n        // Block dangerous protocols\n        const dangerousProtocols = ['javascript:', 'vbscript:', 'data:'];\n        \n        for (const protocol of dangerousProtocols) {\n            if (lowerUrl.startsWith(protocol)) {\n                // Exception: Allow data:image/* for images\n                if (protocol === 'data:' && lowerUrl.startsWith('data:image/')) {\n                    return trimmedUrl;\n                }\n                // Return safe empty link for dangerous protocols\n                return '#';\n            }\n        }\n        \n        return trimmedUrl;\n    }\n\n    // Process the markdown in phases\n    let html = markdown;\n    \n    // Phase 1: Extract and protect code blocks and inline code\n    const codeBlocks = [];\n    const inlineCodes = [];\n    \n    // Extract fenced code blocks first (supports both ``` and ~~~)\n    // Match paired fences - ``` with ``` and ~~~ with ~~~\n    // Fence must be at start of line\n    html = html.replace(/^(```|~~~)([^\\n]*)\\n([\\s\\S]*?)^\\1$/gm, (match, fence, lang, code) => {\n        const placeholder = `${PLACEHOLDER_CB}${codeBlocks.length}§`;\n        \n        // Trim the language specification\n        const langTrimmed = lang ? lang.trim() : '';\n        \n        // If custom fence plugin is provided, use it\n        if (fence_plugin && typeof fence_plugin === 'function') {\n            codeBlocks.push({\n                lang: langTrimmed,\n                code: code.trimEnd(),\n                custom: true,\n                fence: fence\n            });\n        } else {\n            codeBlocks.push({\n                lang: langTrimmed,\n                code: escapeHtml(code.trimEnd()),\n                custom: false,\n                fence: fence\n            });\n        }\n        return placeholder;\n    });\n    \n    // Extract inline code\n    html = html.replace(/`([^`]+)`/g, (match, code) => {\n        const placeholder = `${PLACEHOLDER_IC}${inlineCodes.length}§`;\n        inlineCodes.push(escapeHtml(code));\n        return placeholder;\n    });\n    \n    // Now escape HTML in the rest of the content\n    html = escapeHtml(html);\n    \n    // Phase 2: Process block elements\n    \n    // Process tables\n    html = processTable(html, getAttr);\n    \n    // Process headings (supports optional trailing #'s)\n    html = html.replace(/^(#{1,6})\\s+(.+?)\\s*#*$/gm, (match, hashes, content) => {\n        const level = hashes.length;\n        return `<h${level}${getAttr('h' + level)}${dataQd(hashes)}>${content}</h${level}>`;\n    });\n    \n    // Process blockquotes (must handle escaped > since we already escaped HTML)\n    html = html.replace(/^&gt;\\s+(.+)$/gm, `<blockquote${getAttr('blockquote')}>$1</blockquote>`);\n    // Merge consecutive blockquotes\n    html = html.replace(/<\\/blockquote>\\n<blockquote>/g, '\\n');\n    \n    // Process horizontal rules\n    html = html.replace(/^---+$/gm, `<hr${getAttr('hr')}>`);\n    \n    // Process lists\n    html = processLists(html, getAttr, inline_styles, bidirectional);\n    \n    // Phase 3: Process inline elements\n    \n    // Images (must come before links, with URL sanitization)\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, (match, alt, src) => {\n        const sanitizedSrc = sanitizeUrl(src, options.allow_unsafe_urls);\n        const altAttr = bidirectional && alt ? ` data-qd-alt=\"${escapeHtml(alt)}\"` : '';\n        const srcAttr = bidirectional ? ` data-qd-src=\"${escapeHtml(src)}\"` : '';\n        return `<img${getAttr('img')} src=\"${sanitizedSrc}\" alt=\"${alt}\"${altAttr}${srcAttr}${dataQd('!')}>`;\n    });\n    \n    // Links (with URL sanitization)\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, (match, text, href) => {\n        // Sanitize URL to prevent XSS\n        const sanitizedHref = sanitizeUrl(href, options.allow_unsafe_urls);\n        const isExternal = /^https?:\\/\\//i.test(sanitizedHref);\n        const rel = isExternal ? ' rel=\"noopener noreferrer\"' : '';\n        const textAttr = bidirectional ? ` data-qd-text=\"${escapeHtml(text)}\"` : '';\n        return `<a${getAttr('a')} href=\"${sanitizedHref}\"${rel}${textAttr}${dataQd('[')}>${text}</a>`;\n    });\n    \n    // Autolinks - convert bare URLs to clickable links\n    html = html.replace(/(^|\\s)(https?:\\/\\/[^\\s<]+)/g, (match, prefix, url) => {\n        const sanitizedUrl = sanitizeUrl(url, options.allow_unsafe_urls);\n        return `${prefix}<a${getAttr('a')} href=\"${sanitizedUrl}\" rel=\"noopener noreferrer\">${url}</a>`;\n    });\n    \n    // Process inline formatting (bold, italic, strikethrough)\n    const inlinePatterns = [\n        [/\\*\\*(.+?)\\*\\*/g, 'strong', '**'],\n        [/__(.+?)__/g, 'strong', '__'],\n        [/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, 'em', '*'],\n        [/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, 'em', '_'],\n        [/~~(.+?)~~/g, 'del', '~~']\n    ];\n    \n    inlinePatterns.forEach(([pattern, tag, marker]) => {\n        html = html.replace(pattern, `<${tag}${getAttr(tag)}${dataQd(marker)}>$1</${tag}>`);\n    });\n    \n    // Line breaks\n    if (lazy_linefeeds) {\n        // Lazy linefeeds: single newline becomes <br> (except between paragraphs and after/before block elements)\n        const blocks = [];\n        let bi = 0;\n        \n        // Protect tables and lists  \n        html = html.replace(/<(table|[uo]l)[^>]*>[\\s\\S]*?<\\/\\1>/g, m => {\n            blocks[bi] = m;\n            return `§B${bi++}§`;\n        });\n        \n        // Handle paragraphs and block elements\n        html = html.replace(/\\n\\n+/g, '§P§')\n            // After block elements\n            .replace(/(<\\/(?:h[1-6]|blockquote|pre)>)\\n/g, '$1§N§')\n            .replace(/(<(?:h[1-6]|blockquote|pre|hr)[^>]*>)\\n/g, '$1§N§')\n            // Before block elements  \n            .replace(/\\n(<(?:h[1-6]|blockquote|pre|hr)[^>]*>)/g, '§N§$1')\n            .replace(/\\n(§B\\d+§)/g, '§N§$1')\n            .replace(/(§B\\d+§)\\n/g, '$1§N§')\n            // Convert remaining newlines\n            .replace(/\\n/g, `<br${getAttr('br')}>`)\n            // Restore\n            .replace(/§N§/g, '\\n')\n            .replace(/§P§/g, '</p><p>');\n        \n        // Restore protected blocks\n        blocks.forEach((b, i) => html = html.replace(`§B${i}§`, b));\n        \n        html = '<p>' + html + '</p>';\n    } else {\n        // Standard: two spaces at end of line for line breaks\n        html = html.replace(/  $/gm, `<br${getAttr('br')}>`);\n        \n        // Paragraphs (double newlines)\n        html = html.replace(/\\n\\n+/g, '</p><p>');\n        html = '<p>' + html + '</p>';\n    }\n    \n    // Clean up empty paragraphs and unwrap block elements\n    const cleanupPatterns = [\n        [/<p><\\/p>/g, ''],\n        [/<p>(<h[1-6][^>]*>)/g, '$1'],\n        [/(<\\/h[1-6]>)<\\/p>/g, '$1'],\n        [/<p>(<blockquote[^>]*>)/g, '$1'],\n        [/(<\\/blockquote>)<\\/p>/g, '$1'],\n        [/<p>(<ul[^>]*>|<ol[^>]*>)/g, '$1'],\n        [/(<\\/ul>|<\\/ol>)<\\/p>/g, '$1'],\n        [/<p>(<hr[^>]*>)<\\/p>/g, '$1'],\n        [/<p>(<table[^>]*>)/g, '$1'],\n        [/(<\\/table>)<\\/p>/g, '$1'],\n        [/<p>(<pre[^>]*>)/g, '$1'],\n        [/(<\\/pre>)<\\/p>/g, '$1'],\n        [new RegExp(`<p>(${PLACEHOLDER_CB}\\\\d+§)<\\/p>`, 'g'), '$1']\n    ];\n    \n    cleanupPatterns.forEach(([pattern, replacement]) => {\n        html = html.replace(pattern, replacement);\n    });\n    \n    // Phase 4: Restore code blocks and inline code\n    \n    // Restore code blocks\n    codeBlocks.forEach((block, i) => {\n        let replacement;\n        \n        if (block.custom && fence_plugin) {\n            // Use custom fence plugin\n            replacement = fence_plugin(block.code, block.lang);\n            // If plugin returns undefined, fall back to default rendering\n            if (replacement === undefined) {\n                const langClass = !inline_styles && block.lang ? ` class=\"language-${block.lang}\"` : '';\n                const codeAttr = inline_styles ? getAttr('code') : langClass;\n                const langAttr = bidirectional && block.lang ? ` data-qd-lang=\"${escapeHtml(block.lang)}\"` : '';\n                const fenceAttr = bidirectional ? ` data-qd-fence=\"${escapeHtml(block.fence)}\"` : '';\n                replacement = `<pre${getAttr('pre')}${fenceAttr}${langAttr}><code${codeAttr}>${escapeHtml(block.code)}</code></pre>`;\n            }\n        } else {\n            // Default rendering\n            const langClass = !inline_styles && block.lang ? ` class=\"language-${block.lang}\"` : '';\n            const codeAttr = inline_styles ? getAttr('code') : langClass;\n            const langAttr = bidirectional && block.lang ? ` data-qd-lang=\"${escapeHtml(block.lang)}\"` : '';\n            const fenceAttr = bidirectional ? ` data-qd-fence=\"${escapeHtml(block.fence)}\"` : '';\n            replacement = `<pre${getAttr('pre')}${fenceAttr}${langAttr}><code${codeAttr}>${block.code}</code></pre>`;\n        }\n        \n        const placeholder = `${PLACEHOLDER_CB}${i}§`;\n        html = html.replace(placeholder, replacement);\n    });\n    \n    // Restore inline code\n    inlineCodes.forEach((code, i) => {\n        const placeholder = `${PLACEHOLDER_IC}${i}§`;\n        html = html.replace(placeholder, `<code${getAttr('code')}${dataQd('`')}>${code}</code>`);\n    });\n    \n    return html.trim();\n}\n\n/**\n * Process inline markdown formatting\n */\nfunction processInlineMarkdown(text, getAttr) {\n    \n    // Process inline formatting patterns\n    const patterns = [\n        [/\\*\\*(.+?)\\*\\*/g, 'strong'],\n        [/__(.+?)__/g, 'strong'],\n        [/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, 'em'],\n        [/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, 'em'],\n        [/~~(.+?)~~/g, 'del'],\n        [/`([^`]+)`/g, 'code']\n    ];\n    \n    patterns.forEach(([pattern, tag]) => {\n        text = text.replace(pattern, `<${tag}${getAttr(tag)}>$1</${tag}>`);\n    });\n    \n    return text;\n}\n\n/**\n * Process markdown tables\n */\nfunction processTable(text, getAttr) {\n    const lines = text.split('\\n');\n    const result = [];\n    let inTable = false;\n    let tableLines = [];\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        \n        // Check if this line looks like a table row (with or without trailing |)\n        if (line.includes('|') && (line.startsWith('|') || /[^\\\\|]/.test(line))) {\n            if (!inTable) {\n                inTable = true;\n                tableLines = [];\n            }\n            tableLines.push(line);\n        } else {\n            // Not a table line\n            if (inTable) {\n                // Process the accumulated table\n                const tableHtml = buildTable(tableLines, getAttr);\n                if (tableHtml) {\n                    result.push(tableHtml);\n                } else {\n                    // Not a valid table, restore original lines\n                    result.push(...tableLines);\n                }\n                inTable = false;\n                tableLines = [];\n            }\n            result.push(lines[i]);\n        }\n    }\n    \n    // Handle table at end of text\n    if (inTable && tableLines.length > 0) {\n        const tableHtml = buildTable(tableLines, getAttr);\n        if (tableHtml) {\n            result.push(tableHtml);\n        } else {\n            result.push(...tableLines);\n        }\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Build an HTML table from markdown table lines\n */\nfunction buildTable(lines, getAttr) {\n    \n    if (lines.length < 2) return null;\n    \n    // Check for separator line (second line should be the separator)\n    let separatorIndex = -1;\n    for (let i = 1; i < lines.length; i++) {\n        // Support separator with or without leading/trailing pipes\n        if (/^\\|?[\\s\\-:|]+\\|?$/.test(lines[i]) && lines[i].includes('-')) {\n            separatorIndex = i;\n            break;\n        }\n    }\n    \n    if (separatorIndex === -1) return null;\n    \n    const headerLines = lines.slice(0, separatorIndex);\n    const bodyLines = lines.slice(separatorIndex + 1);\n    \n    // Parse alignment from separator\n    const separator = lines[separatorIndex];\n    // Handle pipes at start/end or not\n    const separatorCells = separator.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n    const alignments = separatorCells.map(cell => {\n        const trimmed = cell.trim();\n        if (trimmed.startsWith(':') && trimmed.endsWith(':')) return 'center';\n        if (trimmed.endsWith(':')) return 'right';\n        return 'left';\n    });\n    \n    let html = `<table${getAttr('table')}>\\n`;\n    \n    // Build header\n    // Note: headerLines will always have length > 0 since separatorIndex starts from 1\n    html += `<thead${getAttr('thead')}>\\n`;\n    headerLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            // Handle pipes at start/end or not\n            const cells = line.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align:${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), getAttr);\n                html += `<th${getAttr('th', alignStyle)}>${processedCell}</th>\\n`;\n            });\n            html += '</tr>\\n';\n    });\n    html += '</thead>\\n';\n    \n    // Build body\n    if (bodyLines.length > 0) {\n        html += `<tbody${getAttr('tbody')}>\\n`;\n        bodyLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            // Handle pipes at start/end or not\n            const cells = line.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align:${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), getAttr);\n                html += `<td${getAttr('td', alignStyle)}>${processedCell}</td>\\n`;\n            });\n            html += '</tr>\\n';\n        });\n        html += '</tbody>\\n';\n    }\n    \n    html += '</table>';\n    return html;\n}\n\n/**\n * Process markdown lists (ordered and unordered)\n */\nfunction processLists(text, getAttr, inline_styles, bidirectional) {\n    \n    const lines = text.split('\\n');\n    const result = [];\n    let listStack = []; // Track nested lists\n    \n    // Helper to escape HTML for data-qd attributes\n    const escapeHtml = (text) => text.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'})[m]);\n    const dataQd = bidirectional ? (marker) => ` data-qd=\"${escapeHtml(marker)}\"` : () => '';\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        const match = line.match(/^(\\s*)([*\\-+]|\\d+\\.)\\s+(.+)$/);\n        \n        if (match) {\n            const [, indent, marker, content] = match;\n            const level = Math.floor(indent.length / 2);\n            const isOrdered = /^\\d+\\./.test(marker);\n            const listType = isOrdered ? 'ol' : 'ul';\n            \n            // Check for task list items\n            let listItemContent = content;\n            let taskListClass = '';\n            const taskMatch = content.match(/^\\[([x ])\\]\\s+(.*)$/i);\n            if (taskMatch && !isOrdered) {\n                const [, checked, taskContent] = taskMatch;\n                const isChecked = checked.toLowerCase() === 'x';\n                const checkboxAttr = inline_styles \n                    ? ' style=\"margin-right:.5em\"' \n                    : ` class=\"${CLASS_PREFIX}task-checkbox\"`;\n                listItemContent = `<input type=\"checkbox\"${checkboxAttr}${isChecked ? ' checked' : ''} disabled> ${taskContent}`;\n                taskListClass = inline_styles ? ' style=\"list-style:none\"' : ` class=\"${CLASS_PREFIX}task-item\"`;\n            }\n            \n            // Close deeper levels\n            while (listStack.length > level + 1) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            \n            // Open new level if needed\n            if (listStack.length === level) {\n                // Need to open a new list\n                listStack.push({ type: listType, level });\n                result.push(`<${listType}${getAttr(listType)}>`);\n            } else if (listStack.length === level + 1) {\n                // Check if we need to switch list type\n                const currentList = listStack[listStack.length - 1];\n                if (currentList.type !== listType) {\n                    result.push(`</${currentList.type}>`);\n                    listStack.pop();\n                    listStack.push({ type: listType, level });\n                    result.push(`<${listType}${getAttr(listType)}>`);\n                }\n            }\n            \n            const liAttr = taskListClass || getAttr('li');\n            result.push(`<li${liAttr}${dataQd(marker)}>${listItemContent}</li>`);\n        } else {\n            // Not a list item, close all lists\n            while (listStack.length > 0) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            result.push(line);\n        }\n    }\n    \n    // Close any remaining lists\n    while (listStack.length > 0) {\n        const list = listStack.pop();\n        result.push(`</${list.type}>`);\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Emit CSS styles for quikdown elements\n * @param {string} prefix - Optional class prefix (default: 'quikdown-')\n * @param {string} theme - Optional theme: 'light' (default) or 'dark'\n * @returns {string} CSS string with quikdown styles\n */\nquikdown.emitStyles = function(prefix = 'quikdown-', theme = 'light') {\n    const styles = QUIKDOWN_STYLES;\n    \n    // Define theme color overrides\n    const themeOverrides = {\n        dark: {\n            '#f4f4f4': '#2a2a2a', // pre background\n            '#f0f0f0': '#2a2a2a', // code background\n            '#f2f2f2': '#2a2a2a', // th background\n            '#ddd': '#3a3a3a',    // borders\n            '#06c': '#6db3f2',    // links\n            _textColor: '#e0e0e0'\n        },\n        light: {\n            _textColor: '#333'    // Explicit text color for light theme\n        }\n    };\n    \n    let css = '';\n    for (const [tag, style] of Object.entries(styles)) {\n        let themedStyle = style;\n            \n            // Apply theme overrides if dark theme\n            if (theme === 'dark' && themeOverrides.dark) {\n                // Replace colors\n                for (const [oldColor, newColor] of Object.entries(themeOverrides.dark)) {\n                    if (!oldColor.startsWith('_')) {\n                        themedStyle = themedStyle.replace(new RegExp(oldColor, 'g'), newColor);\n                    }\n                }\n                \n                // Add text color for certain elements in dark theme\n                const needsTextColor = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'td', 'li', 'blockquote'];\n                if (needsTextColor.includes(tag)) {\n                    themedStyle += `;color:${themeOverrides.dark._textColor}`;\n                }\n            } else if (theme === 'light' && themeOverrides.light) {\n                // Add explicit text color for light theme elements too\n                const needsTextColor = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'td', 'li', 'blockquote'];\n                if (needsTextColor.includes(tag)) {\n                    themedStyle += `;color:${themeOverrides.light._textColor}`;\n                }\n            }\n        \n        css += `.${prefix}${tag} { ${themedStyle} }\\n`;\n    }\n    \n    return css;\n};\n\n/**\n * Configure quikdown with options and return a function\n * @param {Object} options - Configuration options\n * @returns {Function} Configured quikdown function\n */\nquikdown.configure = function(options) {\n    return function(markdown) {\n        return quikdown(markdown, options);\n    };\n};\n\n/**\n * Version information\n */\nquikdown.version = quikdownVersion;\n\n// Export for both CommonJS and ES6\n/* istanbul ignore next */\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = quikdown;\n}\n\n// For browser global\n/* istanbul ignore next */\nif (typeof window !== 'undefined') {\n    window.quikdown = quikdown;\n}\n\nexport default quikdown;","/**\n * quikdown_bd - Bidirectional markdown/HTML converter\n * Extends core quikdown with HTML→Markdown conversion\n * \n * Uses data-qd attributes to preserve original markdown syntax\n * Enables HTML→Markdown conversion for quikdown-generated HTML\n */\n\nimport quikdown from './quikdown.js';\n\n/**\n * Create bidirectional version by extending quikdown\n * This wraps quikdown and adds the toMarkdown method\n */\nfunction quikdown_bd(markdown, options = {}) {\n    // Use core quikdown with bidirectional flag to add data-qd attributes\n    return quikdown(markdown, { ...options, bidirectional: true });\n}\n\n// Copy all properties and methods from quikdown (including version)\nObject.keys(quikdown).forEach(key => {\n    quikdown_bd[key] = quikdown[key];\n});\n\n// Add the toMarkdown method for HTML→Markdown conversion\nquikdown_bd.toMarkdown = function(htmlOrElement) {\n    // Accept either HTML string or DOM element\n    let container;\n    if (typeof htmlOrElement === 'string') {\n        container = document.createElement('div');\n        container.innerHTML = htmlOrElement;\n    } else if (htmlOrElement instanceof Element) {\n        /* istanbul ignore next - browser-only code path, not testable in jsdom */\n        container = htmlOrElement;\n    } else {\n        return '';\n    }\n    \n    // Walk the DOM tree and reconstruct markdown\n    function walkNode(node, parentContext = {}) {\n        if (node.nodeType === Node.TEXT_NODE) {\n            // Return text content, preserving whitespace where needed\n            return node.textContent;\n        }\n        \n        if (node.nodeType !== Node.ELEMENT_NODE) {\n            return '';\n        }\n        \n        const tag = node.tagName.toLowerCase();\n        const dataQd = node.getAttribute('data-qd');\n        \n        // Process children with context\n        let childContent = '';\n        for (let child of node.childNodes) {\n            childContent += walkNode(child, { parentTag: tag, ...parentContext });\n        }\n        \n        // Determine markdown based on element and attributes\n        switch (tag) {\n            case 'h1':\n            case 'h2':\n            case 'h3':\n            case 'h4':\n            case 'h5':\n            case 'h6':\n                const level = parseInt(tag[1]);\n                const prefix = dataQd || '#'.repeat(level);\n                return `${prefix} ${childContent.trim()}\\n\\n`;\n                \n            case 'strong':\n            case 'b':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const boldMarker = dataQd || '**';\n                return `${boldMarker}${childContent}${boldMarker}`;\n                \n            case 'em':\n            case 'i':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const emMarker = dataQd || '*';\n                return `${emMarker}${childContent}${emMarker}`;\n                \n            case 'del':\n            case 's':\n            case 'strike':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const delMarker = dataQd || '~~';\n                return `${delMarker}${childContent}${delMarker}`;\n                \n            case 'code':\n                // Note: code inside pre is handled directly by the pre case using querySelector\n                if (!childContent) return ''; // Don't add markers for empty content\n                const codeMarker = dataQd || '`';\n                return `${codeMarker}${childContent}${codeMarker}`;\n                \n            case 'pre':\n                const fence = node.getAttribute('data-qd-fence') || dataQd || '```';\n                const lang = node.getAttribute('data-qd-lang') || '';\n                // Look for code element child\n                const codeEl = node.querySelector('code');\n                const codeContent = codeEl ? codeEl.textContent : childContent;\n                return `${fence}${lang}\\n${codeContent.trimEnd()}\\n${fence}\\n\\n`;\n                \n            case 'blockquote':\n                const quoteMarker = dataQd || '>';\n                const lines = childContent.trim().split('\\n');\n                return lines.map(line => `${quoteMarker} ${line}`).join('\\n') + '\\n\\n';\n                \n            case 'hr':\n                const hrMarker = dataQd || '---';\n                return `${hrMarker}\\n\\n`;\n                \n            case 'br':\n                const brMarker = dataQd || '  ';\n                return `${brMarker}\\n`;\n                \n            case 'a':\n                const linkText = node.getAttribute('data-qd-text') || childContent.trim();\n                const href = node.getAttribute('href') || '';\n                // Check for autolinks\n                if (linkText === href && !dataQd) {\n                    return `<${href}>`;\n                }\n                return `[${linkText}](${href})`;\n                \n            case 'img':\n                const alt = node.getAttribute('data-qd-alt') || node.getAttribute('alt') || '';\n                const src = node.getAttribute('data-qd-src') || node.getAttribute('src') || '';\n                const imgMarker = dataQd || '!';\n                return `${imgMarker}[${alt}](${src})`;\n                \n            case 'ul':\n            case 'ol':\n                return walkList(node, tag === 'ol') + '\\n';\n                \n            case 'li':\n                // Handled by list processor\n                return childContent;\n                \n            case 'table':\n                return walkTable(node) + '\\n\\n';\n                \n            case 'p':\n                // Check if it's actually a paragraph or just a wrapper\n                if (childContent.trim()) {\n                    return childContent.trim() + '\\n\\n';\n                }\n                return '';\n                \n            case 'div':\n                // Check if it's a mermaid container\n                if (node.classList && node.classList.contains('mermaid-container')) {\n                    const fence = node.getAttribute('data-qd-fence') || '```';\n                    const lang = node.getAttribute('data-qd-lang') || 'mermaid';\n                    \n                    // First check for data-qd-source attribute on the container\n                    const source = node.getAttribute('data-qd-source');\n                    if (source) {\n                        // Decode HTML entities from the attribute (mainly &quot;)\n                        const temp = document.createElement('textarea');\n                        temp.innerHTML = source;\n                        const code = temp.value;\n                        return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                    }\n                    \n                    // Check for source on the pre.mermaid element\n                    const mermaidPre = node.querySelector('pre.mermaid');\n                    if (mermaidPre) {\n                        const preSource = mermaidPre.getAttribute('data-qd-source');\n                        if (preSource) {\n                            const temp = document.createElement('textarea');\n                            temp.innerHTML = preSource;\n                            const code = temp.value;\n                            return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                        }\n                    }\n                    \n                    // Fallback: Look for the legacy .mermaid-source element\n                    const sourceElement = node.querySelector('.mermaid-source');\n                    if (sourceElement) {\n                        // Decode HTML entities\n                        const temp = document.createElement('div');\n                        temp.innerHTML = sourceElement.innerHTML;\n                        const code = temp.textContent;\n                        return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                    }\n                    \n                    // Final fallback: try to extract from the mermaid element (unreliable after rendering)\n                    const mermaidElement = node.querySelector('.mermaid');\n                    if (mermaidElement && mermaidElement.textContent.includes('graph')) {\n                        return `${fence}${lang}\\n${mermaidElement.textContent.trim()}\\n${fence}\\n\\n`;\n                    }\n                }\n                // Check if it's a standalone mermaid diagram (legacy)\n                if (node.classList && node.classList.contains('mermaid')) {\n                    const fence = node.getAttribute('data-qd-fence') || '```';\n                    const lang = node.getAttribute('data-qd-lang') || 'mermaid';\n                    const code = node.textContent.trim();\n                    return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                }\n                // Pass through other divs\n                return childContent;\n            \n            case 'span':\n                // Pass through container elements\n                return childContent;\n                \n            default:\n                return childContent;\n        }\n    }\n    \n    // Walk list elements\n    function walkList(listNode, isOrdered, depth = 0) {\n        let result = '';\n        let index = 1;\n        const indent = '  '.repeat(depth);\n        \n        for (let child of listNode.children) {\n            if (child.tagName !== 'LI') continue;\n            \n            const dataQd = child.getAttribute('data-qd');\n            let marker = dataQd || (isOrdered ? `${index}.` : '-');\n            \n            // Check for task list checkbox\n            const checkbox = child.querySelector('input[type=\"checkbox\"]');\n            if (checkbox) {\n                const checked = checkbox.checked ? 'x' : ' ';\n                marker = '-';\n                // Get text without the checkbox\n                let text = '';\n                for (let node of child.childNodes) {\n                    if (node.nodeType === Node.TEXT_NODE) {\n                        text += node.textContent;\n                    } else if (node.tagName && node.tagName !== 'INPUT') {\n                        text += walkNode(node);\n                    }\n                }\n                result += `${indent}${marker} [${checked}] ${text.trim()}\\n`;\n            } else {\n                let itemContent = '';\n                \n                for (let node of child.childNodes) {\n                    if (node.tagName === 'UL' || node.tagName === 'OL') {\n                        itemContent += walkList(node, node.tagName === 'OL', depth + 1);\n                    } else {\n                        itemContent += walkNode(node);\n                    }\n                }\n                \n                result += `${indent}${marker} ${itemContent.trim()}\\n`;\n            }\n            \n            index++;\n        }\n        \n        return result;\n    }\n    \n    // Walk table elements\n    function walkTable(table) {\n        let result = '';\n        const alignData = table.getAttribute('data-qd-align');\n        const alignments = alignData ? alignData.split(',') : [];\n        \n        // Process header\n        const thead = table.querySelector('thead');\n        if (thead) {\n            const headerRow = thead.querySelector('tr');\n            if (headerRow) {\n                const headers = [];\n                for (let th of headerRow.querySelectorAll('th')) {\n                    headers.push(th.textContent.trim());\n                }\n                result += '| ' + headers.join(' | ') + ' |\\n';\n                \n                // Add separator with alignment\n                const separators = headers.map((_, i) => {\n                    const align = alignments[i] || 'left';\n                    if (align === 'center') return ':---:';\n                    if (align === 'right') return '---:';\n                    return '---';\n                });\n                result += '| ' + separators.join(' | ') + ' |\\n';\n            }\n        }\n        \n        // Process body\n        const tbody = table.querySelector('tbody');\n        if (tbody) {\n            for (let row of tbody.querySelectorAll('tr')) {\n                const cells = [];\n                for (let td of row.querySelectorAll('td')) {\n                    cells.push(td.textContent.trim());\n                }\n                if (cells.length > 0) {\n                    result += '| ' + cells.join(' | ') + ' |\\n';\n                }\n            }\n        }\n        \n        return result.trim();\n    }\n    \n    // Process the DOM tree\n    let markdown = walkNode(container);\n    \n    // Clean up\n    markdown = markdown.replace(/\\n{3,}/g, '\\n\\n'); // Remove excessive newlines\n    markdown = markdown.trim();\n    \n    return markdown;\n};\n\n// Override the configure method to return a bidirectional version\nquikdown_bd.configure = function(options) {\n    return function(markdown) {\n        return quikdown_bd(markdown, options);\n    };\n};\n\n// Set version\n// Version is already copied from quikdown via Object.keys loop\n\n// Export for both module and browser\n/* istanbul ignore next */\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = quikdown_bd;\n}\n\n/* istanbul ignore next */\nif (typeof window !== 'undefined') {\n    window.quikdown_bd = quikdown_bd;\n}\n\nexport default quikdown_bd;","/**\n * Quikdown Editor - A drop-in markdown editor control\n * @version 1.0.5\n * @license BSD-2-Clause\n */\n\nimport quikdown_bd from './quikdown_bd.js';\n\n// Default options\nconst DEFAULT_OPTIONS = {\n    mode: 'split',          // 'source' | 'preview' | 'split'\n    showToolbar: true,\n    theme: 'auto',          // 'light' | 'dark' | 'auto'\n    lazy_linefeeds: false,\n    debounceDelay: 100,\n    placeholder: 'Start typing markdown...',\n    plugins: {\n        highlightjs: false,\n        mermaid: false\n    },\n    customFences: {} // { 'language': (code, lang) => html }\n};\n\n/**\n * Quikdown Editor - A complete markdown editing solution\n */\nclass QuikdownEditor {\n    constructor(container, options = {}) {\n        // Resolve container\n        this.container = typeof container === 'string' \n            ? document.querySelector(container) \n            : container;\n            \n        if (!this.container) {\n            throw new Error('QuikdownEditor: Invalid container');\n        }\n        \n        // Merge options\n        this.options = { ...DEFAULT_OPTIONS, ...options };\n        \n        // State\n        this._markdown = '';\n        this._html = '';\n        this.currentMode = this.options.mode;\n        this.updateTimer = null;\n        \n        // Initialize\n        this.init();\n    }\n    \n    /**\n     * Initialize the editor\n     */\n    async init() {\n        // Load plugins if requested\n        await this.loadPlugins();\n        \n        // Build UI\n        this.buildUI();\n        \n        // Attach event listeners\n        this.attachEvents();\n        \n        // Apply initial theme\n        this.applyTheme();\n        \n        // Set initial mode\n        this.setMode(this.currentMode);\n        \n        // Set initial content if provided\n        if (this.options.initialContent) {\n            this.setMarkdown(this.options.initialContent);\n        }\n    }\n    \n    /**\n     * Build the editor UI\n     */\n    buildUI() {\n        // Clear container\n        this.container.innerHTML = '';\n        \n        // Add editor class\n        this.container.classList.add('qde-container');\n        \n        // Create toolbar if enabled\n        if (this.options.showToolbar) {\n            this.toolbar = this.createToolbar();\n            this.container.appendChild(this.toolbar);\n        }\n        \n        // Create editor area\n        this.editorArea = document.createElement('div');\n        this.editorArea.className = 'qde-editor';\n        \n        // Create source panel\n        this.sourcePanel = document.createElement('div');\n        this.sourcePanel.className = 'qde-source';\n        \n        this.sourceTextarea = document.createElement('textarea');\n        this.sourceTextarea.className = 'qde-textarea';\n        this.sourceTextarea.placeholder = this.options.placeholder;\n        this.sourcePanel.appendChild(this.sourceTextarea);\n        \n        // Create preview panel\n        this.previewPanel = document.createElement('div');\n        this.previewPanel.className = 'qde-preview';\n        this.previewPanel.contentEditable = true;\n        \n        // Add panels to editor\n        this.editorArea.appendChild(this.sourcePanel);\n        this.editorArea.appendChild(this.previewPanel);\n        this.container.appendChild(this.editorArea);\n        \n        // Add built-in styles if not already present\n        this.injectStyles();\n    }\n    \n    /**\n     * Create toolbar\n     */\n    createToolbar() {\n        const toolbar = document.createElement('div');\n        toolbar.className = 'qde-toolbar';\n        \n        // Mode buttons\n        const modes = ['source', 'split', 'preview'];\n        const modeLabels = { source: 'Source', split: 'Split', preview: 'Rendered' };\n        modes.forEach(mode => {\n            const btn = document.createElement('button');\n            btn.className = 'qde-btn';\n            btn.dataset.mode = mode;\n            btn.textContent = modeLabels[mode];\n            btn.title = `Switch to ${modeLabels[mode]} view`;\n            toolbar.appendChild(btn);\n        });\n        \n        // Spacer\n        const spacer = document.createElement('span');\n        spacer.className = 'qde-spacer';\n        toolbar.appendChild(spacer);\n        \n        // Copy buttons\n        const copyButtons = [\n            { action: 'copy-markdown', text: 'Copy MD', title: 'Copy markdown to clipboard' },\n            { action: 'copy-html', text: 'Copy HTML', title: 'Copy HTML to clipboard' }\n        ];\n        \n        copyButtons.forEach(({ action, text, title }) => {\n            const btn = document.createElement('button');\n            btn.className = 'qde-btn';\n            btn.dataset.action = action;\n            btn.textContent = text;\n            btn.title = title;\n            toolbar.appendChild(btn);\n        });\n        \n        return toolbar;\n    }\n    \n    /**\n     * Inject built-in styles\n     */\n    injectStyles() {\n        if (document.getElementById('qde-styles')) return;\n        \n        const style = document.createElement('style');\n        style.id = 'qde-styles';\n        style.textContent = `\n            .qde-container {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                border: 1px solid #ddd;\n                border-radius: 4px;\n                overflow: hidden;\n                background: white;\n            }\n            \n            .qde-toolbar {\n                display: flex;\n                align-items: center;\n                padding: 8px;\n                background: #f5f5f5;\n                border-bottom: 1px solid #ddd;\n                gap: 4px;\n            }\n            \n            .qde-btn {\n                padding: 6px 12px;\n                border: 1px solid #ccc;\n                background: white;\n                border-radius: 3px;\n                cursor: pointer;\n                font-size: 14px;\n                transition: all 0.2s;\n            }\n            \n            .qde-btn:hover {\n                background: #e9e9e9;\n                border-color: #999;\n            }\n            \n            .qde-btn.active {\n                background: #007bff;\n                color: white;\n                border-color: #0056b3;\n            }\n            \n            .qde-spacer {\n                flex: 1;\n            }\n            \n            .qde-editor {\n                display: flex;\n                flex: 1;\n                overflow: hidden;\n            }\n            \n            .qde-source, .qde-preview {\n                flex: 1;\n                overflow: auto;\n                padding: 16px;\n            }\n            \n            .qde-source {\n                border-right: 1px solid #ddd;\n            }\n            \n            .qde-textarea {\n                width: 100%;\n                height: 100%;\n                border: none;\n                outline: none;\n                resize: none;\n                font-family: 'Monaco', 'Courier New', monospace;\n                font-size: 14px;\n                line-height: 1.5;\n            }\n            \n            .qde-preview {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n                font-size: 16px;\n                line-height: 1.6;\n                outline: none;\n            }\n            \n            /* Fix list padding in preview */\n            .qde-preview ul,\n            .qde-preview ol {\n                padding-left: 2em;\n                margin: 0.5em 0;\n            }\n            \n            .qde-preview li {\n                margin: 0.25em 0;\n            }\n            \n            /* Mode-specific visibility */\n            .qde-mode-source .qde-preview { display: none; }\n            .qde-mode-source .qde-source { border-right: none; }\n            .qde-mode-preview .qde-source { display: none; }\n            .qde-mode-split .qde-source,\n            .qde-mode-split .qde-preview { display: block; }\n            \n            /* Dark theme */\n            .qde-dark {\n                background: #1e1e1e;\n                color: #e0e0e0;\n            }\n            \n            .qde-dark .qde-toolbar {\n                background: #2d2d2d;\n                border-color: #444;\n            }\n            \n            .qde-dark .qde-btn {\n                background: #3a3a3a;\n                color: #e0e0e0;\n                border-color: #555;\n            }\n            \n            .qde-dark .qde-btn:hover {\n                background: #4a4a4a;\n            }\n            \n            .qde-dark .qde-source {\n                border-color: #444;\n            }\n            \n            .qde-dark .qde-textarea {\n                background: #1e1e1e;\n                color: #e0e0e0;\n            }\n            \n            .qde-dark .qde-preview {\n                background: #1e1e1e;\n                color: #e0e0e0;\n            }\n            \n            /* Mobile responsive */\n            @media (max-width: 768px) {\n                .qde-mode-split .qde-editor {\n                    flex-direction: column;\n                }\n                \n                .qde-mode-split .qde-source {\n                    border-right: none;\n                    border-bottom: 1px solid #ddd;\n                }\n            }\n        `;\n        \n        document.head.appendChild(style);\n    }\n    \n    /**\n     * Attach event listeners\n     */\n    attachEvents() {\n        // Source textarea input\n        this.sourceTextarea.addEventListener('input', () => {\n            this.handleSourceInput();\n        });\n        \n        // Preview contenteditable input\n        this.previewPanel.addEventListener('input', () => {\n            this.handlePreviewInput();\n        });\n        \n        // Toolbar buttons\n        if (this.toolbar) {\n            this.toolbar.addEventListener('click', (e) => {\n                const btn = e.target.closest('.qde-btn');\n                if (!btn) return;\n                \n                if (btn.dataset.mode) {\n                    this.setMode(btn.dataset.mode);\n                } else if (btn.dataset.action) {\n                    this.handleAction(btn.dataset.action);\n                }\n            });\n        }\n        \n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (e.ctrlKey || e.metaKey) {\n                switch(e.key) {\n                    case '1':\n                        e.preventDefault();\n                        this.setMode('source');\n                        break;\n                    case '2':\n                        e.preventDefault();\n                        this.setMode('split');\n                        break;\n                    case '3':\n                        e.preventDefault();\n                        this.setMode('preview');\n                        break;\n                }\n            }\n        });\n    }\n    \n    /**\n     * Handle source textarea input\n     */\n    handleSourceInput() {\n        clearTimeout(this.updateTimer);\n        this.updateTimer = setTimeout(() => {\n            this.updateFromMarkdown(this.sourceTextarea.value);\n        }, this.options.debounceDelay);\n    }\n    \n    /**\n     * Handle preview panel input\n     */\n    handlePreviewInput() {\n        clearTimeout(this.updateTimer);\n        this.updateTimer = setTimeout(() => {\n            this.updateFromHTML();\n        }, this.options.debounceDelay);\n    }\n    \n    /**\n     * Update from markdown source\n     */\n    updateFromMarkdown(markdown) {\n        this._markdown = markdown || '';\n        \n        // Show placeholder if empty\n        if (!this._markdown.trim()) {\n            this._html = '';\n            if (this.currentMode !== 'source') {\n                this.previewPanel.innerHTML = '<div style=\"color: #999; font-style: italic; padding: 16px;\">Start typing markdown in the source panel...</div>';\n            }\n        } else {\n            this._html = quikdown_bd(markdown, {\n                fence_plugin: this.createFencePlugin(),\n                lazy_linefeeds: this.options.lazy_linefeeds\n            });\n            \n            // Update preview if visible\n            if (this.currentMode !== 'source') {\n                this.previewPanel.innerHTML = this._html;\n            }\n        }\n        \n        // Trigger change event\n        if (this.options.onChange) {\n            this.options.onChange(this._markdown, this._html);\n        }\n    }\n    \n    /**\n     * Update from HTML preview\n     */\n    updateFromHTML() {\n        this._html = this.previewPanel.innerHTML;\n        this._markdown = quikdown_bd.toMarkdown(this.previewPanel);\n        \n        // Update source if visible\n        if (this.currentMode !== 'preview') {\n            this.sourceTextarea.value = this._markdown;\n        }\n        \n        // Trigger change event\n        if (this.options.onChange) {\n            this.options.onChange(this._markdown, this._html);\n        }\n    }\n    \n    /**\n     * Create fence plugin for syntax highlighting\n     */\n    createFencePlugin() {\n        return (code, lang) => {\n            // Check custom fences first\n            if (this.options.customFences && this.options.customFences[lang]) {\n                try {\n                    return this.options.customFences[lang](code, lang);\n                } catch (err) {\n                    console.error(`Custom fence plugin error for ${lang}:`, err);\n                    return `<pre><code class=\"language-${lang}\">${this.escapeHtml(code)}</code></pre>`;\n                }\n            }\n            \n            // Mermaid support\n            if (lang === 'mermaid' && window.mermaid) {\n                const id = `mermaid-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n                setTimeout(() => {\n                    const element = document.getElementById(id);\n                    if (element) {\n                        mermaid.render(id + '-svg', code).then(result => {\n                            element.innerHTML = result.svg;\n                        }).catch(err => {\n                            element.innerHTML = `<pre>Error rendering diagram: ${err.message}</pre>`;\n                        });\n                    }\n                }, 0);\n                return `<div id=\"${id}\" class=\"mermaid\" data-qd-source=\"${this.escapeHtml(code)}\" data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"mermaid\">Loading diagram...</div>`;\n            }\n            \n            // Syntax highlighting support\n            if (window.hljs && lang && hljs.getLanguage(lang)) {\n                const highlighted = hljs.highlight(code, { language: lang }).value;\n                return `<pre data-qd-fence=\"\\`\\`\\`\" data-qd-lang=\"${lang}\"><code class=\"language-${lang}\">${highlighted}</code></pre>`;\n            }\n            \n            // Default: let quikdown handle it\n            return undefined;\n        };\n    }\n    \n    /**\n     * Escape HTML for attributes\n     */\n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n    \n    /**\n     * Load plugins dynamically\n     */\n    async loadPlugins() {\n        const promises = [];\n        \n        // Load highlight.js\n        if (this.options.plugins.highlightjs && !window.hljs) {\n            promises.push(\n                this.loadScript('https://unpkg.com/@highlightjs/cdn-assets/highlight.min.js'),\n                this.loadCSS('https://unpkg.com/@highlightjs/cdn-assets/styles/github.min.css')\n            );\n        }\n        \n        // Load mermaid\n        if (this.options.plugins.mermaid && !window.mermaid) {\n            promises.push(\n                this.loadScript('https://unpkg.com/mermaid/dist/mermaid.min.js').then(() => {\n                    if (window.mermaid) {\n                        mermaid.initialize({ startOnLoad: false });\n                    }\n                })\n            );\n        }\n        \n        await Promise.all(promises);\n    }\n    \n    /**\n     * Load external script\n     */\n    loadScript(src) {\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n            script.src = src;\n            script.onload = resolve;\n            script.onerror = reject;\n            document.head.appendChild(script);\n        });\n    }\n    \n    /**\n     * Load external CSS\n     */\n    loadCSS(href) {\n        return new Promise((resolve) => {\n            const link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.href = href;\n            link.onload = resolve;\n            document.head.appendChild(link);\n            // Resolve anyway after timeout (CSS doesn't always fire onload)\n            setTimeout(resolve, 1000);\n        });\n    }\n    \n    /**\n     * Apply theme\n     */\n    applyTheme() {\n        const theme = this.options.theme;\n        \n        if (theme === 'auto') {\n            // Check system preference\n            const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n            this.container.classList.toggle('qde-dark', isDark);\n            \n            // Listen for changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {\n                this.container.classList.toggle('qde-dark', e.matches);\n            });\n        } else {\n            this.container.classList.toggle('qde-dark', theme === 'dark');\n        }\n    }\n    \n    /**\n     * Set lazy linefeeds option\n     * @param {boolean} enabled - Whether to enable lazy linefeeds\n     */\n    setLazyLinefeeds(enabled) {\n        this.options.lazy_linefeeds = enabled;\n        // Re-render if we have content\n        if (this._markdown) {\n            this.updateFromSource();\n        }\n    }\n    \n    /**\n     * Get lazy linefeeds option\n     * @returns {boolean}\n     */\n    getLazyLinefeeds() {\n        return this.options.lazy_linefeeds;\n    }\n    \n    /**\n     * Set editor mode\n     */\n    setMode(mode) {\n        if (!['source', 'preview', 'split'].includes(mode)) return;\n        \n        this.currentMode = mode;\n        this.container.className = `qde-container qde-mode-${mode}`;\n        \n        // Update toolbar buttons\n        if (this.toolbar) {\n            this.toolbar.querySelectorAll('.qde-btn[data-mode]').forEach(btn => {\n                btn.classList.toggle('active', btn.dataset.mode === mode);\n            });\n        }\n        \n        // Apply theme class\n        if (this.container.classList.contains('qde-dark')) {\n            this.container.classList.add('qde-dark');\n        }\n        \n        // Trigger mode change event\n        if (this.options.onModeChange) {\n            this.options.onModeChange(mode);\n        }\n    }\n    \n    /**\n     * Handle toolbar actions\n     */\n    handleAction(action) {\n        switch(action) {\n            case 'copy-markdown':\n                this.copy('markdown');\n                break;\n            case 'copy-html':\n                this.copy('html');\n                break;\n        }\n    }\n    \n    /**\n     * Copy content to clipboard\n     */\n    async copy(type) {\n        const content = type === 'markdown' ? this._markdown : this._html;\n        \n        try {\n            await navigator.clipboard.writeText(content);\n            \n            // Visual feedback\n            const btn = this.toolbar.querySelector(`[data-action=\"copy-${type}\"]`);\n            if (btn) {\n                const originalText = btn.textContent;\n                btn.textContent = 'Copied!';\n                setTimeout(() => {\n                    btn.textContent = originalText;\n                }, 1500);\n            }\n        } catch (err) {\n            console.error('Failed to copy:', err);\n        }\n    }\n    \n    // Public API\n    \n    /**\n     * Get current markdown\n     */\n    get markdown() {\n        return this._markdown;\n    }\n    \n    /**\n     * Set markdown content\n     */\n    set markdown(value) {\n        this.setMarkdown(value);\n    }\n    \n    /**\n     * Get current HTML\n     */\n    get html() {\n        return this._html;\n    }\n    \n    /**\n     * Get current mode\n     */\n    get mode() {\n        return this.currentMode;\n    }\n    \n    /**\n     * Set markdown content\n     */\n    setMarkdown(markdown) {\n        this._markdown = markdown;\n        if (this.sourceTextarea) {\n            this.sourceTextarea.value = markdown;\n        }\n        this.updateFromMarkdown(markdown);\n    }\n    \n    /**\n     * Get markdown content\n     */\n    getMarkdown() {\n        return this._markdown;\n    }\n    \n    /**\n     * Get HTML content\n     */\n    getHTML() {\n        return this._html;\n    }\n    \n    /**\n     * Destroy the editor\n     */\n    destroy() {\n        // Clear timers\n        clearTimeout(this.updateTimer);\n        \n        // Clear container\n        this.container.innerHTML = '';\n        this.container.classList.remove('qde-container', 'qde-dark');\n        \n        // Remove injected styles (only if no other editors exist)\n        const otherEditors = document.querySelectorAll('.qde-container');\n        if (otherEditors.length === 0) {\n            const style = document.getElementById('qde-styles');\n            if (style) style.remove();\n        }\n    }\n}\n\n// Export\nexport default QuikdownEditor;\n\n// Also export for UMD builds\nif (typeof window !== 'undefined') {\n    window.QuikdownEditor = QuikdownEditor;\n}"],"names":["CLASS_PREFIX","PLACEHOLDER_CB","ESC_MAP","QUIKDOWN_STYLES","h1","h2","h3","h4","h5","h6","pre","code","blockquote","table","th","td","hr","img","a","strong","em","del","ul","ol","li","quikdown","markdown","options","fence_plugin","inline_styles","bidirectional","lazy_linefeeds","getAttr","styles","tag","additionalStyle","style","includes","replace","trim","endsWith","classAttr","createGetAttr","escapeHtml","text","m","dataQd","marker","sanitizeUrl","url","allowUnsafe","trimmedUrl","lowerUrl","toLowerCase","dangerousProtocols","protocol","startsWith","html","codeBlocks","inlineCodes","match","fence","lang","placeholder","length","langTrimmed","push","trimEnd","custom","lines","split","result","inTable","tableLines","i","line","test","tableHtml","buildTable","join","processTable","hashes","content","level","listStack","indent","Math","floor","isOrdered","listType","listItemContent","taskListClass","taskMatch","checked","taskContent","isChecked","list","pop","type","currentList","liAttr","processLists","alt","src","sanitizedSrc","allow_unsafe_urls","altAttr","srcAttr","href","sanitizedHref","rel","textAttr","prefix","sanitizedUrl","forEach","pattern","blocks","bi","b","RegExp","replacement","block","undefined","langClass","codeAttr","langAttr","fenceAttr","processInlineMarkdown","separatorIndex","headerLines","slice","bodyLines","alignments","map","cell","trimmed","alignStyle","processedCell","quikdown_bd","emitStyles","theme","themeOverrides","_textColor","css","Object","entries","themedStyle","oldColor","newColor","configure","version","module","exports","window","keys","key","toMarkdown","htmlOrElement","container","document","createElement","innerHTML","Element","walkNode","node","parentContext","nodeType","Node","TEXT_NODE","textContent","ELEMENT_NODE","tagName","getAttribute","childContent","child","childNodes","parentTag","parseInt","repeat","boldMarker","emMarker","delMarker","codeMarker","codeEl","querySelector","quoteMarker","linkText","walkList","alignData","thead","headerRow","headers","querySelectorAll","_","align","tbody","row","cells","walkTable","classList","contains","source","temp","value","mermaidPre","preSource","sourceElement","mermaidElement","listNode","depth","index","children","checkbox","itemContent","DEFAULT_OPTIONS","mode","showToolbar","debounceDelay","plugins","highlightjs","mermaid","customFences","QuikdownEditor","constructor","this","Error","_markdown","_html","currentMode","updateTimer","init","loadPlugins","buildUI","attachEvents","applyTheme","setMode","initialContent","setMarkdown","add","toolbar","createToolbar","appendChild","editorArea","className","sourcePanel","sourceTextarea","previewPanel","contentEditable","injectStyles","modeLabels","preview","btn","dataset","title","spacer","action","getElementById","id","head","addEventListener","handleSourceInput","handlePreviewInput","e","target","closest","handleAction","ctrlKey","metaKey","preventDefault","clearTimeout","setTimeout","updateFromMarkdown","updateFromHTML","createFencePlugin","onChange","err","console","error","Date","now","random","toString","substr","element","render","then","svg","catch","message","hljs","getLanguage","highlight","language","div","promises","loadScript","loadCSS","initialize","startOnLoad","Promise","all","resolve","reject","script","onload","onerror","link","isDark","matchMedia","matches","toggle","setLazyLinefeeds","enabled","updateFromSource","getLazyLinefeeds","onModeChange","copy","navigator","clipboard","writeText","originalText","getMarkdown","getHTML","destroy","remove"],"mappings":"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"}