{"version":3,"file":"quikdown_bd.umd.min.js","sources":["../src/quikdown.js","../src/quikdown_bd.js"],"sourcesContent":["/**\n * quikdown - A minimal markdown parser optimized for chat/LLM output\n * Supports tables, code blocks, lists, and common formatting\n * @param {string} markdown - The markdown source text\n * @param {Object} options - Optional configuration object\n * @param {Function} options.fence_plugin - Custom renderer for fenced code blocks\n *                   (content, fence_string) => html string\n * @param {boolean} options.inline_styles - If true, uses inline styles instead of classes\n * @returns {string} - The rendered HTML\n */\n\n// Version will be injected at build time  \nconst quikdownVersion = '__QUIKDOWN_VERSION__';\n\n// Constants for reuse\nconst CLASS_PREFIX = 'quikdown-';\nconst PLACEHOLDER_CB = '§CB';\nconst PLACEHOLDER_IC = '§IC';\n\n// Escape map at module level\nconst ESC_MAP = {'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'};\n\n// Single source of truth for all style definitions - optimized\nconst QUIKDOWN_STYLES = {\n    h1: 'font-size:2em;font-weight:600;margin:.67em 0;text-align:left',\n    h2: 'font-size:1.5em;font-weight:600;margin:.83em 0',\n    h3: 'font-size:1.25em;font-weight:600;margin:1em 0',\n    h4: 'font-size:1em;font-weight:600;margin:1.33em 0',\n    h5: 'font-size:.875em;font-weight:600;margin:1.67em 0',\n    h6: 'font-size:.85em;font-weight:600;margin:2em 0',\n    pre: 'background:#f4f4f4;padding:10px;border-radius:4px;overflow-x:auto;margin:1em 0',\n    code: 'background:#f0f0f0;padding:2px 4px;border-radius:3px;font-family:monospace',\n    blockquote: 'border-left:4px solid #ddd;margin-left:0;padding-left:1em',\n    table: 'border-collapse:collapse;width:100%;margin:1em 0',\n    th: 'border:1px solid #ddd;padding:8px;background-color:#f2f2f2;font-weight:bold;text-align:left',\n    td: 'border:1px solid #ddd;padding:8px;text-align:left',\n    hr: 'border:none;border-top:1px solid #ddd;margin:1em 0',\n    img: 'max-width:100%;height:auto',\n    a: 'color:#06c;text-decoration:underline',\n    strong: 'font-weight:bold',\n    em: 'font-style:italic',\n    del: 'text-decoration:line-through',\n    ul: 'margin:.5em 0;padding-left:2em',\n    ol: 'margin:.5em 0;padding-left:2em',\n    li: 'margin:.25em 0',\n    // Task list specific styles\n    'task-item': 'list-style:none',\n    'task-checkbox': 'margin-right:.5em'\n};\n\n// Factory function to create getAttr for a given context\nfunction createGetAttr(inline_styles, styles) {\n    return function(tag, additionalStyle = '') {\n        if (inline_styles) {\n            const style = styles[tag];\n            if (!style && !additionalStyle) return '';\n            /* istanbul ignore next - defensive: additionalStyle without style doesn't occur with current tags */\n            const fullStyle = additionalStyle ? (style ? `${style};${additionalStyle}` : additionalStyle) : style;\n            return ` style=\"${fullStyle}\"`;\n        } else {\n            return ` class=\"${CLASS_PREFIX}${tag}\"`;\n        }\n    };\n}\n\nfunction quikdown(markdown, options = {}) {\n    if (!markdown || typeof markdown !== 'string') {\n        return '';\n    }\n    \n    const { fence_plugin, inline_styles = false, bidirectional = false } = options;\n    const styles = QUIKDOWN_STYLES; // Use module-level styles\n    const getAttr = createGetAttr(inline_styles, styles); // Create getAttr once\n\n    // Escape HTML entities to prevent XSS\n    function escapeHtml(text) {\n        return text.replace(/[&<>\"']/g, m => ESC_MAP[m]);\n    }\n    \n    // Helper to add data-qd attributes for bidirectional support\n    const dataQd = bidirectional ? (marker) => ` data-qd=\"${escapeHtml(marker)}\"` : () => '';\n    \n    // Sanitize URLs to prevent XSS attacks\n    function sanitizeUrl(url, allowUnsafe = false) {\n        /* istanbul ignore next - defensive programming, regex ensures url is never empty */\n        if (!url) return '';\n        \n        // If unsafe URLs are explicitly allowed, return as-is\n        if (allowUnsafe) return url;\n        \n        const trimmedUrl = url.trim();\n        const lowerUrl = trimmedUrl.toLowerCase();\n        \n        // Block dangerous protocols\n        const dangerousProtocols = ['javascript:', 'vbscript:', 'data:'];\n        \n        for (const protocol of dangerousProtocols) {\n            if (lowerUrl.startsWith(protocol)) {\n                // Exception: Allow data:image/* for images\n                if (protocol === 'data:' && lowerUrl.startsWith('data:image/')) {\n                    return trimmedUrl;\n                }\n                // Return safe empty link for dangerous protocols\n                return '#';\n            }\n        }\n        \n        return trimmedUrl;\n    }\n\n    // Process the markdown in phases\n    let html = markdown;\n    \n    // Phase 1: Extract and protect code blocks and inline code\n    const codeBlocks = [];\n    const inlineCodes = [];\n    \n    // Extract fenced code blocks first (supports both ``` and ~~~)\n    // Match paired fences - ``` with ``` and ~~~ with ~~~\n    // Fence must be at start of line\n    html = html.replace(/^(```|~~~)([^\\n]*)\\n([\\s\\S]*?)^\\1$/gm, (match, fence, lang, code) => {\n        const placeholder = `${PLACEHOLDER_CB}${codeBlocks.length}§`;\n        \n        // Trim the language specification\n        const langTrimmed = lang ? lang.trim() : '';\n        \n        // If custom fence plugin is provided, use it\n        if (fence_plugin && typeof fence_plugin === 'function') {\n            codeBlocks.push({\n                lang: langTrimmed,\n                code: code.trimEnd(),\n                custom: true,\n                fence: fence\n            });\n        } else {\n            codeBlocks.push({\n                lang: langTrimmed,\n                code: escapeHtml(code.trimEnd()),\n                custom: false,\n                fence: fence\n            });\n        }\n        return placeholder;\n    });\n    \n    // Extract inline code\n    html = html.replace(/`([^`]+)`/g, (match, code) => {\n        const placeholder = `${PLACEHOLDER_IC}${inlineCodes.length}§`;\n        inlineCodes.push(escapeHtml(code));\n        return placeholder;\n    });\n    \n    // Now escape HTML in the rest of the content\n    html = escapeHtml(html);\n    \n    // Phase 2: Process block elements\n    \n    // Process tables\n    html = processTable(html, getAttr);\n    \n    // Process headings (supports optional trailing #'s)\n    html = html.replace(/^(#{1,6})\\s+(.+?)\\s*#*$/gm, (match, hashes, content) => {\n        const level = hashes.length;\n        return `<h${level}${getAttr('h' + level)}${dataQd(hashes)}>${content}</h${level}>`;\n    });\n    \n    // Process blockquotes (must handle escaped > since we already escaped HTML)\n    html = html.replace(/^&gt;\\s+(.+)$/gm, `<blockquote${getAttr('blockquote')}>$1</blockquote>`);\n    // Merge consecutive blockquotes\n    html = html.replace(/<\\/blockquote>\\n<blockquote>/g, '\\n');\n    \n    // Process horizontal rules\n    html = html.replace(/^---+$/gm, `<hr${getAttr('hr')}>`);\n    \n    // Process lists\n    html = processLists(html, getAttr, inline_styles, bidirectional);\n    \n    // Phase 3: Process inline elements\n    \n    // Images (must come before links, with URL sanitization)\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, (match, alt, src) => {\n        const sanitizedSrc = sanitizeUrl(src, options.allow_unsafe_urls);\n        const altAttr = bidirectional && alt ? ` data-qd-alt=\"${escapeHtml(alt)}\"` : '';\n        const srcAttr = bidirectional ? ` data-qd-src=\"${escapeHtml(src)}\"` : '';\n        return `<img${getAttr('img')} src=\"${sanitizedSrc}\" alt=\"${alt}\"${altAttr}${srcAttr}${dataQd('!')}>`;\n    });\n    \n    // Links (with URL sanitization)\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, (match, text, href) => {\n        // Sanitize URL to prevent XSS\n        const sanitizedHref = sanitizeUrl(href, options.allow_unsafe_urls);\n        const isExternal = /^https?:\\/\\//i.test(sanitizedHref);\n        const rel = isExternal ? ' rel=\"noopener noreferrer\"' : '';\n        const textAttr = bidirectional ? ` data-qd-text=\"${escapeHtml(text)}\"` : '';\n        return `<a${getAttr('a')} href=\"${sanitizedHref}\"${rel}${textAttr}${dataQd('[')}>${text}</a>`;\n    });\n    \n    // Autolinks - convert bare URLs to clickable links\n    html = html.replace(/(^|\\s)(https?:\\/\\/[^\\s<]+)/g, (match, prefix, url) => {\n        const sanitizedUrl = sanitizeUrl(url, options.allow_unsafe_urls);\n        return `${prefix}<a${getAttr('a')} href=\"${sanitizedUrl}\" rel=\"noopener noreferrer\">${url}</a>`;\n    });\n    \n    // Process inline formatting (bold, italic, strikethrough)\n    const inlinePatterns = [\n        [/\\*\\*(.+?)\\*\\*/g, 'strong', '**'],\n        [/__(.+?)__/g, 'strong', '__'],\n        [/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, 'em', '*'],\n        [/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, 'em', '_'],\n        [/~~(.+?)~~/g, 'del', '~~']\n    ];\n    \n    inlinePatterns.forEach(([pattern, tag, marker]) => {\n        html = html.replace(pattern, `<${tag}${getAttr(tag)}${dataQd(marker)}>$1</${tag}>`);\n    });\n    \n    // Line breaks (two spaces at end of line)\n    html = html.replace(/  $/gm, `<br${getAttr('br')}>`);\n    \n    // Paragraphs (double newlines)\n    html = html.replace(/\\n\\n+/g, '</p><p>');\n    html = '<p>' + html + '</p>';\n    \n    // Clean up empty paragraphs and unwrap block elements\n    const cleanupPatterns = [\n        [/<p><\\/p>/g, ''],\n        [/<p>(<h[1-6][^>]*>)/g, '$1'],\n        [/(<\\/h[1-6]>)<\\/p>/g, '$1'],\n        [/<p>(<blockquote[^>]*>)/g, '$1'],\n        [/(<\\/blockquote>)<\\/p>/g, '$1'],\n        [/<p>(<ul[^>]*>|<ol[^>]*>)/g, '$1'],\n        [/(<\\/ul>|<\\/ol>)<\\/p>/g, '$1'],\n        [/<p>(<hr[^>]*>)<\\/p>/g, '$1'],\n        [/<p>(<table[^>]*>)/g, '$1'],\n        [/(<\\/table>)<\\/p>/g, '$1'],\n        [/<p>(<pre[^>]*>)/g, '$1'],\n        [/(<\\/pre>)<\\/p>/g, '$1'],\n        [new RegExp(`<p>(${PLACEHOLDER_CB}\\\\d+§)<\\/p>`, 'g'), '$1']\n    ];\n    \n    cleanupPatterns.forEach(([pattern, replacement]) => {\n        html = html.replace(pattern, replacement);\n    });\n    \n    // Phase 4: Restore code blocks and inline code\n    \n    // Restore code blocks\n    codeBlocks.forEach((block, i) => {\n        let replacement;\n        \n        if (block.custom && fence_plugin) {\n            // Use custom fence plugin\n            replacement = fence_plugin(block.code, block.lang);\n            // If plugin returns undefined, fall back to default rendering\n            if (replacement === undefined) {\n                const langClass = !inline_styles && block.lang ? ` class=\"language-${block.lang}\"` : '';\n                const codeAttr = inline_styles ? getAttr('code') : langClass;\n                const langAttr = bidirectional && block.lang ? ` data-qd-lang=\"${escapeHtml(block.lang)}\"` : '';\n                const fenceAttr = bidirectional ? ` data-qd-fence=\"${escapeHtml(block.fence)}\"` : '';\n                replacement = `<pre${getAttr('pre')}${fenceAttr}${langAttr}><code${codeAttr}>${escapeHtml(block.code)}</code></pre>`;\n            }\n        } else {\n            // Default rendering\n            const langClass = !inline_styles && block.lang ? ` class=\"language-${block.lang}\"` : '';\n            const codeAttr = inline_styles ? getAttr('code') : langClass;\n            const langAttr = bidirectional && block.lang ? ` data-qd-lang=\"${escapeHtml(block.lang)}\"` : '';\n            const fenceAttr = bidirectional ? ` data-qd-fence=\"${escapeHtml(block.fence)}\"` : '';\n            replacement = `<pre${getAttr('pre')}${fenceAttr}${langAttr}><code${codeAttr}>${block.code}</code></pre>`;\n        }\n        \n        const placeholder = `${PLACEHOLDER_CB}${i}§`;\n        html = html.replace(placeholder, replacement);\n    });\n    \n    // Restore inline code\n    inlineCodes.forEach((code, i) => {\n        const placeholder = `${PLACEHOLDER_IC}${i}§`;\n        html = html.replace(placeholder, `<code${getAttr('code')}${dataQd('`')}>${code}</code>`);\n    });\n    \n    return html.trim();\n}\n\n/**\n * Process inline markdown formatting\n */\nfunction processInlineMarkdown(text, getAttr) {\n    \n    // Process inline formatting patterns\n    const patterns = [\n        [/\\*\\*(.+?)\\*\\*/g, 'strong'],\n        [/__(.+?)__/g, 'strong'],\n        [/(?<!\\*)\\*(?!\\*)(.+?)(?<!\\*)\\*(?!\\*)/g, 'em'],\n        [/(?<!_)_(?!_)(.+?)(?<!_)_(?!_)/g, 'em'],\n        [/~~(.+?)~~/g, 'del'],\n        [/`([^`]+)`/g, 'code']\n    ];\n    \n    patterns.forEach(([pattern, tag]) => {\n        text = text.replace(pattern, `<${tag}${getAttr(tag)}>$1</${tag}>`);\n    });\n    \n    return text;\n}\n\n/**\n * Process markdown tables\n */\nfunction processTable(text, getAttr) {\n    const lines = text.split('\\n');\n    const result = [];\n    let inTable = false;\n    let tableLines = [];\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        \n        // Check if this line looks like a table row (with or without trailing |)\n        if (line.includes('|') && (line.startsWith('|') || /[^\\\\|]/.test(line))) {\n            if (!inTable) {\n                inTable = true;\n                tableLines = [];\n            }\n            tableLines.push(line);\n        } else {\n            // Not a table line\n            if (inTable) {\n                // Process the accumulated table\n                const tableHtml = buildTable(tableLines, getAttr);\n                if (tableHtml) {\n                    result.push(tableHtml);\n                } else {\n                    // Not a valid table, restore original lines\n                    result.push(...tableLines);\n                }\n                inTable = false;\n                tableLines = [];\n            }\n            result.push(lines[i]);\n        }\n    }\n    \n    // Handle table at end of text\n    if (inTable && tableLines.length > 0) {\n        const tableHtml = buildTable(tableLines, getAttr);\n        if (tableHtml) {\n            result.push(tableHtml);\n        } else {\n            result.push(...tableLines);\n        }\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Build an HTML table from markdown table lines\n */\nfunction buildTable(lines, getAttr) {\n    \n    if (lines.length < 2) return null;\n    \n    // Check for separator line (second line should be the separator)\n    let separatorIndex = -1;\n    for (let i = 1; i < lines.length; i++) {\n        // Support separator with or without leading/trailing pipes\n        if (/^\\|?[\\s\\-:|]+\\|?$/.test(lines[i]) && lines[i].includes('-')) {\n            separatorIndex = i;\n            break;\n        }\n    }\n    \n    if (separatorIndex === -1) return null;\n    \n    const headerLines = lines.slice(0, separatorIndex);\n    const bodyLines = lines.slice(separatorIndex + 1);\n    \n    // Parse alignment from separator\n    const separator = lines[separatorIndex];\n    // Handle pipes at start/end or not\n    const separatorCells = separator.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n    const alignments = separatorCells.map(cell => {\n        const trimmed = cell.trim();\n        if (trimmed.startsWith(':') && trimmed.endsWith(':')) return 'center';\n        if (trimmed.endsWith(':')) return 'right';\n        return 'left';\n    });\n    \n    let html = `<table${getAttr('table')}>\\n`;\n    \n    // Build header\n    // Note: headerLines will always have length > 0 since separatorIndex starts from 1\n    html += `<thead${getAttr('thead')}>\\n`;\n    headerLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            // Handle pipes at start/end or not\n            const cells = line.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align:${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), getAttr);\n                html += `<th${getAttr('th', alignStyle)}>${processedCell}</th>\\n`;\n            });\n            html += '</tr>\\n';\n    });\n    html += '</thead>\\n';\n    \n    // Build body\n    if (bodyLines.length > 0) {\n        html += `<tbody${getAttr('tbody')}>\\n`;\n        bodyLines.forEach(line => {\n            html += `<tr${getAttr('tr')}>\\n`;\n            // Handle pipes at start/end or not\n            const cells = line.trim().replace(/^\\|/, '').replace(/\\|$/, '').split('|');\n            cells.forEach((cell, i) => {\n                const alignStyle = alignments[i] && alignments[i] !== 'left' ? `text-align:${alignments[i]}` : '';\n                const processedCell = processInlineMarkdown(cell.trim(), getAttr);\n                html += `<td${getAttr('td', alignStyle)}>${processedCell}</td>\\n`;\n            });\n            html += '</tr>\\n';\n        });\n        html += '</tbody>\\n';\n    }\n    \n    html += '</table>';\n    return html;\n}\n\n/**\n * Process markdown lists (ordered and unordered)\n */\nfunction processLists(text, getAttr, inline_styles, bidirectional) {\n    \n    const lines = text.split('\\n');\n    const result = [];\n    let listStack = []; // Track nested lists\n    \n    // Helper to escape HTML for data-qd attributes\n    const escapeHtml = (text) => text.replace(/[&<>\"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'})[m]);\n    const dataQd = bidirectional ? (marker) => ` data-qd=\"${escapeHtml(marker)}\"` : () => '';\n    \n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        const match = line.match(/^(\\s*)([*\\-+]|\\d+\\.)\\s+(.+)$/);\n        \n        if (match) {\n            const [, indent, marker, content] = match;\n            const level = Math.floor(indent.length / 2);\n            const isOrdered = /^\\d+\\./.test(marker);\n            const listType = isOrdered ? 'ol' : 'ul';\n            \n            // Check for task list items\n            let listItemContent = content;\n            let taskListClass = '';\n            const taskMatch = content.match(/^\\[([x ])\\]\\s+(.*)$/i);\n            if (taskMatch && !isOrdered) {\n                const [, checked, taskContent] = taskMatch;\n                const isChecked = checked.toLowerCase() === 'x';\n                const checkboxAttr = inline_styles \n                    ? ' style=\"margin-right:.5em\"' \n                    : ` class=\"${CLASS_PREFIX}task-checkbox\"`;\n                listItemContent = `<input type=\"checkbox\"${checkboxAttr}${isChecked ? ' checked' : ''} disabled> ${taskContent}`;\n                taskListClass = inline_styles ? ' style=\"list-style:none\"' : ` class=\"${CLASS_PREFIX}task-item\"`;\n            }\n            \n            // Close deeper levels\n            while (listStack.length > level + 1) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            \n            // Open new level if needed\n            if (listStack.length === level) {\n                // Need to open a new list\n                listStack.push({ type: listType, level });\n                result.push(`<${listType}${getAttr(listType)}>`);\n            } else if (listStack.length === level + 1) {\n                // Check if we need to switch list type\n                const currentList = listStack[listStack.length - 1];\n                if (currentList.type !== listType) {\n                    result.push(`</${currentList.type}>`);\n                    listStack.pop();\n                    listStack.push({ type: listType, level });\n                    result.push(`<${listType}${getAttr(listType)}>`);\n                }\n            }\n            \n            const liAttr = taskListClass || getAttr('li');\n            result.push(`<li${liAttr}${dataQd(marker)}>${listItemContent}</li>`);\n        } else {\n            // Not a list item, close all lists\n            while (listStack.length > 0) {\n                const list = listStack.pop();\n                result.push(`</${list.type}>`);\n            }\n            result.push(line);\n        }\n    }\n    \n    // Close any remaining lists\n    while (listStack.length > 0) {\n        const list = listStack.pop();\n        result.push(`</${list.type}>`);\n    }\n    \n    return result.join('\\n');\n}\n\n/**\n * Emit CSS styles for quikdown elements\n * @param {string} prefix - Optional class prefix (default: 'quikdown-')\n * @param {string} theme - Optional theme: 'light' (default) or 'dark'\n * @returns {string} CSS string with quikdown styles\n */\nquikdown.emitStyles = function(prefix = 'quikdown-', theme = 'light') {\n    const styles = QUIKDOWN_STYLES;\n    \n    // Define theme color overrides\n    const themeOverrides = {\n        dark: {\n            '#f4f4f4': '#2a2a2a', // pre background\n            '#f0f0f0': '#2a2a2a', // code background\n            '#f2f2f2': '#2a2a2a', // th background\n            '#ddd': '#3a3a3a',    // borders\n            '#06c': '#6db3f2',    // links\n            _textColor: '#e0e0e0'\n        },\n        light: {\n            _textColor: '#333'    // Explicit text color for light theme\n        }\n    };\n    \n    let css = '';\n    for (const [tag, style] of Object.entries(styles)) {\n        let themedStyle = style;\n            \n            // Apply theme overrides if dark theme\n            if (theme === 'dark' && themeOverrides.dark) {\n                // Replace colors\n                for (const [oldColor, newColor] of Object.entries(themeOverrides.dark)) {\n                    if (!oldColor.startsWith('_')) {\n                        themedStyle = themedStyle.replace(new RegExp(oldColor, 'g'), newColor);\n                    }\n                }\n                \n                // Add text color for certain elements in dark theme\n                const needsTextColor = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'td', 'li', 'blockquote'];\n                if (needsTextColor.includes(tag)) {\n                    themedStyle += `;color:${themeOverrides.dark._textColor}`;\n                }\n            } else if (theme === 'light' && themeOverrides.light) {\n                // Add explicit text color for light theme elements too\n                const needsTextColor = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'td', 'li', 'blockquote'];\n                if (needsTextColor.includes(tag)) {\n                    themedStyle += `;color:${themeOverrides.light._textColor}`;\n                }\n            }\n        \n        css += `.${prefix}${tag} { ${themedStyle} }\\n`;\n    }\n    \n    return css;\n};\n\n/**\n * Configure quikdown with options and return a function\n * @param {Object} options - Configuration options\n * @returns {Function} Configured quikdown function\n */\nquikdown.configure = function(options) {\n    return function(markdown) {\n        return quikdown(markdown, options);\n    };\n};\n\n/**\n * Version information\n */\nquikdown.version = quikdownVersion;\n\n// Export for both CommonJS and ES6\n/* istanbul ignore next */\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = quikdown;\n}\n\n// For browser global\n/* istanbul ignore next */\nif (typeof window !== 'undefined') {\n    window.quikdown = quikdown;\n}\n\nexport default quikdown;","/**\n * quikdown_bd - Bidirectional markdown/HTML converter\n * Extends core quikdown with HTML→Markdown conversion\n * \n * Uses data-qd attributes to preserve original markdown syntax\n * Enables HTML→Markdown conversion for quikdown-generated HTML\n */\n\nimport quikdown from './quikdown.js';\n\n/**\n * Create bidirectional version by extending quikdown\n * This wraps quikdown and adds the toMarkdown method\n */\nfunction quikdown_bd(markdown, options = {}) {\n    // Use core quikdown with bidirectional flag to add data-qd attributes\n    return quikdown(markdown, { ...options, bidirectional: true });\n}\n\n// Copy all properties and methods from quikdown (including version)\nObject.keys(quikdown).forEach(key => {\n    quikdown_bd[key] = quikdown[key];\n});\n\n// Add the toMarkdown method for HTML→Markdown conversion\nquikdown_bd.toMarkdown = function(htmlOrElement) {\n    // Accept either HTML string or DOM element\n    let container;\n    if (typeof htmlOrElement === 'string') {\n        container = document.createElement('div');\n        container.innerHTML = htmlOrElement;\n    } else if (htmlOrElement instanceof Element) {\n        /* istanbul ignore next - browser-only code path, not testable in jsdom */\n        container = htmlOrElement;\n    } else {\n        return '';\n    }\n    \n    // Walk the DOM tree and reconstruct markdown\n    function walkNode(node, parentContext = {}) {\n        if (node.nodeType === Node.TEXT_NODE) {\n            // Return text content, preserving whitespace where needed\n            return node.textContent;\n        }\n        \n        if (node.nodeType !== Node.ELEMENT_NODE) {\n            return '';\n        }\n        \n        const tag = node.tagName.toLowerCase();\n        const dataQd = node.getAttribute('data-qd');\n        \n        // Process children with context\n        let childContent = '';\n        for (let child of node.childNodes) {\n            childContent += walkNode(child, { parentTag: tag, ...parentContext });\n        }\n        \n        // Determine markdown based on element and attributes\n        switch (tag) {\n            case 'h1':\n            case 'h2':\n            case 'h3':\n            case 'h4':\n            case 'h5':\n            case 'h6':\n                const level = parseInt(tag[1]);\n                const prefix = dataQd || '#'.repeat(level);\n                return `${prefix} ${childContent.trim()}\\n\\n`;\n                \n            case 'strong':\n            case 'b':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const boldMarker = dataQd || '**';\n                return `${boldMarker}${childContent}${boldMarker}`;\n                \n            case 'em':\n            case 'i':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const emMarker = dataQd || '*';\n                return `${emMarker}${childContent}${emMarker}`;\n                \n            case 'del':\n            case 's':\n            case 'strike':\n                if (!childContent) return ''; // Don't add markers for empty content\n                const delMarker = dataQd || '~~';\n                return `${delMarker}${childContent}${delMarker}`;\n                \n            case 'code':\n                // Note: code inside pre is handled directly by the pre case using querySelector\n                if (!childContent) return ''; // Don't add markers for empty content\n                const codeMarker = dataQd || '`';\n                return `${codeMarker}${childContent}${codeMarker}`;\n                \n            case 'pre':\n                const fence = node.getAttribute('data-qd-fence') || dataQd || '```';\n                const lang = node.getAttribute('data-qd-lang') || '';\n                // Look for code element child\n                const codeEl = node.querySelector('code');\n                const codeContent = codeEl ? codeEl.textContent : childContent;\n                return `${fence}${lang}\\n${codeContent.trimEnd()}\\n${fence}\\n\\n`;\n                \n            case 'blockquote':\n                const quoteMarker = dataQd || '>';\n                const lines = childContent.trim().split('\\n');\n                return lines.map(line => `${quoteMarker} ${line}`).join('\\n') + '\\n\\n';\n                \n            case 'hr':\n                const hrMarker = dataQd || '---';\n                return `${hrMarker}\\n\\n`;\n                \n            case 'br':\n                const brMarker = dataQd || '  ';\n                return `${brMarker}\\n`;\n                \n            case 'a':\n                const linkText = node.getAttribute('data-qd-text') || childContent.trim();\n                const href = node.getAttribute('href') || '';\n                // Check for autolinks\n                if (linkText === href && !dataQd) {\n                    return `<${href}>`;\n                }\n                return `[${linkText}](${href})`;\n                \n            case 'img':\n                const alt = node.getAttribute('data-qd-alt') || node.getAttribute('alt') || '';\n                const src = node.getAttribute('data-qd-src') || node.getAttribute('src') || '';\n                const imgMarker = dataQd || '!';\n                return `${imgMarker}[${alt}](${src})`;\n                \n            case 'ul':\n            case 'ol':\n                return walkList(node, tag === 'ol') + '\\n';\n                \n            case 'li':\n                // Handled by list processor\n                return childContent;\n                \n            case 'table':\n                return walkTable(node) + '\\n\\n';\n                \n            case 'p':\n                // Check if it's actually a paragraph or just a wrapper\n                if (childContent.trim()) {\n                    return childContent.trim() + '\\n\\n';\n                }\n                return '';\n                \n            case 'div':\n                // Check if it's a mermaid container\n                if (node.classList && node.classList.contains('mermaid-container')) {\n                    const fence = node.getAttribute('data-qd-fence') || '```';\n                    const lang = node.getAttribute('data-qd-lang') || 'mermaid';\n                    \n                    // First check for data-qd-source attribute\n                    const source = node.getAttribute('data-qd-source');\n                    if (source) {\n                        // Decode HTML entities from the attribute (mainly &quot;)\n                        const temp = document.createElement('textarea');\n                        temp.innerHTML = source;\n                        const code = temp.value;\n                        return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                    }\n                    \n                    // Fallback: Look for the legacy .mermaid-source element\n                    const sourceElement = node.querySelector('.mermaid-source');\n                    if (sourceElement) {\n                        // Decode HTML entities\n                        const temp = document.createElement('div');\n                        temp.innerHTML = sourceElement.innerHTML;\n                        const code = temp.textContent;\n                        return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                    }\n                    \n                    // Final fallback: try to extract from the mermaid element (unreliable after rendering)\n                    const mermaidElement = node.querySelector('.mermaid');\n                    if (mermaidElement && mermaidElement.textContent.includes('graph')) {\n                        return `${fence}${lang}\\n${mermaidElement.textContent.trim()}\\n${fence}\\n\\n`;\n                    }\n                }\n                // Check if it's a standalone mermaid diagram (legacy)\n                if (node.classList && node.classList.contains('mermaid')) {\n                    const fence = node.getAttribute('data-qd-fence') || '```';\n                    const lang = node.getAttribute('data-qd-lang') || 'mermaid';\n                    const code = node.textContent.trim();\n                    return `${fence}${lang}\\n${code}\\n${fence}\\n\\n`;\n                }\n                // Pass through other divs\n                return childContent;\n            \n            case 'span':\n                // Pass through container elements\n                return childContent;\n                \n            default:\n                return childContent;\n        }\n    }\n    \n    // Walk list elements\n    function walkList(listNode, isOrdered, depth = 0) {\n        let result = '';\n        let index = 1;\n        const indent = '  '.repeat(depth);\n        \n        for (let child of listNode.children) {\n            if (child.tagName !== 'LI') continue;\n            \n            const dataQd = child.getAttribute('data-qd');\n            let marker = dataQd || (isOrdered ? `${index}.` : '-');\n            \n            // Check for task list checkbox\n            const checkbox = child.querySelector('input[type=\"checkbox\"]');\n            if (checkbox) {\n                const checked = checkbox.checked ? 'x' : ' ';\n                marker = '-';\n                // Get text without the checkbox\n                let text = '';\n                for (let node of child.childNodes) {\n                    if (node.nodeType === Node.TEXT_NODE) {\n                        text += node.textContent;\n                    } else if (node.tagName && node.tagName !== 'INPUT') {\n                        text += walkNode(node);\n                    }\n                }\n                result += `${indent}${marker} [${checked}] ${text.trim()}\\n`;\n            } else {\n                let itemContent = '';\n                \n                for (let node of child.childNodes) {\n                    if (node.tagName === 'UL' || node.tagName === 'OL') {\n                        itemContent += walkList(node, node.tagName === 'OL', depth + 1);\n                    } else {\n                        itemContent += walkNode(node);\n                    }\n                }\n                \n                result += `${indent}${marker} ${itemContent.trim()}\\n`;\n            }\n            \n            index++;\n        }\n        \n        return result;\n    }\n    \n    // Walk table elements\n    function walkTable(table) {\n        let result = '';\n        const alignData = table.getAttribute('data-qd-align');\n        const alignments = alignData ? alignData.split(',') : [];\n        \n        // Process header\n        const thead = table.querySelector('thead');\n        if (thead) {\n            const headerRow = thead.querySelector('tr');\n            if (headerRow) {\n                const headers = [];\n                for (let th of headerRow.querySelectorAll('th')) {\n                    headers.push(th.textContent.trim());\n                }\n                result += '| ' + headers.join(' | ') + ' |\\n';\n                \n                // Add separator with alignment\n                const separators = headers.map((_, i) => {\n                    const align = alignments[i] || 'left';\n                    if (align === 'center') return ':---:';\n                    if (align === 'right') return '---:';\n                    return '---';\n                });\n                result += '| ' + separators.join(' | ') + ' |\\n';\n            }\n        }\n        \n        // Process body\n        const tbody = table.querySelector('tbody');\n        if (tbody) {\n            for (let row of tbody.querySelectorAll('tr')) {\n                const cells = [];\n                for (let td of row.querySelectorAll('td')) {\n                    cells.push(td.textContent.trim());\n                }\n                if (cells.length > 0) {\n                    result += '| ' + cells.join(' | ') + ' |\\n';\n                }\n            }\n        }\n        \n        return result.trim();\n    }\n    \n    // Process the DOM tree\n    let markdown = walkNode(container);\n    \n    // Clean up\n    markdown = markdown.replace(/\\n{3,}/g, '\\n\\n'); // Remove excessive newlines\n    markdown = markdown.trim();\n    \n    return markdown;\n};\n\n// Override the configure method to return a bidirectional version\nquikdown_bd.configure = function(options) {\n    return function(markdown) {\n        return quikdown_bd(markdown, options);\n    };\n};\n\n// Set version\n// Version is already copied from quikdown via Object.keys loop\n\n// Export for both module and browser\n/* istanbul ignore next */\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = quikdown_bd;\n}\n\n/* istanbul ignore next */\nif (typeof window !== 'undefined') {\n    window.quikdown_bd = quikdown_bd;\n}\n\nexport default quikdown_bd;"],"names":["CLASS_PREFIX","PLACEHOLDER_CB","ESC_MAP","QUIKDOWN_STYLES","h1","h2","h3","h4","h5","h6","pre","code","blockquote","table","th","td","hr","img","a","strong","em","del","ul","ol","li","quikdown","markdown","options","fence_plugin","inline_styles","bidirectional","getAttr","styles","tag","additionalStyle","style","createGetAttr","escapeHtml","text","replace","m","dataQd","marker","sanitizeUrl","url","allowUnsafe","trimmedUrl","trim","lowerUrl","toLowerCase","dangerousProtocols","protocol","startsWith","html","codeBlocks","inlineCodes","match","fence","lang","placeholder","length","langTrimmed","push","trimEnd","custom","lines","split","result","inTable","tableLines","i","line","includes","test","tableHtml","buildTable","join","processTable","hashes","content","level","listStack","indent","Math","floor","isOrdered","listType","listItemContent","taskListClass","taskMatch","checked","taskContent","isChecked","list","pop","type","currentList","liAttr","processLists","alt","src","sanitizedSrc","allow_unsafe_urls","altAttr","srcAttr","href","sanitizedHref","rel","textAttr","prefix","sanitizedUrl","forEach","pattern","RegExp","replacement","block","undefined","langClass","codeAttr","langAttr","fenceAttr","processInlineMarkdown","separatorIndex","headerLines","slice","bodyLines","alignments","map","cell","trimmed","endsWith","alignStyle","processedCell","quikdown_bd","emitStyles","theme","themeOverrides","_textColor","css","Object","entries","themedStyle","oldColor","newColor","configure","version","module","exports","window","keys","key","toMarkdown","htmlOrElement","container","document","createElement","innerHTML","Element","walkNode","node","parentContext","nodeType","Node","TEXT_NODE","textContent","ELEMENT_NODE","tagName","getAttribute","childContent","child","childNodes","parentTag","parseInt","repeat","boldMarker","emMarker","delMarker","codeMarker","codeEl","querySelector","quoteMarker","linkText","walkList","alignData","thead","headerRow","headers","querySelectorAll","_","align","tbody","row","cells","walkTable","classList","contains","source","temp","value","sourceElement","mermaidElement","listNode","depth","index","children","checkbox","itemContent"],"mappings":"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"}